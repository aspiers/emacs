(require 'as-load-paths)

(defvar find-function-source-path load-path)

;; (require 'cl)
;; (setq org-source-paths
;;       (remove-if-not
;;        (lambda (dir) (file-directory-p dir))
;;        (directory-files (concat as-emacs-dir "/major-modes") 'full-paths "org[-.]")))
;; (mapc (lambda (dir) (add-to-list 'find-function-source-path dir))
;;       org-source-paths)

(defvar as-source-paths
  '(
    "major-modes"
    "major-modes/org-mode.git/lisp"
    "major-modes/org-mode.git/contrib/lisp"
    "minor-modes"
    "utils"
    "fun"))

(defun as-add-to-find-function-source-path (paths)
  "Adds paths to `find-function-source-path'."
  (dolist (x as-source-paths)
    (let ((path (concat as-emacs-dir "/" x)))
      (and (file-directory-p path)
           (add-to-list 'find-function-source-path path)))))

(as-add-to-find-function-source-path as-source-paths)

(provide 'as-source-paths)
