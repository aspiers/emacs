#!/bin/bash
#
# Provide an emacs window in the quickest way possible, using wmctrl
# to focus it if necessary.  This favours the use of emacsclient if
# there is a running emacs server, and intelligently takes advantage
# of newer emacs multi-tty support where present.
#
# Invoke this rather than focus-emacs-frame.

tty_emacs=fe

# This has to be optional since invocations from mutt must not be
# backgrounded.  It cannot be unconditional (hence the '-if-poss'
# bit) since backgrounding is impossible if we have to fallback
# to tty emacs
create_frame=
while [ $# != 0 ]; do
    case "$1" in
        --bg-if-poss)
            bg_if_poss=y
            shift
            ;;
        -c|--create-frame)
            create_frame=$1
            shift
            ;;
        *)
            break
            ;;
    esac
done

if echo "$*" | egrep -q '(^| )-e( |$)'; then
    echo "-e would only work with emacsclient, not with new-emacs; aborting." >&2
    exit 1
fi

debug () {
    :
    echo "$*" >&2
}

if fast-X11-display; then
    EMACSCLIENT_TTY=
    if [ -n "$SSH_CONNECTION" ] || [[ "$DISPLAY" == localhost:* ]]; then
        xauth-emacs
    fi
else
    DISPLAY=
    EMACSCLIENT_TTY=--tty
fi

# If we're root, we don't want emacsclient to fall back to using
# a server socket for an emacs running non-root .
LOGNAME=

# Ideally we want to return control to the caller immediately, but at
# the same time wait until emacsclient completes before running
# wmctrl.  But you can't background emacsclient and then re-foreground
# it so it's connected to the tty's STDIN upon fallback to the
# alternative editor, since there's no way of knowing whether the
# fallback occurred until it's too late.  So we need to know in
# advance whether emacsclient will connect to the emacs server, and
# only background if it will:

if emacs_version=$( emacsclient -e 'emacs-version' 2>&1 ); then
    server_up=y
    emacs_version="${emacs_version%\"}"
    emacs_version="${emacs_version#\"}"
else
    server_up=
    emacs_version=$( emacs --batch --no-site-file --eval '(message emacs-version)' 2>&1 )
fi

multi_tty_support=
case "$emacs_version" in
    1[0-9].*|2[012].*)
        ;;
    *)
        multi_tty_support=y
        ;;
esac

focus_emacs_frame () {
    # Save the current window id so we know what to switch back to from emacs.
    if ! client_winid=`current-window-id`; then
        echo "WARNING: couldn't establish current window; will not be able to switch back" >&2
    fi

    # Focus existing emacs frame
    if ! focus-emacs-frame; then
        echo "focus-emacs-frame failed: is the emacs server running on a different X11 display?" >&2
    fi
}

do_editing () {
    # Wait for editing to be completed
    emacsclient $EMACSCLIENT_TTY "$@" >/dev/null

    if [ -n "$client_winid" ]; then
    # If we can, switch back to window from which emacsclient was invoked.
        wmctrl -ia "$client_winid"
    fi
}

maybe_bg () {
    if [ -n "$bg_if_poss" ] && [ -n "$DISPLAY" ]; then
        "$@" >/dev/null &
    else
        "$@"
    fi
}

if [ -n "$server_up" ]; then
    if [ -n "$multi_tty_support" ]; then
        if [ -z "$create_frame" ]; then
            # useful with org-protocol
            focus_emacs_frame
        fi
        # newer emacsen do all the hard work for us, since its clients
        # and servers can be tty- or Xorg-based!
        maybe_bg emacsclient $EMACSCLIENT_TTY $create_frame "$@"
    else
        # Looks like we found a working server
        if [ -n "$DISPLAY" ]; then
            focus_emacs_frame
            maybe_bg do_editing "$@"
        else
            # But we can't reach it, so fallback to fast-loading tty
            # emacs in foreground, in favour of speed.
            $tty_emacs "$@"
        fi
    fi
else
    if [ -n "$DISPLAY" ] && [ "$USER" != root ]; then
        maybe_bg new-emacs "$@"
    else
        # Fallback to fast-loading tty emacs in foreground, in favour of speed
        $tty_emacs "$@"
    fi
fi
