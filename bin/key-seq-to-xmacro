#!/usr/bin/perl
#
# Converts STDIN sequences such as 'M-right C-u M-e foo \n' into
# the equivalent xmacroplay commands.

use strict;
use warnings;

my %keysyms;
open(KEYSYMS, "/usr/include/X11/keysymdef.h")
  or die "Couldn't open(keysymdef.h): $!\n";
while (<KEYSYMS>) {
  /#define XK_(\w\S+)/ && $keysyms{$1}++;
}
close(KEYSYMS);

my @actions = split /\s+/, join '', grep ! /^\s*(#|$)/, <>;
foreach (@actions) {
  #print "Got: [$_]\n";

  if (/^((?:[CMSH]-){1,4})(.+)$/) {
    my ($modifiers, $key) = ($1, $2);
    my @mods = split /-/, $modifiers;
    foreach my $abbrev (@mods) {
      my $keysym = $abbrev eq 'C' ? 'Control_L'
                 : $abbrev eq 'M' ? 'Meta_L'
                 : $abbrev eq 'S' ? 'Super_R'
                 : $abbrev eq 'H' ? 'Hyper_R'
                 : die "BUG";
      print "KeyStrPress $keysym\n";
    }
    if (length $key > 1 and $keysyms{$key}) {
      print "KeyStr $key\n";
    }
    else {
      print "String $key\n";
    }
    foreach my $abbrev (reverse @mods) {
      my $keysym = $abbrev eq 'C' ? 'Control_L'
                 : $abbrev eq 'M' ? 'Meta_L'
                 : $abbrev eq 'S' ? 'Super_R'
                 : $abbrev eq 'H' ? 'Hyper_R'
                 : die "BUG";
      print "KeyStrRelease $keysym\n";
    }
    next;
  }

  if (/^\\n$/) {
    print "KeyStr Return\n";
    next;
  }
  
  if (/^\\e$/) {
    print "KeyStr Escape\n";
    next;
  }
  
  if (/^\\t$/) {
    print "KeyStr Tab\n";
    next;
  }

  if ($keysyms{$_}) {
    print "KeyStr $_\n";
    next;
  }

  if (/^\\(.+)$/ and $keysyms{$1}) {
    # escaped keysym -> treat as string
    s/^\\//;
  }

  # We assume anything else is a normal string.
  print "String $_\n";
}
