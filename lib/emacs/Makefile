# Adam's emacs Makefile

# {{{ Determine emacs version

ifndef EMACS
  EMACS=emacs
endif

version=$(shell $(EMACS) --version)

VERSION_NUMBER=$(shell echo "$(version)" | \
                   perl -ne '/^\s*(GNU |X)Emacs (\d+\.\d+)/ && print "$$2"')

# }}}

# {{{ Tweakable parameters

# {{{ 3rd party packages

# These should be symlinked to the correct versions.
DVC_DIR        = major-modes/dvc
ORG_DIR        = major-modes/org-mode.git
EPG_DIR        = major-modes/epg
REMEMBER_DIR   = major-modes/remember
EMACSRAILS_DIR = major-modes/emacs-rails
ifeq (,$(wildcard $(EMACSRAILS_DIR)))
	EMACSRAILS_DIR=
endif
BEHAVE_DIR     = utils/behave.git
COLOR_THEME_DIR = color-theme

# This is a list of make targets which have their own Makefiles
# and are responsible for compiling *and* installing themselves.
THIRD_PARTY_PKGS = 		\
	.psgml-made

# Don't automatically compile *.el in or install *.elc from these
# directories:
THIRD_PARTY_PKG_DIRS =          \
	major-modes/psgml

ifneq (,$(wildcard $(DVC_DIR)))
	THIRD_PARTY_PKGS     += .dvc-installed
	THIRD_PARTY_PKG_DIRS += $(DVC_DIR)
endif
ifneq (,$(wildcard $(ORG_DIR)))
	THIRD_PARTY_PKGS     += .org-installed
	THIRD_PARTY_PKG_DIRS += $(ORG_DIR)
endif
ifneq (,$(wildcard $(REMEMBER_DIR)))
	THIRD_PARTY_PKGS     += .remember-installed
	THIRD_PARTY_PKG_DIRS += $(REMEMBER_DIR)
endif
ifneq (,$(wildcard $(COLOR_THEME_DIR)))
	THIRD_PARTY_PKGS     += .color-theme-installed
	THIRD_PARTY_PKG_DIRS += $(COLOR_THEME_DIR)
endif

# }}}
# {{{ Where do we pick up .el files which don't have their own Makefiles?

el_search_paths = 			\
	init/common 			\
	$(wildcard major-modes/*.el) 	\
	major-modes/mmm 		\
	major-modes/pcl-cvs 		\
	major-modes/pgg 		\
	minor-modes 			\
	utils 				\
	fun   				\
	$(EMACSRAILS_DIR)

# }}}

ifneq (,$(wildcard $(ORG_DIR)))
  EL_OVERRIDES = org*
endif

# {{{ ignore paths and files

# Pretend these don't exist at all.
IGNORE_PATHS = 					\
	minor-modes/msf-abbrev/mode-abbrevs 	\
	major-modes/monkey-2
IGNORE_FILES =		    		\
	loaddefs.el			\
	major-modes/sdf.el  		\
	major-modes/mediawiki.el 	\
	$(DVC_DIR)/lisp/contrib/ewoc.el \
	$(EMACSRAILS_DIR)/behave-rails.el \
	$(BEHAVE_DIR)/example.el

ifeq (,$(wildcard $(ORG_DIR)))
  IGNORE_FILES += major-modes/org-*.el utils/as-gtd.el
endif

ifeq "$(findstring 21.,$(VERSION_NUMBER))" "21."
# org-annotation-helper.el needs url which isn't in emacs 21
# ditto org-irc.el which needs erc
  IGNORE_FILES += major-modes/org-annotation-helper.el \
		  $(ORG_DIR)/lisp/org-irc.el
endif

# }}}
# {{{ Directories to scan for autoload cookies

LOADDEFS_DIRS=	\
	utils

# }}}
# {{{ global paths

EMACSLIB = $(HOME)/lib/emacs

GNUINSTALL_DIR = $(EMACSLIB)/GNU_Emacs
XINSTALL_DIR = $(EMACSLIB)/XEmacs

prefix   = $(HOME)/local
infodir = $(prefix)/share/info

# This is where some third-party stuff like epg gets installed,
# although any third-party packages whose Makefiles are flexible
# enough to get installed to $(POST_INSTALL_DIR) should probably
# be installed there for simplicity.
lispdir = $(prefix)/share/emacs/site-lisp

# }}}

TO_CLEAN = psgml nxml emacs-w3m pgg

ifneq (,$(wildcard $(ORG_DIR)))
  TO_CLEAN += org
endif
ifneq (,$(wildcard $(DVC_DIR)))
  TO_CLEAN += dvc
endif
ifneq (,$(wildcard $(EPG_DIR)))
  TO_CLEAN += epg
endif
ifneq (,$(wildcard $(COLOR_THEME_DIR)))
  TO_CLEAN += color-theme
endif

# }}}

# {{{ Figure out which .els to compile ourselves.

# The list should comprise of everything we can find which we're not
# completely ignoring, but excluding stuff generated by third-party
# Makefiles.

# Horrible horrible horrible.  Prune 3rd party packages from imminent find(1).
PRUNE_DIRS = $(shell echo $(THIRD_PARTY_PKG_DIRS) $(IGNORE_PATHS) | perl -040lpe 's|(.+)|! -path "$$1/*" |g')
PRUNE_FILES = $(shell echo $(THIRD_PARTY_PKG_DIRS) $(IGNORE_FILES) | perl -040lpe 's|(.+)|! -path "$$1" |g')

# We exclude as-init.el here because it has to be compiled after everything else.
ELs_TO_COMPILE_cmd =   				        \
	find $(el_search_paths)				\
	        -follow					\
		-name \*.el 				\
	      $(PRUNE_DIRS)				\
	      $(PRUNE_FILES)				\
	      ! -name as-init.el			\
	      ! -path '*/attic/*'			\
	      ! -path '*/shimbun/*'
ELs_TO_COMPILE = $(shell $(ELs_TO_COMPILE_cmd)) 

# These are the .elcs we want to build ourselves
ELCs_TO_COMPILE = $(addsuffix c,$(ELs_TO_COMPILE))

# }}}
# {{{ THIRD_PARTY_ELCs

# Do a separate search for elcs since we want to include ones which were
# built from vendor Makefiles.
# Note that the shell expansion is deferred until needed.
THIRD_PARTY_ELCs = $(shell \
	find $(THIRD_PARTY_PKG_DIRS) -follow -name \*.elc \
)
# We also need to know which vendor-provided .el files to install
# into the destination directory, so that find-library works.
THIRD_PARTY_ELs = $(shell \
	find $(THIRD_PARTY_PKG_DIRS) -follow -name \*.el | so \
)

# }}}

AS_INIT_EL  = init/common/as-init.el
AS_INIT_ELC = init/common/as-init.elc

# {{{ Determine compilation variables and parameters

BATCH_EVAL=$(EMACS) -q --batch --no-site-file --eval

SYSTEM_TYPE=$(shell $(BATCH_EVAL) \
		'(message (format "%s" system-type))' 2>&1 | grep -v '^Loading ')

SITE_INSTALL_DIR=$(shell $(BATCH_EVAL) '(princ (car load-path))')

ifeq (, $(findstring XEmacs,$(version)))
  # GNU Emacs
  LOADPATH_OPTS=$(addprefix -L ,$(LIBDIRS))

  # Really ugly hack to add all subdirs of lispdir to the load-path.
  # This is required for instance so that org-crypt can compile against
  # ~/local/share/emacs/site-lisp/epg/
  LOADPATH_OPTS += \
	--eval "(let ((orig-dir default-directory)) 		\
		   (cd \"$(lispdir)\") 				\
		   (normal-top-level-add-subdirs-to-load-path) 	\
		   (cd orig-dir))"				\
	--eval "(normal-top-level-add-to-load-path '(\"$(lispdir)\"))"
#	--eval "(message (princ-list load-path))" \

  INSTALL_DIR=$(GNUINSTALL_DIR)/$(VERSION_NUMBER)/$(SYSTEM_TYPE)
else
  # X Emacs.  Blegh!
  LOADPATH_OPTS=$(addsuffix \" ,$(addprefix \",$(LIBDIRS)))
#  LOADPATH_OPTS=--eval "(setq load-path (append '($(LOADPATH_OPTS)) load-path))"
  INSTALL_DIR=$(XINSTALL_DIR)/$(VERSION_NUMBER)/$(SYSTEM_TYPE)
endif

PRE_INSTALL_DIR  = $(INSTALL_DIR)/pre
POST_INSTALL_DIR = $(INSTALL_DIR)/post

COMPILER=$(EMACS) --no-site-file
#COMPILER += --eval '(setq debug-on-error t)'
COMPILER_BATCH=-batch -f batch-byte-compile
COMPILER_OPTS=$(COMPILER_BATCH)

# }}}

# {{{ Phony targets

# Phony targets are bad except for top-level rules because if a rule A
# has a phony prerequisite B, that phony rule B will always get
# executed, even if B's prerequisites don't need to be, hence the
# parent rule will too.

.PHONY: all #$(THIRD_PARTY_PKGS)

# }}}

all: .elcs install

# {{{ debugging targets

show-compiler:
	@echo 'COMPILER:          "$(COMPILER)"'
	@echo 'COMPILER_PRE_OPTS: "$(COMPILER_PRE_OPTS)"'
	@echo 'COMPILER_OPTS:     "$(COMPILER_OPTS)"'

list-libdirs:
	@echo '$(LIBDIRS)'

list-loadpath-opts:
	@echo '$(LOADPATH_OPTS)'

list-prune:
	@echo "$(PRUNE_DIRS)"
	@echo "$(PRUNE_FILES)"

list-els-to-compile-cmd:
	@echo "$(ELs_TO_COMPILE_cmd)"

list-els-to-compile:
	@for el in $(ELs_TO_COMPILE); do echo $$el; done

list-third-party-pkg-dirs:
	@for elc in $(THIRD_PARTY_PKG_DIRS); do echo $$elc; done

list-third-party-els:
	@for elc in $(THIRD_PARTY_ELs); do echo $$elc; done

list-third-party-elcs:
	@for elc in $(THIRD_PARTY_ELCs); do echo $$elc; done

list-install-files:
	@for file in $(INSTALL_FILES); do echo $$file; done

# }}}
# {{{ high-level targets

.elcs: $(ELCs_TO_COMPILE) $(THIRD_PARTY_PKGS) $(AS_INIT_ELC)
	@touch $@

$(PRE_INSTALL_DIR) $(POST_INSTALL_DIR):
	@[ -d $@ ] || mkdir -p $@

.PHONY: install force-install
force-install: clean-installed install

.PHONY: clean-installed
clean-installed:
	@rm -f .installed

install: .installed

# N.B. Must install .el files as well as .elc files so that
# find-function-source-path doesn't need to be extended excessively.
# Note that THIRD_PARTY_ELCs already get installed by third party
# Makefiles into $(lispdir). It would be nice to install the
# THIRD_PARTY_ELs too, although to be safe we would have to install
# them also into $(lispdir) not $(POST_INSTALL_DIR), since e.g. color-theme
# does:
#
# (defcustom color-theme-libraries (directory-files 
#                                   (concat 
#                                    (file-name-directory (locate-library "color-theme"))
#                                    "/themes") t "^color-theme")
INSTALL_FILES_TMP = \
	$(ELs_TO_COMPILE) $(ELCs_TO_COMPILE) \
	$(AS_INIT_ELC)
INSTALL_FILES = $(filter-out $(DVC_DIR)/lisp/contrib/ewoc.el,$(INSTALL_FILES_TMP))

ifneq (,$(EL_OVERRIDES))
ALL_OVERRIDES = \
	$(addsuffix .el,  $(EL_OVERRIDES)) \
	$(addsuffix .elc, $(EL_OVERRIDES))
endif

.PHONY: unlock-install-dirs lock-install-dirs
UNLOCK_INSTALL_DIRS = $(MAKE) -s unlock-install-dirs
LOCK_INSTALL_DIRS   = $(MAKE) -s lock-install-dirs
unlock-install-dirs: $(PRE_INSTALL_DIR) $(POST_INSTALL_DIR)
	@echo "Making files in $(PRE_INSTALL_DIR) and $(POST_INSTALL_DIR) read/write ..."
	@chmod -R u+w $(PRE_INSTALL_DIR) $(POST_INSTALL_DIR)
lock-install-dirs:
	@echo "Making files in $(PRE_INSTALL_DIR) and $(POST_INSTALL_DIR) read-only ..."
	@chmod -R a-w $(PRE_INSTALL_DIR) $(POST_INSTALL_DIR)

.installed: .elcs
	@$(UNLOCK_INSTALL_DIRS)
	@echo "Installing .el and .elc files in $(POST_INSTALL_DIR) ..."
	@cp -f $(INSTALL_FILES) $(POST_INSTALL_DIR)
	@cd $(POST_INSTALL_DIR) && \
	   if [ -n "$(ALL_OVERRIDES)" ]; then \
	     echo "Moving overrides from $(POST_INSTALL_DIR) to $(PRE_INSTALL_DIR)" && \
	     mv $(ALL_OVERRIDES) $(PRE_INSTALL_DIR) && \
	     for f in $(ALL_OVERRIDES); do \
	       if [ -e "$$f" ]; then \
	         echo "$$f still in $(POST_INSTALL_DIR) - WHY??"; \
	         exit 1; \
	       fi; \
	     done; \
	   fi
	@$(LOCK_INSTALL_DIRS)
	@touch $@

# Some shitty Solaris makes have broken $(wildcard foo/*.bar)
.PHONY: clean
clean: uninstall $(addprefix clean-, $(TO_CLEAN))
	@-find $(EMACSLIB) -follow -name \*.elc -print | xargs -r rm -f
	rm -f .*-made
	for dir in $(THIRD_PARTY_PKG_DIRS); do \
		( cd $$dir && make clean )     \
	done

.PHONY: uninstall
uninstall:
	-find $(PRE_INSTALL_DIR) $(POST_INSTALL_DIR) -name \*.elc -print | \
		xargs -r rm -f

# }}}
# {{{ Autogenerate loaddefs

# Where to put as-loaddefs.el?  We need it for both compile- and
# run-time, but we don't want to pollute the compile-time load-path
# with POST_INSTALL_DIR, so we put it in a dedicated subdirectory:
LOADDEFS_DIR=$(POST_INSTALL_DIR)/loaddefs
LOADDEFS=$(LOADDEFS_DIR)/as-loaddefs.el
#LOADDEFS=$(POST_INSTALL_DIR:$(EMACSLIB)/%=%)/as-loaddefs.el

show-loaddefs:
	@echo '$(LOADDEFS)'
LOADDEFS_DEPS_CANDIDATES = $(addsuffix /*.el,$(LOADDEFS_DIRS))
LOADDEFS_DEPS = $(shell grep -l '^;;;\#\#\#autoload' $(LOADDEFS_DEPS_CANDIDATES))
show-loaddefs-deps:
	@echo $(LOADDEFS_DEPS)

# emacs 21 uses update-autoloads-from-directories
# emacs 22 uses update-directory-autoloads
LOADDEFS_DIRS_LISP=$(addsuffix ",$(addprefix "$(EMACSLIB)/,$(LOADDEFS_DIRS)))
define loaddefs_lisp
(progn \
    (setq generated-autoload-file "$(LOADDEFS)") \
    (if (>= emacs-major-version 22) \
        (update-directory-autoloads $(LOADDEFS_DIRS_LISP)) \
        (update-autoloads-from-directories $(LOADDEFS_DIRS_LISP))))
endef

.PHONY: loaddefs
loaddefs: $(LOADDEFS)

$(LOADDEFS): $(LOADDEFS_DEPS)
	@echo "### Generating $@"
	@$(UNLOCK_INSTALL_DIRS)
	@mkdir -p "$(LOADDEFS_DIR)"
# update-directory-autoloads requires non-empty file to update.
# It also sometimes fails to recognise that the source files have
# relevant changes, so we truncate it every time.
	@echo " " > "$(LOADDEFS)"
	$(BATCH_EVAL) '$(loaddefs_lisp)'
	@$(LOCK_INSTALL_DIRS)

# }}}
# {{{ General pattern-based rules for compiling .el to .elc

$(lispdir):
	@mkdir -p $(lispdir)

%.elc: %.el
	@if [ -n "$(LIBDIRS)" ]; then \
	  echo "### Compiling $< with libs: $(LIBDIRS) ..."; \
	else \
	  echo "### Compiling $< ..."; \
	fi
	@$(COMPILER) $(LOADPATH_OPTS) $(COMPILER_PRE_OPTS) $(COMPILER_OPTS) $<

%.elc.verbose: %.el
	@if [ -n "$(LIBDIRS)" ]; then \
	  echo "### Compiling $< with libs: $(LIBDIRS) ..."; \
	else \
	  echo "### Compiling $< ..."; \
	fi
	$(COMPILER) $(LOADPATH_OPTS) $(COMPILER_PRE_OPTS) $(COMPILER_OPTS) $(<:.verbose=)

# The idea behind this one is to launch an emacs in which a manual
# byte-compile of the .el can be debugged, but it doesn't work yet.
%.elc.debug: COMPILER_BATCH='-q -l bytecomp'
%.elc.debug: %.elc
	ln -sf $< $@
# 	rm -f $(@:.debug=)
# 	$(MAKE) $(@:.debug=) COMPILER_BATCH='-q -l bytecomp'

# }}}
# {{{ Special rules for my init files

INIT_COMMON_LIBDIRS = 	\
	init/common 		\
	major-modes 		\
	major-modes/mmm 	\
	$(ORG_DIR)/lisp 	\
	minor-modes 		\
	utils

init/common/as-%.elc: LIBDIRS += $(INIT_COMMON_LIBDIRS)

init/common/as-bindings.elc: init/common/as-progress.elc .org-installed
$(AS_INIT_ELC): init/common/as-progress.elc init/common/as-bindings.elc
$(AS_INIT_ELC): utils/smooth-scrolling.elc
$(AS_INIT_ELC): $(LOADDEFS)
$(AS_INIT_ELC): LIBDIRS += $(LOADDEFS_DIR) $(lispdir)
#$(AS_INIT_ELC): COMPILER_PRE_OPTS = --eval '(load-file "$(LOADDEFS)")'

# }}}
# {{{ Special rules for utils files

# as-gtd needs $(ORG_DIR)/contrib/lisp/org-mairix.el
utils/as-gtd.elc: LIBDIRS += utils $(ORG_DIR)/contrib/lisp
utils/as-gtd.elc: .org-installed

init/common/as-%.elc: LIBDIRS += $(INIT_COMMON_LIBDIRS)

# }}}
# {{{ org-mode

major-modes/org-action-verbs.elc: LIBDIRS += $(ORG_DIR)/lisp

.PHONY: org
org: .org-installed
ifeq (,$(wildcard $(ORG_DIR)))
clean-org:
	@echo "Won't clean non-existent $(ORG_DIR)"
.org-installed:
	@echo "Won't install from non-existent $(ORG_DIR)"
else
clean-org:
	rm -f .org-installed
	$(MAKE) -C $(ORG_DIR) clean
.org-installed: $(wildcard $(ORG_DIR)/*.el) $(wildcard $(ORG_DIR)/*/*.el) $(wildcard $(ORG_DIR)/*/*/*.el) .epg-installed
	@$(UNLOCK_INSTALL_DIRS)
#	EMACS="$(EMACS) -L $(lispdir)/epg"
	$(MAKE) -C $(ORG_DIR) install-lisp \
		prefix=$(prefix) \
		lispdir=$(PRE_INSTALL_DIR)
	@$(LOCK_INSTALL_DIRS)
	$(MAKE) -C $(ORG_DIR) install-info \
		prefix=$(prefix) \
		infodir=$(infodir)
	touch $@
endif

# }}}
# {{{ mmm-mode

major-modes/mmm/%.elc: major-modes/mmm/%.el

major-modes/mmm/%.elc: LIBDIRS += major-modes/mmm

# }}}
# {{{ remember-mode

#major-modes/remember/%.elc: major-modes/remember/%.el
#major-modes/remember/%.elc: LIBDIRS += major-modes/remember

REMEMBER_DISABLE=$(addprefix remember-,bbdb bibl blosxom emacs-wiki-journal planner experimental)

remember: .remember-installed
clean-remember:
	rm -f .remember-made .remember-installed
	$(MAKE) -C $(REMEMBER_DIR) clean
.remember-made: $(wildcard $(REMEMBER_DIR)/*.el) $(REMEMBER_DIR)/Makefile.defs
	@( \
	  cd $(REMEMBER_DIR); \
	  echo "Disabling $(REMEMBER_DISABLE)"; \
	  for d in $(REMEMBER_DISABLE); do \
	    el=$$d.el; \
	    if [ -e "$$el" ]; then \
	      if mv "$$el" "$$el.disabled"; then \
	        echo "mv $$el $$el.disabled"; \
	      else \
	        echo "FAILED: mv $$el $$el.disabled"; \
		exit 1; \
	      fi; \
	    else \
	      echo "$$el not there"; \
	    fi; \
	  done; \
	)
	$(MAKE) -C $(REMEMBER_DIR) all \
		EMACS=$(EMACS) PREFIX=$(prefix) INFODIR=$(infodir)
	touch $@

.remember-installed: .remember-made
	@$(UNLOCK_INSTALL_DIRS)
	cd $(REMEMBER_DIR) && \
	  $(MAKE) install ELISPDIR=$(lispdir) INFODIR=$(infodir)
	@$(LOCK_INSTALL_DIRS)
	touch $@

# }}}
# {{{ psgml-mode

psgml: .psgml-made
clean-psgml:
	rm -f .psgml-made
# psgml Makefile is missing a 'clean' target
	rm -f major-modes/psgml/*.elc
.psgml-made:
	$(MAKE) -C major-modes/psgml
	touch $@

# }}}
# {{{ nxml-mode

nxml: .nxml-mode-20041004-made
clean-nxml:
	rm -f .nxml-mode-20041004-made
	$(MAKE) -C major-modes/nxml-mode-20041004 clean
.nxml-mode-20041004-made: $(POST_INSTALL_DIR)
	$(MAKE) -C major-modes/nxml-mode-20041004
	cp rng-auto.el $(POST_INSTALL_DIR)
	touch $@

# }}}
# {{{ emacs-w3m-mode

emacs-w3m: .emacs-w3m-made
clean-emacs-w3m:
	rm -f .emacs-w3m-made
	$(MAKE) -C major-modes/emacs-w3m-1.4.4 clean
.emacs-w3m-made:
	@$(UNLOCK_INSTALL_DIRS)
	( 					\
	  cd major-modes/emacs-w3m-1.4.4    && 	\
	  ./configure --prefix=$(prefix)	\
		      --infodir=$(infodir) && 	\
	  make				    && 	\
	  $(MAKE) install			    && 	\
	  cp w3m-load.el $(POST_INSTALL_DIR) 	\
	)
	@$(LOCK_INSTALL_DIRS)
	touch $@

# }}}
# {{{ pgg-mode

pgg: .pgg-made
clean-pgg:
	rm -f .pgg-made
	$(MAKE) -C major-modes/pgg clean
major-modes/pgg/%.elc: LIBDIRS += major-modes/pgg
.pgg-made: major-modes/pgg/pgg.elc
	@-cp major-modes/pgg/pgg.{el,elc} $(POST_INSTALL_DIR) && touch $@

# }}}
# {{{ dvc-mode

utils/tree-widget-2.0/%.elc: LIBDIRS += utils/tree-widget-2.0

ifeq (,$(wildcard $(DVC_DIR)))
clean-dvc:
	@echo "Won't clean non-existent $(DVC_DIR)"
.dvc-configured .dvc-made .dvc-installed:
	@echo "Won't install from non-existent $(DVC_DIR)"
else
dvc_build_dir=$(DVC_DIR)/++build
dvc: .dvc-installed
clean-dvc:
	rm -f .dvc-configured .dvc-installed
	$(MAKE) -C $(DVC_DIR) clean
.dvc-configured: $(DVC_DIR)/configure
	@-( 								\
	  if which baz >/dev/null 2>&1; then 				\
	    with_arch=--with-arch=baz; 					\
	    echo "Found baz; using that in preference to tla";		\
	  else								\
	    with_arch= ; 	 					\
	  fi; 								\
	  [ -d $(dvc_build_dir) ] || mkdir $(dvc_build_dir);		\
	  cd $(dvc_build_dir) &&	 				\
	  ../configure 							\
	    --prefix=$(prefix)	 					\
	    --with-other-dirs=$(HOME)/lib/emacs/utils/tree-widget-2.0 	\
	    $$with_arch							\
	) && 								\
	touch $@

$(DVC_DIR)/configure: $(DVC_DIR)/configure.ac
	-cd $(DVC_DIR) && autoconf

.dvc-made: $(wildcard $(DVC_DIR)/*.el) $(wildcard $(DVC_DIR)/*/*.el) .dvc-configured
	$(MAKE) -C $(DVC_DIR)/++build
	touch $@

.dvc-installed: .dvc-made
	@$(UNLOCK_INSTALL_DIRS)
	@-( 								\
	  cd $(DVC_DIR)/++build && 				\
	  $(MAKE) install &&						\
	  install-info --info-dir=$(infodir) $(infodir)/dvc.info	\
	) &&								\
	$(LOCK_INSTALL_DIRS) &&					\
	touch $@
endif

# }}}
# {{{ epg-mode

epg: .epg-installed
ifeq (,$(wildcard $(EPG_DIR)))
clean-epg:
	@echo "Won't clean non-existent $(EPG_DIR)"
.epg-installed:
	@echo "Won't install from non-existent $(EPG_DIR)"
else
clean-epg:
	rm -f .epg-installed
	-$(MAKE) -C $(EPG_DIR) clean
.epg-installed: $(EPG_DIR)/epg.el
	@$(UNLOCK_INSTALL_DIRS)
	@-( cd $(EPG_DIR) && \
	  ./configure --prefix=$(prefix) \
	  	      --infodir=$(infodir) && \
	  $(MAKE) install \
	) && \
	$(LOCK_INSTALL_DIRS) && \
	echo "### epg installed" && \
	touch $@
endif

# }}}
# {{{ dired+

major-modes/dired+.elc: LIBDIRS += major-modes

# }}}
# {{{ color-theme

.PHONY: color-theme
color-theme: .color-theme-installed
ifeq (,$(wildcard $(COLOR_THEME_DIR)))
clean-color-theme:
	@echo "Won't clean non-existent $(COLOR_THEME_DIR)"
.color-theme-installed:
	@echo "Won't install from non-existent $(COLOR_THEME_DIR)"
else
clean-color-theme:
	rm -rf .color-theme-installed $(lispdir)/color-theme* $(lispdir)/themes
	@$(UNLOCK_INSTALL_DIRS)
	rm -f $(POST_INSTALL_DIR)/color-theme*
	@$(LOCK_INSTALL_DIRS)
	$(MAKE) -C $(COLOR_THEME_DIR) clean
.color-theme-installed: $(wildcard $(COLOR_THEME_DIR)/*.el)
	$(MAKE) -C $(COLOR_THEME_DIR) autoloads install-bin \
		PREFIX=$(prefix) \
		ELISPDIR=$(lispdir) \
		INFODIR=$(infodir)
	touch $@
endif

# }}}

# {{{ emacs-rails

# emacs-rails needs find-recursive and behave
$(EMACSRAILS_DIR)/%.elc: LIBDIRS += $(EMACSRAILS_DIR) utils $(BEHAVE_DIR)
$(EMACSRAILS_DIR)/%.elc: COMPILER_PRE_OPTS += -l rails

$(BEHAVE_DIR)/%.elc: LIBDIRS += $(BEHAVE_DIR)
$(BEHAVE_DIR)/example.elc: $(BEHAVE_DIR)/behave.elc

# }}}

