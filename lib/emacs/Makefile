DVC_DIR   = dvc
ORG_DIR   = org-hg

# Where do we pick up .el files which don't have their own Makefiles?
el_search_paths = 			\
	init/common 			\
	$(wildcard major-modes/*.el) 	\
	major-modes/mmm 		\
	major-modes/pcl-cvs 		\
	major-modes/remember 		\
	major-modes/pgg 		\
	minor-modes 			\
	utils 				\
	fun

EL_OVERRIDES = org pcvs*

# This is a list of make targets which have their own Makefiles
THIRD_PARTY_PKGS = 		\
	psgml 			\
	muse 			\
	dvc			\
	org

# Don't automatically compile *.el in these directories:
THIRD_PARTY_PKG_DIRS = $(addprefix major-modes/, 	\
	psgml 						\
	muse 						\
	$(DVC_DIR) 					\
	$(ORG_DIR) 					\
	)

# Directories to scan for autoload cookies
LOADDEFS_DIRS=	\
	utils

LOADDEFS_DIRS_LISP=$(addsuffix ",$(addprefix "$(EMACSLIB)/,$(LOADDEFS_DIRS)))

# Where to put as-loaddefs.el?  We need it for both compile- and
# run-time, but we don't want to pollute the compile-time load-path
# with POST_INSTALL_DIR.
LOADDEFS_DIR=$(POST_INSTALL_DIR)/loaddefs
LOADDEFS=$(LOADDEFS_DIR)/as-loaddefs.el
#LOADDEFS=$(POST_INSTALL_DIR:$(EMACSLIB)/%=%)/as-loaddefs.el

# Pretend these don't exist at all.
IGNORE_PATHS = 					\
	minor-modes/msf-abbrev/mode-abbrevs 	\
	major-modes/monkey-2			\
	major-modes/remember*
IGNORE_FILES =		    \
	loaddefs.el	\
	major-modes/sdf.el  \
	major-modes/mediawiki.el \
	major-modes/planner*.el


# Phony targets are bad except for top-level rules because if a rule A
# has a phony prerequisite B, that phony rule B will always get
# executed, even if B's prerequisites don't need to be, hence the
# parent rule will too.

EMACSLIB = $(HOME)/lib/emacs

GNUINSTALL_DIR = $(EMACSLIB)/GNU_Emacs
XINSTALL_DIR = $(EMACSLIB)/XEmacs

prefix   = $(HOME)/local
infodir = $(prefix)/share/info
lispdir = $(prefix)/share/emacs/site-lisp

# Figure out which .els to compile ourselves.  The list should comprise of
# everything we can find which we're not completely ignoring, but excluding
# stuff generated by third-party Makefiles.

# Horrible horrible horrible.  Prune 3rd party packages from imminent find(1).
PRUNE_DIRS = $(shell echo $(THIRD_PARTY_PKG_DIRS) $(IGNORE_PATHS) | perl -040lpe 's|(.+)|! -path "$$1/*" |g')
PRUNE_FILES = $(shell echo $(THIRD_PARTY_PKG_DIRS) $(IGNORE_FILES) | perl -040lpe 's|(.+)|! -path "$$1" |g')

# We exclude as-init.el here because it has to be compiled after everything else.
ELs_TO_COMPILE_cmd =   				        \
	find $(el_search_paths)				\
	        -follow					\
		-name \*.el 				\
	      $(PRUNE_DIRS)				\
	      $(PRUNE_FILES)				\
	      ! -name as-init.el			\
	      ! -name remember-bbdb.el 			\
	      ! -name remember-bibl.el 			\
	      ! -name remember-blosxom.el 		\
	      ! -name remember-emacs-wiki-journal.el 	\
	      ! -path '*/attic/*'			\
	      ! -path '*/shimbun/*'
ELs_TO_COMPILE = $(shell $(ELs_TO_COMPILE_cmd)) 

# These are the .elcs we want to build ourselves
ELCs_TO_COMPILE = $(addsuffix c,$(ELs_TO_COMPILE))

# Do a separate search for elcs since we want to include ones which were
# built from vendor Makefiles.
THIRD_PARTY_ELCs = $(shell \
	find $(THIRD_PARTY_PKG_DIRS) -name \*.elc \
)
AS_INIT_EL  = init/common/as-init.el
AS_INIT_ELC = init/common/as-init.elc

ifndef EMACS
  EMACS=emacs
endif

BATCH_EVAL=$(EMACS) -q --batch --no-site-file --eval

version=$(shell $(EMACS) --version)
VERSION_NUMBER=$(shell echo "$(version)" | \
                   perl -ne '/^\s*(GNU |X)Emacs (\d+\.\d+)/ && print "$$2"')
SYSTEM_TYPE=$(shell $(BATCH_EVAL) \
		'(message (format "%s" system-type))' 2>&1 | grep -v '^Loading ')

SITE_INSTALL_DIR=$(shell $(BATCH_EVAL) '(princ (car load-path))')

ifeq (, $(findstring XEmacs,$(version)))
  # GNU Emacs
  LOADPATH_OPTS=$(addprefix -L ,$(LIBDIRS))

  # Really ugly hack to add all subdirs of lispdir to the load-path.
#  LOADPATH_OPTS += \
#	--eval "(let ((orig-dir default-directory)) 		\
#		   (cd \"$(lispdir)\") 				\
#		   (normal-top-level-add-subdirs-to-load-path) 	\
#		   (cd orig-dir))"				\
#	--eval "(message (princ-list load-path))" \
#	--eval "(normal-top-level-add-to-load-path '(\"$(lispdir)\"))" \

  INSTALL_DIR=$(GNUINSTALL_DIR)/$(VERSION_NUMBER)/$(SYSTEM_TYPE)
else
  # X Emacs.  Blegh!
  LOADPATH_OPTS=$(addsuffix \" ,$(addprefix \",$(LIBDIRS)))
#  LOADPATH_OPTS=--eval "(setq load-path (append '($(LOADPATH_OPTS)) load-path))"
  INSTALL_DIR=$(XINSTALL_DIR)/$(VERSION_NUMBER)/$(SYSTEM_TYPE)
endif

PRE_INSTALL_DIR  = $(INSTALL_DIR)/pre
POST_INSTALL_DIR = $(INSTALL_DIR)/post

COMPILER=$(EMACS) --no-site-file
#COMPILER += --eval '(setq debug-on-error t)'
COMPILER_BATCH=-batch -f batch-byte-compile
COMPILER_OPTS=$(COMPILER_BATCH)

.PHONY: all install clean uninstall $(THIRD_PARTY_PKGS)

all: .elcs install

show-compiler:
	@echo '$(COMPILER)'
	@echo '$(COMPILER_OPTS)'

list-libdirs:
	@echo '$(LIBDIRS)'

list-loadpath-opts:
	@echo '$(LOADPATH_OPTS)'

list-prune:
	@echo "$(PRUNE_DIRS)"
	@echo "$(PRUNE_FILES)"

list-els-to-compile-cmd:
	@echo "$(ELs_TO_COMPILE_cmd)"

list-els-to-compile:
	@for el in $(ELs_TO_COMPILE); do echo $$el; done

list-third-party-pkg-dirs:
	@for elc in $(THIRD_PARTY_PKG_DIRS); do echo $$elc; done

list-third-party-elcs:
	@for elc in $(THIRD_PARTY_ELCs); do echo $$elc; done

.elcs: $(ELCs_TO_COMPILE) $(THIRD_PARTY_PKGS) Makefile $(AS_INIT_ELC)
	@touch $@

$(PRE_INSTALL_DIR) $(POST_INSTALL_DIR):
	@[ -d $@ ] || mkdir -p $@

install: .installed 

# N.B. Must install .el files as well as .elc files so that
# find-function-source-path doesn't need to be extended excessively.
.installed: Makefile .elcs $(PRE_INSTALL_DIR) $(POST_INSTALL_DIR) #uninstall
	@echo "Installing .el and .elc files in $(POST_INSTALL_DIR)"
	@for file in $(ELs_TO_COMPILE) $(ELCs_TO_COMPILE) $(THIRD_PARTY_ELCs) 	\
		     $(AS_INIT_ELC); do 					\
	  cp $$file $(POST_INSTALL_DIR); 					\
	done
	@echo "Installing overrides in $(PRE_INSTALL_DIR)"
	@cd $(POST_INSTALL_DIR) && \
	mv $(addsuffix .el,  $(EL_OVERRIDES)) \
	   $(addsuffix .elc, $(EL_OVERRIDES)) \
		$(PRE_INSTALL_DIR)
	@touch $@


# Some shitty Solaris makes have broken $(wildcard foo/*.bar)
clean: uninstall
	@-find $(EMACSLIB) -name \*.elc -print | xargs rm -f
	rm -f .*-made
	for dir in $(THIRD_PARTY_PKG_DIRS); do \
		( cd $$dir && make clean )     \
	done

uninstall:
	-find $(PRE_INSTALL_DIR) $(POST_INSTALL_DIR) -name \*.elc -print | \
		xargs rm -f

#############################################################################

%.elc: %.el
	@echo "### Compiling $< with libs: $(LIBDIRS) ..."
	@$(COMPILER) $(LOADPATH_OPTS) $(COMPILER_PRE_OPTS) $(COMPILER_OPTS) $<

%.elc.verbose: %.el
	@echo "### Compiling $< with libs: $(LIBDIRS) ..."
	$(COMPILER) $(LOADPATH_OPTS) $(COMPILER_PRE_OPTS) $(COMPILER_OPTS) $(<:.verbose)

%.elc.debug:
	rm -f $(@:.debug=)
	$(MAKE) $(@:.debug=) COMPILER_OPTS='-q -l bytecomp'

INIT_COMMON_LIBDIRS = 	\
	init/common 		\
	major-modes 		\
	major-modes/mmm 	\
	major-modes/org-mode 	\
	minor-modes 		\
	utils

init/common/as-%.elc: LIBDIRS += $(INIT_COMMON_LIBDIRS)

init/common/as-bindings.elc: init/common/as-progress.elc .org-installed
$(AS_INIT_ELC): init/common/as-progress.elc init/common/as-bindings.elc
$(AS_INIT_ELC): .muse-installed
$(AS_INIT_ELC): $(LOADDEFS)
$(AS_INIT_ELC): LIBDIRS += $(LOADDEFS_DIR) $(lispdir)
#$(AS_INIT_ELC): COMPILER_PRE_OPTS = --eval '(load-file "$(LOADDEFS)")'

org: .org-installed
.org-installed:
	$(MAKE) -C major-modes/$(ORG_DIR) install-lisp install-info \
		prefix=$(prefix) \
		infodir=$(infodir) \
		lispdir=$(PRE_INSTALL_DIR) \
	&& touch $@

major-modes/mmm/%.elc: major-modes/mmm/%.el
major-modes/mmm/%.elc: LIBDIRS += major-modes/mmm

major-modes/remember/%.elc: major-modes/remember/%.el
major-modes/remember/%.elc: LIBDIRS += major-modes/remember

psgml: .psgml-made
.psgml-made:
	$(MAKE) -C major-modes/psgml && \
	touch $@

.nxml-mode-20041004-made: $(POST_INSTALL_DIR)
	( 					\
	  cd major-modes/nxml-mode-20041004 && 	\
	  $(MAKE) && 				\
	  cp rng-auto.el $(POST_INSTALL_DIR) 	\
	) && 					\
	touch $@

muse: .muse-installed

.muse-made: $(wildcard major-modes/muse/*.el) major-modes/muse/Makefile.defs
	$(MAKE) -C major-modes/muse lisp \
		EMACS=$(EMACS) PREFIX=$(prefix) INFODIR=$(infodir) \
	&& touch $@

.muse-installed: .muse-made
	( 								\
	  cd major-modes/muse;						\
	  make install-bin ELISPDIR=$(lispdir);						\
	  make install-info ||						\
	    echo "muse install-info failure ignored"			\
	) &&								\
	touch $@

.planner-installed: .planner-made
	-$(MAKE) -C major-modes/planner install \
	&& touch $@
# FIXME need separate targets
# 	  make install-lisp;						\
# 	  make install-info ||						\
# 	    echo "planner install-info failure ignored"			\

.planner-made: $(wildcard major-modes/planner/*.el) major-modes/planner/Makefile.defs .muse-installed
	$(MAKE) -C major-modes/planner lisp PREFIX=$(prefix) INFODIR=$(infodir) \
	&& touch $@

#major-modes/remember/remember-experimental.elc: .planner-made

.emacs-w3m-made:
	( 					\
	  cd major-modes/emacs-w3m-1.4.4    && 	\
	  ./configure --prefix=$(prefix)	\
		      --infodir=$(infodir) && 	\
	  make				    && 	\
	  make install			    && 	\
	  cp w3m-load.el $(POST_INSTALL_DIR) 	\
	) && 					\
	touch $@

pgg: pgg-made
.pgg-made: major-modes/pgg/pgg.elc
	@cp major-modes/pgg/pgg.{el,elc} $(POST_INSTALL_DIR) && touch $@

dvc_build_dir=major-modes/$(DVC_DIR)/++build
dvc: .dvc-installed
.dvc-configured: major-modes/$(DVC_DIR)/configure
	@-( 								\
	  if which baz >/dev/null 2>&1; then 				\
	    with_arch=--with-arch=baz; 					\
	    echo "Found baz; using that in preference to tla";		\
	  else								\
	    with_arch= ; 	 					\
	  fi; 								\
	  [ -d $(dvc_build_dir) ] || mkdir $(dvc_build_dir);		\
	  cd $(dvc_build_dir) &&	 				\
	  ../configure 							\
	    --prefix=$(prefix)	 					\
	    --with-other-dirs=$(HOME)/lib/emacs/utils/tree-widget-2.0 	\
	    $$with_arch							\
	) && 								\
	touch $@

major-modes/$(DVC_DIR)/configure: major-modes/$(DVC_DIR)/configure.ac
	-cd major-modes/$(DVC_DIR) && autoconf

.dvc-made: $(wildcard major-modes/$(DVC_DIR)/*.el) $(wildcard major-modes/$(DVC_DIR)/*/*.el) .dvc-configured
	make -C major-modes/$(DVC_DIR)/++build && \
	touch $@

.dvc-installed: .dvc-made
	-( 								\
	  cd major-modes/$(DVC_DIR)/++build && 				\
	  make install &&						\
	  install-info --info-dir=$(infodir) $(infodir)/dvc.info	\
	) &&								\
	touch $@

show-loaddefs:
	@echo '$(LOADDEFS)'

# emacs 21 uses update-autoloads-from-directories
# emacs 22 uses update-directory-autoloads
define loaddefs_lisp
(progn \
    (setq generated-autoload-file "$(LOADDEFS)") \
    (if (boundp '\''update-directory-autoloads) \
        (update-directory-autoloads $(LOADDEFS_DIRS_LISP)) \
        (update-autoloads-from-directories $(LOADDEFS_DIRS_LISP))))
endef

.PHONY: loaddefs
loaddefs: $(LOADDEFS)
$(LOADDEFS): $(addsuffix /*.el,$(LOADDEFS_DIRS))
	@echo "### Generating $@"
	@mkdir -p "$(LOADDEFS_DIR)"
# update-directory-autoloads requires non-empty file to update
	@[ -s "$(LOADDEFS)" ] || echo " " >> "$(LOADDEFS)"
	$(BATCH_EVAL) '$(loaddefs_lisp)'
