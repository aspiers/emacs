This is org, produced by makeinfo version 4.8 from org.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Org Mode: (org).	outline-based notes management and organizer
END-INFO-DIR-ENTRY

   This manual is for Org-mode (version 4.06).

   Copyright (C) 2004, 2005, 2006 Free Software Foundation

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."


File: org,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

Org Mode Manual
***************

This manual is for Org-mode (version 4.06).

   Copyright (C) 2004, 2005, 2006 Free Software Foundation

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

* Menu:

* Introduction::                Getting started
* Document Structure::          A tree works like your brain
* Tables::                      Pure magic for quick formatting
* Hyperlinks::                  Notes in context
* TODO items::                  Every tree branch can be a TODO item
* Timestamps::                  Assign date and time to items
* Agenda Views::                Collecting information into views
* Exporting::                   Sharing and publishing of notes
* Miscellaneous::               All the rest which did not fit elsewhere
* Index::                       The fast road to specific information
* Key Index::                   Key bindings and where they are described

 --- The Detailed Node Listing ---

Introduction

* Summary::                     Brief summary of what Org-mode does
* Installation and Activation::  How to install Org-mode
* Feedback::                    Bug reports, ideas, patches etc.

Document Structure

* Outlines::                    Org-mode is based on outline-mode
* Headlines::                   How to typeset org-tree headlines
* Visibility cycling::          Show and hide, much simplified
* Motion::                      Jumping to other headlines
* Structure editing::           Changing sequence and level of headlines
* Archiving::                   Move done task trees to a different place
* Sparse trees::                Matches embedded in context
* Tags::                        Tagging headlines and matching sets of tags
* Plain Lists::                 Editing hand-formatted lists

Tables

* Built-in table editor::       Simple tables
* Table calculations::          Compute a field from other fields
* orgtbl-mode::                 The table editor as minor mode
* table.el::                    Complex tables

Calculations in tables

* Formula syntax::              How to write a formula
* Column formulas::             Formulas valid for all fields in a column
* Advanced features::           Field names, parameters and automatic recalc
* Named-field formulas::        Formulas valid in single fields
* Editing/debugging formulas::  Changing a stored formula
* Appetizer::                   Taste the power of calc

Hyperlinks

* Internal Links::              Links to other places in the current file
* External Links::              URL-like links to the world
* Managing links::              Creating, inserting and following
* Search Options::              Linking to a specific location
* Remember::                    Org-trees store quick notes

Internal Links

* Radio targets::               Make targets trigger links in plain text.
* CamelCase links::             Activating CamelCase words as links

TODO items

* TODO basics::                 Marking and displaying TODO entries
* Progress Logging::            Document your productivity
* TODO extensions::             Workflow and assignments
* Priorities::                  Some things are more important than others

Extended use of TODO keywords

* Workflow states::             From TODO to DONE in steps
* TODO types::                  I do this, Fred the rest
* Per file keywords::           Different files, different requirements

Timestamps

* Time stamps::                 Assigning a time to a tree entry
* Creating timestamps::         Commands which insert timestamps

Agenda Views

* Agenda files::                Files being searched for agenda information
* Agenda dispatcher::           Keyboard access to agenda views
* Weekly/Daily Agenda::         The calendar page with current tasks
* Global TODO list::            All unfinished action items
* Matching headline tags::      Structured information with fine-tuned search
* Timeline::                    Time-sorted view for single file
* Agenda commands::             Remote editing of org trees

The weekly/daily agenda

* Categories::                  Not all tasks are equal
* Time-of-day specifications::  How the agenda knows the time
* Calendar/Diary integration::  Integrating Anniversaries and more
* Sorting of agenda items::     The order of things

Exporting

* ASCII export::                Export as a structured ASCII file
* HTML export::                 Export as an HTML file
* iCalendar export::            Create calendar entries.

HTML export

* HTML formatting::             Interpretation of the buffer content
* Export options::              How to influence exports
* Comment lines::               Lines which will not be exported

Miscellaneous

* Completion::                  M-TAB knows what you need
* Customization::               Adapting Org-mode to your taste
* FAQ::                         Frequently asked questions
* Interaction::                 Other Emacs packages
* TTY keys::                    Using Org-mode on a tty
* Bugs::                        Things which do not work perfectly
* Acknowledgments::             These people provided feedback and more


File: org,  Node: Introduction,  Next: Document Structure,  Prev: Top,  Up: Top

1 Introduction
**************

* Menu:

* Summary::                     Brief summary of what Org-mode does
* Installation and Activation::  How to install Org-mode
* Feedback::                    Bug reports, ideas, patches etc.


File: org,  Node: Summary,  Next: Installation and Activation,  Prev: Introduction,  Up: Introduction

1.1 Summary
===========

Org-mode is a mode for keeping notes, maintaining ToDo lists, and doing
project planning with a fast and effective plain-text system.

   Org-mode develops organizational tasks around NOTES files that
contain information about projects as plain text.  Org-mode is
implemented on top of outline-mode, which makes it possible to keep the
content of large files well structured.  Visibility cycling and
structure editing help to work with the tree.  Tables are easily
created with a built-in table editor.  Org-mode supports ToDo items,
deadlines, time stamps, and scheduling.  It dynamically compiles
entries into an agenda that utilizes and smoothly integrates much of
the Emacs calendar and diary.  Plain text URL-like links connect to
websites, emails, Usenet messages, BBDB entries, and any files related
to the projects.  For printing and sharing of notes, an Org-mode file
can be exported as a structured ASCII file, as HTML, or (todo and
agenda items only) as an iCalendar file.

   Org-mode keeps simple things simple.  When first fired up, it should
feel like a simple but easy to use outliner.  Complexity is not
imposed, but a large amount of functionality is available when you need
it.  Org-mode can be used on different levels and in different ways,
for example

     * as an outline extension with visibility cycling and structure editing
     * as an ASCII system and table editor for taking structured notes
     * as an ASCII table editor with spreadsheet-like capabilities
     * as a simple hypertext system, with HTML export
     * as a TODO list editor
     * as a full agenda and planner with deadlines and work scheduling

   The Org-mode table editor can be integrated into any major mode by
activating the minor Orgtbl-mode.

   There is a website for Org-mode which provides links to the newest
version of Org-mode, as well as additional information, screen shots
and example files.  This page is located at
`http://www.astro.uva.nl/~dominik/Tools/org/'.


File: org,  Node: Installation and Activation,  Next: Feedback,  Prev: Summary,  Up: Introduction

1.2 Installation and Activation
===============================

If Org-mode is part of the Emacs distribution or an XEmacs package, you
only need to copy the following lines to your `.emacs' file.  The last
two lines define _global_ keys for the commands `org-store-link' and
`org-agenda' - please choose suitable keys yourself.

     ;; The following lines are always needed.  Choose your own keys.
     (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
     (define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ca" 'org-agenda)

   If you have downloaded Org-mode from the Web, you must byte-compile
`org.el' and put it on your load path.  In addition to the Emacs Lisp
lines above, you also need to add the following lines to `.emacs':

     ;; These lines only if org-mode is not part of the X/Emacs distribution.
     (autoload 'org-mode "org" "Org mode" t)
     (autoload 'org-diary "org" "Diary entries from Org mode")
     (autoload 'org-agenda "org" "Multi-file agenda from Org mode" t)
     (autoload 'org-store-link "org" "Store a link to the current location" t)
     (autoload 'orgtbl-mode "org" "Org tables as a minor mode" t)
     (autoload 'turn-on-orgtbl "org" "Org tables as a minor mode")

   With this setup, all files with extension `.org' will be put into
Org-mode.  As an alternative, make the first line of a file look like
this:

     MY PROJECTS    -*- mode: org; -*-

which will select Org-mode for this buffer no matter what the file's
name is.  See also the variable `org-insert-mode-line-in-empty-file''.


File: org,  Node: Feedback,  Prev: Installation and Activation,  Up: Introduction

1.3 Feedback
============

If you find problems with Org-mode, or if you have questions, remarks,
or ideas about it, please contact the maintainer Carsten Dominik at
<dominik@science.uva.nl>.

   For bug reports, please provide as much information as possible,
including the version information of Emacs (`C-h v emacs-version
<RET>') and Org-mode (`M-x org-version'), as well as the Org-mode
related setup in `.emacs'.  If an error occurs, a traceback can be very
useful.  Often a small example file helps, along with clear information
about:
  1. What exactly did you do?

  2. What did you expect to happen?

  3. What happened instead?
        Thanks for helping to improve this mode.


File: org,  Node: Document Structure,  Next: Tables,  Prev: Introduction,  Up: Top

2 Document Structure
********************

Org-mode is based on outline mode and provides flexible commands to
edit the structure of the document.

* Menu:

* Outlines::                    Org-mode is based on outline-mode
* Headlines::                   How to typeset org-tree headlines
* Visibility cycling::          Show and hide, much simplified
* Motion::                      Jumping to other headlines
* Structure editing::           Changing sequence and level of headlines
* Archiving::                   Move done task trees to a different place
* Sparse trees::                Matches embedded in context
* Tags::                        Tagging headlines and matching sets of tags
* Plain Lists::                 Editing hand-formatted lists


File: org,  Node: Outlines,  Next: Headlines,  Prev: Document Structure,  Up: Document Structure

2.1 Outlines
============

Org-mode is implemented on top of outline-mode.  Outlines allow to
organize a document in a hierarchical structure, which (at least for
me) is the best representation of notes and thoughts.  Overview over
this structure is achieved by folding (hiding) large parts of the
document to show only the general document structure and the parts
currently being worked on.  Org-mode greatly simplifies the use of
outlines by compressing the entire show/hide functionality into a
single command `org-cycle', which is bound to the <TAB> key.


File: org,  Node: Headlines,  Next: Visibility cycling,  Prev: Outlines,  Up: Document Structure

2.2 Headlines
=============

Headlines define the structure of an outline tree.  The Headlines in
Org-mode start with one or more stars, on the left margin.  For example

     * Top level headline
     ** Second level
     *** 3rd level
         some text
     *** 3rd level
         more text
     * Another top level headline


File: org,  Node: Visibility cycling,  Next: Motion,  Prev: Headlines,  Up: Document Structure

2.3 Visibility cycling
======================

Outlines make it possible to hide parts of the text in the buffer.
Org-mode uses a single command bound to the <TAB> key to change the
visibility in the buffer.

`<TAB>'
     Rotate current subtree between the states
          ,-> FOLDED -> CHILDREN -> SUBTREE --.
          '-----------------------------------'
     At the beginning of the buffer (or when called with `C-u'), this
     does the same as the command `S-<TAB>' below.

`S-<TAB>'
     Rotate the entire buffer between the states
          ,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
          '--------------------------------------'
     Note that inside tables, `S-<TAB>' jumps to the previous field.

`C-c C-a'
     Show all.

   When Emacs first visits an Org-mode file, the global state is set to
OVERVIEW, i.e. only the top level headlines are visible.  This can be
configured through the variable `org-startup-folded', or on a per-file
basis by adding one of the following lines anywhere in the buffer:

     #+STARTUP: fold
     #+STARTUP: nofold
     #+STARTUP: content


File: org,  Node: Motion,  Next: Structure editing,  Prev: Visibility cycling,  Up: Document Structure

2.4 Motion
==========

The following commands jump to other headlines in the buffer.

`C-c C-n'
     Next heading.  

`C-c C-p'
     Previous heading.  

`C-c C-f'
     Next heading same level.  

`C-c C-b'
     Previous heading same level.  

`C-c C-u'
     Backward to higher level heading.  

`C-c C-j'
     Jump to a different place without changing the current outline
     visibility.  Shows the document structure in a temporary buffer,
     where you can use visibility cycling (<TAB>) to find your
     destination.  After pressing <RET>, the cursor moves to the
     selected location in the original buffer, and the headings
     hierarchy above it is made visible.


File: org,  Node: Structure editing,  Next: Archiving,  Prev: Motion,  Up: Document Structure

2.5 Structure editing
=====================

`M-<RET>'
     Insert new heading with same level as current.  If the cursor is
     in a plain list item, a new item is created.  To force creation of
     a new headline, use a prefix arg, or first press <RET> to get to
     the beginning of the next line.  

`M-S-<RET>'
     Insert new TODO entry with same level as current heading.  

`M-<left>'
     Promote current heading by one level 

`M-<right>'
     Demote current heading by one level 

`M-S-<left>'
     Promote the current subtree by one level 

`M-S-<right>'
     Demote the current subtree by one level 

`M-S-<up>'
     Move subtree up (swap with previous subtree of same level) 

`M-S-<down>'
     Move subtree down (swap with next subtree of same level) 

`C-c C-x C-w'
     Kill subtree, i.e. remove it from buffer but save in kill ring.  

`C-c C-x M-w'
     Copy subtree to kill ring.  

`C-c C-x C-y'
     Yank subtree from kill ring.  This does modify the level of the
     subtree to make sure the tree fits in nicely at the yank position.
     The yank level can also be specified with a prefix arg, or by
     yanking after a headline marker like `****'.

   When there is an active region (transient-mark-mode), promotion and
demotion work on all headlines in the region.  To select a region of
headlines, it is best to place both point and mark at the beginning of a
line, mark at the beginning of the first headline, and point at the line
just after the last headline to change.  Note that when the cursor is
inside a table (*note Tables::), the Meta-Cursor keys have different
functionality.


File: org,  Node: Archiving,  Next: Sparse trees,  Prev: Structure editing,  Up: Document Structure

2.6 Archiving
=============

When a project represented by a (sub)tree is finished, you may want to
move the tree to an archive place, either in the same file under a
special top-level heading, or even to a different file.
`C-c $'
     Archive the subtree starting at the cursor position to the location
     given by `org-archive-location'.

   The default archive is a file in the same directory as the current
file, with the name derived by appending `_archive' to the current file
name.  For information and examples on how to change this, see the
documentation string of the variable `org-archive-location'.  If you
are also using the Org-mode agenda, archiving to a different file is a
good way to keep archived trees from contributing agenda items.


File: org,  Node: Sparse trees,  Next: Tags,  Prev: Archiving,  Up: Document Structure

2.7 Sparse trees
================

An important feature of Org-mode is the ability to construct _sparse
trees_ for selected information in an outline tree.  A sparse tree
means that the entire document is folded as much as possible, but the
selected information is made visible along with the headline structure
above it(1).  Just try it out and you will see immediately how it works.

   Org-mode contains several commands creating such trees.  The most
basic one is `org-occur':

`C-c /'
     Occur.  Prompts for a regexp and shows a sparse tree with all
     matches.  If the match is in a headline, the headline is made
     visible.  If the match is in the body of an entry, headline and
     body are made visible.  In order to provide minimal context, also
     the full hierarchy of headlines above the match is shown, as well
     as the headline following the match.  Each match is also
     highlighted, the highlights disappear when the buffer is changed
     with an editing command.
   For frequently used sparse trees of specific search strings, you can
use the variable `org-agenda-custom-commands' to define fast keyboard
access to specific sparse trees.  These commands will then be
accessible through the agenda dispatcher (*note Agenda dispatcher::).
For example
     (setq org-agenda-custom-commands
           '(("f" occur-tree "FIXME")))
   will define the key `C-c a f' as a shortcut for creating a sparse
tree matching the string `FIXME'.

   Other commands are using sparse trees as well.  For example `C-c
C-v' creates a sparse TODO tree (*note TODO basics::).

   To print a sparse tree, you can use the Emacs command
`ps-print-buffer-with-faces' which does not print invisible parts of
the document (2).  Or you can use the command `C-c C-x v' to copy the
visible part of the document to another file (extension `.txt') which
then can be printed in any desired way.

   ---------- Footnotes ----------

   (1) See also the variables `org-show-hierarchy-above' and
`org-show-following-heading'.

   (2) This does not work under XEmacs, because XEmacs uses selective
display for outlining, not text properties


File: org,  Node: Tags,  Next: Plain Lists,  Prev: Sparse trees,  Up: Document Structure

2.8 Tags
========

If you wish to implement a tag system to cross-correlate information,
this can be done as well in Org-mode.  Every headline can contain a
list of tags, at the end of the headline.  Tags are normal words
containing letters and `_', but no numbers.  Tags must be preceded and
followed by a single colon; like `:WORK:'.  Several tags can be
specified like `:WORK:URGENT:'.

   Tags make use of the hierarchical structure of outline trees.  If a
heading has a certain tag, all subheadings will inherit the tag as
well.  For example, in the list

     * Meeting with the French group      :WORK:
     ** Summary by Frank                  :BOSS:NOTES:
     *** TODO Prepare slides for him      :ACTION:
   the final heading will have the tags `:WORK:', `:BOSS:', `:NOTES:',
and `:ACTION:'.  When executing tag searches and Org-mode finds that a
certain headline matches the search criterion, it will not check any
sublevel headline, assuming that these likely also match, and that the
list of matches can become very long.  You can influence inheritance
and searching using the variables `org-use-tag-inheritance' and
`org-tags-match-list-sublevels'.

   Tags can simply be typed into the buffer.  After a colon, `M-<TAB>'
offers completion on all tags being used in the current buffer.  There
are also special commands for inserting tags, and for executing
searches based on tags.

`C-c C-c'
     Enter new tags for the current headline.  The minibuffer will
     prompt for a list of tags and offer completion with respect to all
     other tags used in the current buffer.  Several tags, separated by
     colons, may be specified at the prompt.  After pressing <RET>, the
     tags will be inserted and aligned to `org-tags-column'.  When
     called with a `C-u' prefix, align all tags in the current buffer
     to that column, just to make things look nice.  TAGS are
     automatically realigned after promotion, demotion, and TODO state
     changes (*note TODO basics::).  

`C-c \'
     Create a sparse tree with all headlines matching a tags search.  

`C-c a m'
     Create a global list of tag matches from all agenda files.  *Note
     Matching headline tags::.  

`C-c a M'
     Create a global list of tag matches from all agenda files, but
     check only TODO items and force checking subitems (see variable
     `org-tags-match-list-sublevels').

   A tags search string can use Boolean operators `&' for AND and `|'
for OR.  `&' binds more strongly than `|'. Parenthesis are currently no
implemented.  A tag may also be preceded by `-', to select against it,
and `+' is syntactic sugar for positive selection.  The AND operator
`&' is optional when `+' or `-' is present.  For example, `+WORK-BOSS'
would select all headlines that are tagged `:WORK:', but discard those
also tagged `:BOSS:'.  The search string `WORK|LAPTOP' selects all
lines tagged `:WORK:' or `:LAPTOP:'. The string `WORK|LAPTOP&NIGHT'
requires that the `:LAPTOP:' lines are also tagged `NIGHT'.


File: org,  Node: Plain Lists,  Prev: Tags,  Up: Document Structure

2.9 Plain Lists
===============

Headlines define the structure of the Org-mode file, and also lists
(for example TODO items (*note TODO items::) should be created using
headline levels.  However, when taking notes, the plain text is
sometimes easier to read with hand-formatted lists.  Org-mode supports
editing such lists, and the HTML exporter (*note Exporting::) does
parse and format them.

   Org-mode knows ordered and unordered lists.  Unordered list items
start with `-', `+', or `*'(1) as bullets.  Ordered list items start
with `1.' or `1)'.  Items belonging to the same list must have the same
indentation on the first line.  In particular, if an ordered list
reaches number `10.', also the 2-digit numbers must be written
left-aligned with the other numbers in the list.  Indentation also
determines the end of a list item.  It ends before the next line that
is indented like the bullet/number, or less.  For example:

     ** Lord of the Rings
     My favorite scenes are (in this order)
     1. Eowyns fight with the witch king
        + this was already my favorite scene in the book
        + I really like Miranda Otto.
     2. The attack of the Rohirrim
     3. Peter Jackson being shot by Legolas
         - on DVD only
        He makes a really funny face when it happens.

   Org-mode supports these lists by tuning filling and wrapping commands
to correctly deal with them.  Furthermore, the following commands act
on items when the cursor is in the first line of an item (the line with
the bullet or number).

`<TAB>'
     Items can be folded just like headline levels if you set the
     variable `org-cycle-include-plain-lists'.  The level of an item is
     then given by the indentation of the bullet/number.  However,
     items are always subordinate to real headlines, the hierarchies
     remain completely separated.  

`M-<RET>'
     Insert new item at current level.  With prefix arg, for a new
     heading.  

`M-S-<up>'
`M-S-<down>'
     Move the item including subitems up/down (swap with previous/next
     item of same indentation).  If the list is ordered, renumbering is
     automatic.  

`M-S-<left>'
`M-S-<right>'
     Decrease/increase the indentation of the item, including subitems.
     Initially, the item tree is selected based on current indentation.
     When these commands are executed several times in direct
     succession, the initially selected region is used, even if the new
     indentation would imply a different hierarchy.  To use the new
     hierarchy, break the command chain with a cursor motion or so.  

`C-c C-c'
     Renumber the ordered list at the cursor.

   ---------- Footnotes ----------

   (1) When using `*' as a bullet, lines must be indented or they will
be seen as top-level headlines.


File: org,  Node: Tables,  Next: Hyperlinks,  Prev: Document Structure,  Up: Top

3 Tables
********

Org-mode has a very fast and intuitive table editor built-in.
Spreadsheet-like calculations are supported in connection with the
Emacs `calc' package.

* Menu:

* Built-in table editor::       Simple tables
* Table calculations::          Compute a field from other fields
* orgtbl-mode::                 The table editor as minor mode
* table.el::                    Complex tables


File: org,  Node: Built-in table editor,  Next: Table calculations,  Prev: Tables,  Up: Tables

3.1 The built-in table editor
=============================

Org-mode makes it easy to format tables in plain ASCII.  Any line with
`|' as the first non-white character is considered part of a table.
`|' is also the column separator.  A table might look like this:

     | Name  | Phone | Age |
     |-------+-------+-----|
     | Peter |  1234 |  17 |
     | Anna  |  4321 |  25 |

   A table is re-aligned automatically each time you press <TAB> or
<RET> or `C-c C-c' inside the table.  <TAB> also moves to the next
field (<RET> to the next row) and creates new table rows at the end of
the table or before horizontal lines.  The indentation of the table is
set by the first line.  Any line starting with `|-' is considered as a
horizontal separator line and will be expanded on the next re-align to
span the whole table width.  So, to create the above table, you would
only type

     |Name|Phone|Age
     |-
   and then press <TAB> to align the table and start filling in fields.

   When typing text into a field, Org-mode treats <DEL>, <Backspace>,
and all character keys in a special way, so that inserting and deleting
avoids shifting other fields.  Also, when typing _immediately after the
cursor was moved into a new field with `<TAB>', `S-<TAB>' or `<RET>'_,
the field is automatically made blank.  If this behavior is too
unpredictable for you, configure the variables
`org-enable-table-editor' and `org-table-auto-blank-field'.

Creation and conversion
.......................

`M-x org-table-create'
     Creates an empty Org-mode table.  However, it is much easier to
     just start typing, like `|Name|Phone|Age <RET> |- <TAB>'

`C-c C-c'
     Convert region to table.  Works when the cursor is not in an
     existing table, and when there is a region defined.  If every line
     contains at least one TAB character, the function assumes that the
     material is tab separated.  If not, lines are split at whitespace
     into fields.  You can use a prefix argument to indicate how many
     consecutive spaces are at least required to indicate a field
     separator (default: just one).

Re-aligning and field motion
............................

`C-c C-c'
     Re-align the table without moving the cursor.

`<TAB>'
     Re-align the table, move to the next field.  Creates a new row if
     necessary.

`S-<TAB>'
     Re-align, move to previous field.

`<RET>'
     Re-align the table and move down to next row.  Creates a new row if
     necessary.  At the beginning or end of a line, <RET> still does
     NEWLINE, so it can be used to split a table.

Column and row editing
......................

`M-<left>'
`M-<right>'
     Move the current column left/right

`M-S-<left>'
     Kill the current column.

`M-S-<right>'
     Insert a new column to the left of the cursor position.

`M-<up>'
`M-<down>'
     Move the current row up/down

`M-S-<up>'
     Kill the current row or horizontal line.

`M-S-<down>'
     Insert a new row above (with arg: below) the current row.

`C-c -'
     Insert a horizontal line below current row. With prefix arg, the
     line is created above the current line.

`C-c ^'
     Sort the table lines in the region.  Point and mark must be in the
     first and last line to be included, and must be in the column that
     should be used for sorting.  The command prompts for numerical
     versus alphanumerical sorting.

Regions
.......

`C-c C-x M-w'
     Copy a rectangular region from a table to a special clipboard.
     Point and mark determine edge fields of the rectangle.  The
     process ignores horizontal separator lines.  

`C-c C-x C-w'
     Copy a rectangular region from a table to a special clipboard, and
     blank all fields in the rectangle.  So this is the "cut" operation.  

`C-c C-x C-y'
     Paste a rectangular region into a table.  The upper right corner
     ends up in the current field.  All involved fields will be
     overwritten.  If the rectangle does not fit into the present table,
     the table is enlarged as needed.  The process ignores horizontal
     separator lines.  

`C-c C-q'
     Wrap several fields in a column like a paragraph.  If there is an
     active region, and both point and mark are in the same column, the
     text in the column is wrapped to minimum width for the given
     number of lines.  A prefix ARG may be used to change the number of
     desired lines.  If there is no region, the current field is split
     at the cursor position and the text fragment to the right of the
     cursor is prepended to the field one line down. If there is no
     region, but you specify a prefix ARG, the current field gets
     blank, and the content is appended to the field above.

Calculations
............

`C-c ='
     Install a new formula for the current column and replace current
     field with the result of the formula.

`C-u C-c ='
     Install a new formula for the current field, which must be a named
     field.  Evaluate the formula and replace the field content with the
     result.

`C-c ''
     Edit all formulas associated with the current table in a separate
     buffer.

`C-c *'
     Recalculate the current row by applying the stored formulas from
     left to right.  When called with a `C-u' prefix, recalculate the
     entire table, starting with the first non-header line (i.e. below
     the first horizontal separator line).  For details, see *Note
     Table calculations::.

`C-#'
     Rotate the calculation mark in first column through the states `',
     `#', `*', `!', `$'.  For the meaning of these marks see *Note
     Advanced features::.  When there is an active region, change all
     marks in the region.

`C-c ?'
     Which table column is the cursor in?  Displays number >0 in echo
     area.

`C-c +'
     Sum the numbers in the current column, or in the rectangle defined
     by the active region.  The result is shown in the echo area and can
     be inserted with `C-y'.

`S-<RET>'
     When current field is empty, copy from first non-empty field above.
     When not empty, copy current field down to next row and move cursor
     along with it.  Depending on the variable
     `org-table-copy-increment', integer field values will be
     incremented during copy.  This key is also used by CUA-mode (*note
     Interaction::).

Miscellaneous
.............

`C-c |'
     Toggle the visibility of vertical lines in tables.  The lines are
     still there, only made invisible with a text property.  Any `|'
     added by hand will become invisible on the next align.

`M-x org-table-import'
     Import a file as a table.  The table should be TAB- or whitespace
     separated.  Useful for example to import an Excel table or data
     from a database, because these programs generally can write
     TAB-separated text files.  This command works by inserting the
     file into the buffer and then converting the region to a table.
     Any prefix argument is passed on to the converter, which uses it
     to determine the separator.

`M-x org-table-export'
     Export the table as a TAB-separated file.  Useful for data
     exchange with for example Excel or database programs.


   If you don't like the automatic table editor because it gets into
your way in lines which you would like to start with `|', you can turn
it off with
     (setq org-enable-table-editor nil)
   The only table command which then still works is `C-c C-c' to do a
manual re-align.


File: org,  Node: Table calculations,  Next: orgtbl-mode,  Prev: Built-in table editor,  Up: Tables

3.2 Calculations in tables
==========================

The table editor makes use of the Emacs `calc' package to implement
spreadsheet-like capabilities.  Org-mode has two levels of complexity
for table calculations.  On the basic level, tables do only horizontal
computations, so a field can be computed from other fields _in the same
row_, and Org-mode assumes that there is only one formula for each
column.  This is very efficient to work with and enough for many tasks.
On the complex level, columns and individual fields can be named for
easier referencing in formulas, individual named fields can have their
own formula associated with them, and recalculation can be automated.

* Menu:

* Formula syntax::              How to write a formula
* Column formulas::             Formulas valid for all fields in a column
* Advanced features::           Field names, parameters and automatic recalc
* Named-field formulas::        Formulas valid in single fields
* Editing/debugging formulas::  Changing a stored formula
* Appetizer::                   Taste the power of calc


File: org,  Node: Formula syntax,  Next: Column formulas,  Prev: Table calculations,  Up: Table calculations

3.2.1 Formula syntax
--------------------

A formula can be any algebraic expression understood by the Emacs
`calc' package.  Before evaluation by `calc-eval' (*note calc-eval:
(calc)Calling Calc from Your Lisp Programs.), variable substitution
takes place:

       $        refers to the current field
       $3       refers to the field in column 3 of the current row
       $3..$7   a vector of the fields in columns 3-7 of current row
       $P1..$P3 vector of column range, using column names
       &2       second data field above the current, in same column
       &5-2     vector from fifth to second field above current
       &III-II  vector of fields between 2nd and 3rd hline above
       &III     vector of fields between third hline above and current field
       $name    a named field, parameter or constant

   The range vectors can be directly fed into the calc vector functions
like `vmean' and `vsum'.

   `$name' is interpreted as the name of a column, parameter or
constant.  Constants are defined globally through the variable
`org-table-formula-constants'.  If you have the `constants.el' package,
it will also be used to resolve constants, including natural constants
like `$h' for Planck's constant, units like `$km' for kilometers.
Column names and parameters can be specified in special table lines.
These are described below, see *Note Advanced features::.

   A formula can contain an optional mode string after a semicolon.
This string consists of flags to influence calc's modes(1) during
execution, e.g.  `p20' to switch the internal precision to 20 digits,
`n3', `s3', `e2' or `f4' to switch to normal, scientific, engineering,
or fix display format, respectively, and `D', `R', `F', and `S' to turn
on degrees, radians, fraction and symbolic modes, respectively.  In
addition, you may provide a `printf' format specifier to reformat the
final result.  A few examples:
       $1+$2                Sum of first and second field
       $1+$2;%.2f           Same, format result to two decimals
       exp($2)+exp($1)      Math functions can be used
       $;%.1f               Reformat current cell to 1 decimal
       ($3-32)*5/9          Degrees F -> C conversion
       $c/$1/$cm            Hz -> cm conversion, using `constants.el'
       tan($1);Dp3s1        Compute in degrees, precision 3, display SCI 1
       sin($1);Dp3%.1e      Same, but use printf specifier for display
       vmean($2..$7)        Compute column range mean, using vector function
       vsum(&III)           Sum numbers from 3rd hline above to here
       taylor($3,x=7,2)     taylor series of $3, at x=7, second degree

   ---------- Footnotes ----------

   (1) By default, Org-mode uses the standard calc modes (precision 12,
angular units degrees, fraction and symbolic modes off).  However, the
display format has been changed to `(float 5)' to keep tables compact.
The default settings can be configured using the variable
`org-calc-default-modes'.


File: org,  Node: Column formulas,  Next: Advanced features,  Prev: Formula syntax,  Up: Table calculations

3.2.2 Column formulas
---------------------

To apply a formula to a field, type it directly into the field,
preceded by an equal sign, like `=$1+$2'.  When you press <TAB> or
<RET> or `C-c C-c' with the cursor still in the field, the formula will
be stored as the formula for the current column, evaluated and the
current field replaced with the result.  If the field contains only
`=', the previously stored formula for this column is used.

   For each column, Org-mode will remember the most recently used
formula.  The information is stored in a special line starting with
`#+TBLFM' directly below the table.  When adding/deleting/moving
columns with the appropriate commands, the stored equations will be
modified accordingly.  When a column used in a calculation is removed,
references to this column become invalid and will cause an error upon
applying the equation.

   Instead of typing an equation into the field, you may also use the
command `C-c ='.  It prompts for a formula (with default taken from the
`#+TBLFM:' line) and applies it to the current field.  A numerical
prefix (e.g. `C-5 C-c =') will apply it to that many subsequent fields
in the current column.

   To recompute all the fields in a line, use the command `C-c *'.  It
re-applies all stored equations to the current row, from left to right.
With a `C-u' prefix, this will be done to every line in the table, so
use this command it you want to make sure the entire table is
up-to-date. `C-u C-c C-c' is another way to update the entire table.
Global updating does not touch the line(s) above the first horizontal
separator line, assuming that this is the table header.


File: org,  Node: Advanced features,  Next: Named-field formulas,  Prev: Column formulas,  Up: Table calculations

3.2.3 Advanced features
-----------------------

If you want want the recalculation of fields to happen automatically,
or if you want to be able to assign a formula to an individual field
(instead of an entire column) you need to reserve the first column of
the table for special marking characters.  Here is an example of a
table that collects exam results of students and makes use of these
features:
     |---+---------+--------+--------+--------+-------+------|
     |   | Student | Prob 1 | Prob 2 | Prob 3 | Total | Note |
     |---+---------+--------+--------+--------+-------+------|
     | ! |         |     P1 |     P2 |     P3 |   Tot |      |
     | # | Maximum |     10 |     15 |     25 |    50 | 10.0 |
     | ^ |         |     m1 |     m2 |     m3 |    mt |      |
     |---+---------+--------+--------+--------+-------+------|
     | # | Peter   |     10 |      8 |     23 |    41 |  8.2 |
     | # | Sara    |      6 |     14 |     19 |    39 |  7.8 |
     | # | Sam     |      2 |      4 |      3 |     9 |  1.8 |
     |---+---------+--------+--------+--------+-------+------|
     |   | Average |        |        |        |  29.7 |      |
     | ^ |         |        |        |        |    at |      |
     | $ | max=50  |        |        |        |       |      |
     |---+---------+--------+--------+--------+-------+------|
     #+TBLFM: $6=vsum($P1..$P3)::$7=10*$Tot/$max;%.1f::$at=vmean(&II);%.1f

Important: Please note that for these special tables, recalculating the
table with `C-u C-c *' does only affect rows which are marked `#' or
`*', and named fields.  The column formulas are not applied in rows
with empty first field.

   The marking characters have the following meaning:
`!'
     The fields in this line define names for the columns, so that you
     may refer to a column as `$Tot' instead of `$6'.

`^'
     This row defines names for the fields _above_ the row.  With such
     a definition, any formula in the table may use `$m1' to refer to
     the value `10'.  Also, named fields can have their own formula
     associated with them.

`_'
     Similar to `^', but defines names for the fields in the row
     _below_.

`$'
     Fields in this row can define _parameters_ for formulas.  For
     example, if a field in a `$' row contains `max=50', then formulas
     in this table can refer to the value 50 using `$max'.  Parameters
     work exactly like constants, only that they can be defined on a
     per-table basis.  Changing a parameter and then recalculating the
     table can be useful.

`#'
     Fields in this row are automatically recalculated when pressing
     <TAB> or <RET> or `S-<TAB>' in this row.  Also, this row is
     selected for a global recalculation with `C-u C-c *'.  Unmarked
     lines will be left alone by this command.

`*'
     Selects this line for global recalculation with `C-u C-c *', but
     not for automatic recalculation.  Use this when automatic
     recalculation slows down editing too much.

`'
     Unmarked lines are exempted from recalculation with `C-u C-c *'.
     All lines that should be recalculated should be marked with `#' or
     `*'.


File: org,  Node: Named-field formulas,  Next: Editing/debugging formulas,  Prev: Advanced features,  Up: Table calculations

3.2.4 Named-field formulas
--------------------------

A named field can have its own formula associated with it.  In the
example above, this is used for the `at' field that contains the
average result of the students.  To enter a formula for a named field,
just type it onto the buffer, preceded by `:='.  Or use `C-u C-c ='.
This equation will be stored below the table like `$name=...'.  Any
recalculation in the table (even if only requested for the current
line) will also update all named field formulas.


File: org,  Node: Editing/debugging formulas,  Next: Appetizer,  Prev: Named-field formulas,  Up: Table calculations

3.2.5 Editing and debugging formulas
------------------------------------

To edit a column or field formula, you can use the commands `C-c =' and
`C-u C-c =', respectively.  The currently active expression is then
presented as default in the minibuffer, were it may be edited.

   Note that making a table field blank does not remove the formula
associated with the field - during the next recalculation the field
will be filled again.  To remove a formula from a field, you have to
give an empty reply when prompted for the formula, or to edit the
`#+TBLFM' line.

   You may edit the `#+TBLFM' directly and re-apply the changed
equations with `C-c C-c' in that line, or with the normal recalculation
commands in the table.

   In particular for large tables with many formulas, it is convenient
to use the command `C-c '' to edit the formulas of the current table in
a separate buffer.  That buffer will show the formulas one per line,
and you are free to edit, add and remove formulas.  Press `C-c ?' on a
`$...'  expression to get information about its interpretation.
Exiting the buffer with `C-c C-c' only stores the modified formulas
below the table.  Exiting with `C-u C-c C-c' also applies them to the
entire table.  `C-c C-q' exits without installing the changes.

   When the evaluation of a formula leads to an error, the field content
becomes the string `#ERROR'.  If you would like see what is going on
during variable substitution and calculation in order to find a bug,
turn on formula debugging in the menu and repeat the calculation by
pressing, for example by pressing `C-c = <RET>' in a field.  Detailed
information will be displayed.


File: org,  Node: Appetizer,  Prev: Editing/debugging formulas,  Up: Table calculations

3.2.6 Appetizer
---------------

Finally, just to wet your appetite on what can be done with the
fantastic `calc' package, here is a table that computes the Taylor
series for a couple of functions (homework: try that with Excel :-)

     |---+-------------+---+-----+--------------------------------------|
     |   | Func        | n | x   | Result                               |
     |---+-------------+---+-----+--------------------------------------|
     | # | exp(x)      | 1 | x   | 1 + x                                |
     | # | exp(x)      | 2 | x   | 1 + x + x^2 / 2                      |
     | # | exp(x)      | 3 | x   | 1 + x + x^2 / 2 + x^3 / 6            |
     | # | x^2+sqrt(x) | 2 | x=0 | x*(0.5 / 0) + x^2 (2 - 0.25 / 0) / 2 |
     | # | x^2+sqrt(x) | 2 | x=1 | 2 + 2.5 x - 2.5 + 0.875 (x - 1)^2    |
     | * | tan(x)      | 3 | x   | 0.0175 x + 1.77e-6 x^3               |
     |---+-------------+---+-----+--------------------------------------|
     #+TBLFM: $5=taylor($2,$4,$3);n3


File: org,  Node: orgtbl-mode,  Next: table.el,  Prev: Table calculations,  Up: Tables

3.3 The Orgtbl minor mode
=========================

If you like the intuitive way the Org-mode table editor works, you
might want to use it also in other modes like text-mode or mail-mode.
The minor mode Orgtbl-mode makes this possible.  You can always toggle
the mode with `M-x orgtbl-mode'.  To turn it on by default, for example
in mail mode, use
     (add-hook 'mail-mode-hook 'turn-on-orgtbl)


File: org,  Node: table.el,  Prev: orgtbl-mode,  Up: Tables

3.4 The `table.el' package
==========================

Complex ASCII tables with automatic line wrapping, column- and
row-spanning, and alignment can be created using the Emacs table
package by Takaaki Ota (`http://sourceforge.net/projects/table', and
also part of Emacs 22).  When <TAB> or `C-c C-c' is pressed in such a
table, Org-mode will call `table-recognize-table' and move the cursor
into the table.  Inside a table, the keymap of Org-mode is inactive.
In order to execute Org-mode-related commands, leave the table.

`C-c C-c'
     Recognize `table.el' table.  Works when the cursor is in a
     table.el table.

`C-c ~'
     Insert a table.el table.  If there is already a table at point,
     this command converts it between the table.el format and the
     Org-mode format.  See the documentation string of the command
     `org-convert-table' for the restrictions under which this is
     possible.


File: org,  Node: Hyperlinks,  Next: TODO items,  Prev: Tables,  Up: Top

4 Hyperlinks
************

Just like HMTL, Org-mode provides links inside a file, and external
links to other files, Usenet articles, emails and much more.

* Menu:

* Internal Links::              Links to other places in the current file
* External Links::              URL-like links to the world
* Managing links::              Creating, inserting and following
* Search Options::              Linking to a specific location
* Remember::                    Org-trees store quick notes


File: org,  Node: Internal Links,  Next: External Links,  Prev: Hyperlinks,  Up: Hyperlinks

4.1 Internal Links
==================

Strings inside double brackets like `[[My Target]]' are links that lead
to a text search in the current file.  The link can be followed with
`C-c C-o' or with a mouse click (*note Managing links::).  The
preferred match for such a link is a dedicated target: The same string
in double angular brackets.  Targets may be located anywhere, often it
is convenient to put them into a comment line, for example
     # <<My Target>>

   If no dedicated target exists, Org-mode will search for the words in
the link, in the above example for `my target'.  Links starting with a
star like `*My Target' restrict the search to headlines.  When
searching, Org-mode will first try an exact match, but then move on to
more and more lenient searches.  For example, the link `[[*My
Targets]]' will find any of the following
     ** My targets
     ** TODO my targets are bright
     ** my 20 targets are
   It is therefore often not necessary to set a dedicated target.  To
insert a link targeting a headline, in-buffer completion can be used.
Just type a star followed by a few optional letters into the buffer and
press `M-<TAB>'.  All headlines in the current buffer will be offered
as completions.  *Note Managing links::, for more commands creating
links.

   Following a link pushes a mark onto Org-mode's own mark ring.  You
can return to the previous position with `C-c &'.  Using this command
several times in direct succession goes back to positions recorded
earlier.

* Menu:

* Radio targets::               Make targets trigger links in plain text.
* CamelCase links::             Activating CamelCase words as links


File: org,  Node: Radio targets,  Next: CamelCase links,  Prev: Internal Links,  Up: Internal Links

4.1.1 Radio targets
-------------------

You can configure Org-mode to link any occurrences of certain target
names in normal text.  So without explicitly creating a link, the text
connects to the target radioing its position.  Radio targets are
enclosed by triple angular brackets.  For example, a target `<<<My
Target>>>' causes each occurrence of `my target' in normal text to
become activated as a link.  The Org-mode file is scanned automatically
for radio targets only when the file is first loaded into Emacs.  To
update the target list during editing, press `C-c C-c' with the cursor
on or at a target.


File: org,  Node: CamelCase links,  Prev: Radio targets,  Up: Internal Links

4.1.2 CamelCase words as links
------------------------------

As an alternative to `[[...]]' links, Org-mode also supports CamelCase
words as links.  This feature is not turned on by default because of
the occasional inconsistencies this system suffers from.  To activate
CamelCase words as links, and to make headline completion offer
CamelCase version of headlines, the following customization is needed:
     (setq org-activate-camels t
           org-file-link-context-use-camel-case t)


File: org,  Node: External Links,  Next: Managing links,  Prev: Internal Links,  Up: Hyperlinks

4.2 External Links
==================

Org-mode supports links to files, websites, Usenet and email messages;
and BBDB database entries.  Links are just plain-text URL-like
locators, optionally enclosed by angular brackets.  The following list
shows examples for each link type.

     <http://www.astro.uva.nl/~dominik>         on the web
     <file:/home/dominik/images/jupiter.jpg>    file, absolute path
     <file:papers/last.pdf>                     file, relative path
     <news:comp.emacs>                          Usenet link
     <mailto:adent@galaxy.net>                  Mail link
     <vm:folder>                                VM folder link
     <vm:folder#id>                             VM message link
     <vm://myself@some.where.org/folder#id>     VM on remote machine
     <wl:folder>                                WANDERLUST folder link
     <wl:folder#id>                             WANDERLUST message link
     <mhe:folder>                               MH-E folder link
     <mhe:folder#id>                            MH-E message link
     <rmail:folder>                             RMAIL folder link
     <rmail:folder#id>                          RMAIL message link
     <gnus:group>                               GNUS group link
     <gnus:group#id>                            GNUS article link
     <bbdb:Richard Stallman>                    BBDB link
     <shell:ls *.org>(1)                          A shell command

   A link may contain space characters and is terminated by `>' or by
the end of a line.  In tables, the end of a table field also terminates
a link.  Angle brackets around a link are not required, but are
recommended to avoid problems with punctuation and other text following
the link.  See also the variable `org-allow-space-in-links'.

   ---------- Footnotes ----------

   (1) Note that `<' and `>' cannot be part of a link, and therefore of
a shell command.  If you need redirection, use @{ and @} instead.


File: org,  Node: Managing links,  Next: Search Options,  Prev: External Links,  Up: Hyperlinks

4.3 Managing links
==================

Org-mode provides methods to create a link in the correct syntax, to
insert it into an org-mode file, and to follow the link.

`C-c l'
     Store a link to the current location.  This is a _global_ command
     which can be used in any buffer to create a link.  The link will be
     stored for later insertion into an Org-mode buffer (see below).
     For VM, RMAIL, WANDERLUST, GNUS and BBDB buffers, the link will
     point to the current article/entry.  For W3 and W3M buffer, the
     link goes to the current URL.  For Org-mode files, the current
     headline is targeted.  For any other files, the link will point to
     the file, with a search string (*note Search Options::) pointing
     to the contents of the current line.  If there is an active
     region, the selected words will form the basis of the search
     string.  The key binding `C-c l' is only a suggestion - see *Note
     Installation and Activation::.

`C-c C-l'
     Insert a link.  This prompts for a link to be inserted into the
     buffer.  You can just type a link, using one of the link type
     prefixes mentioned in the examples above.  Through completion, all
     links stored during the current session can be accessed.  When
     called with prefix arg, you can use file name completion to enter
     a file link.  The link will be formatted as given in the variable
     `org-link-format' and inserted into the buffer.  Note that you
     don't have to use this command to insert a link.  Links in
     Org-mode are plain text, and you can type or paste them straight
     into the buffer.

`C-c C-o'
`mouse-2'
     Open link at point.  This will launch a web browser for URLs (using
     `browse-url-at-point'), run vm/gnus/bbdb for the corresponding
     links, and execute the command in a shell link.  When the cursor
     is on a CamelCase link, this commands runs the corresponding
     search.  When the cursor is on a TAGS list in a headline, it
     creates the corresponding TAGS view.  Furthermore, it will visit
     text files in `file:' links with Emacs and select a suitable
     application for non-text files.  Classification of files is based
     on file extension only.  See option `org-file-apps'.  If there is
     no link at point, the current subtree will be searched for one.
     If you want to override the default application and visit the file
     with Emacs, use a `C-u' prefix.  If the cursor is on a time stamp,
     compiles the agenda for that date.

     *IMPORTANT*: Be careful not to use any dangerous commands in a
     shell link.

`mouse-2'
     On links, `mouse-2' will open the link just like `C-c C-o' would.

`mouse-3'
     Like `mouse-2', but force file links to be opened with Emacs.

`C-c %'
     Push the current position onto the mark ring, to be able to return
     easily. Commands following an internal link do this automatically.

`C-c &'
     Jump back to a recorded position.  A position is recorded by the
     commands following internal links, and by `C-c %'.  Using this
     command several times in direct succession moves through a ring of
     previously recorded positions.


File: org,  Node: Search Options,  Next: Remember,  Prev: Managing links,  Up: Hyperlinks

4.4 Search options in file links
================================

File links can contain additional information to make Emacs jump to a
particular location in the file when following a link.  This can be a
line number or a search option after a double(1) colon.  For example:
     <file:~/code/main.c::255>
     <file:~/xx.org::My Target>
     <file:~/xx.org::*My Target>
     <file:~/xx.org::/regexp/>
   Here is what these options do.

`255'
     Jump to line 255.

`My Target'
     Search for a link target `<<My Target>>', or do a text search for
     `my target', similar to the search in internal links, see *Note
     Internal Links::.

`*My Target'
     In an Org-mode file, restrict search to headlines.

`/regexp/'
     Do a regular expression search for `regexp'.  This uses the Emacs
     command `occur' to list all matches in a separate window.  If the
     target file is in Org-mode, `org-occur' is used to create a sparse
     tree with the matches.

   As a degenerate case, a file link with an empty file name can be used
to search the current file.  For example, `<file:::find me>' does a
search for `find me' in the current file, just like `[[find me]]' would.

   ---------- Footnotes ----------

   (1) For backward compatibility, line numbers can also follow a
single colon.


File: org,  Node: Remember,  Prev: Search Options,  Up: Hyperlinks

4.5 Remember
============

Another way to create org entries with links to other files is through
the _Remember_ package by John Wiegley.  _Remember_ lets you store
quick notes with little interruption of your work flow.  See
`http://www.emacswiki.org/cgi-bin/wiki/RememberMode' for more
information.  The notes produced by _Remember_ can be stored in
different ways, and Org-mode files are a good target.  Org-mode allows
to file away notes either to a default file, or directly to the correct
location in your Org-mode outline tree.  The following customization(1)
will tell _Remember_ to use org files as target, and to create
annotations compatible with Org-mode links.

     (autoload 'org-remember-annotation "org")
     (autoload 'org-remember-handler "org")
     (setq org-directory "~/path/to/my/orgfiles/")
     (setq org-default-notes-file "~/.notes")
     (setq remember-annotation-functions '(org-remember-annotation))
     (setq remember-handler-functions '(org-remember-handler))

   When you compose a note with remember, you have to press `C-c C-c'
to exit remember-mode and to file away the note.  The handler first
prompts for a target file - if you press <RET>, the value of
`org-default-notes-file' is used.  Then the command offers the headings
tree of the selected file.  You can either immediately press <RET> to
get the note appended to the file.  Or you can use vertical cursor
motion (<up> and <down>) and visibility cycling (<TAB>) to find a
better place.  Pressing <RET> or <left> or <right> leads to the
following result.

Cursor         Key     Note gets inserted
position               
buffer-start   <RET>   as level 2 heading at end of file
on headline    <RET>   as sublevel of the heading at cursor
               <left>  as same level, before current heading
               <right> as same level, after current heading
not on         <RET>   at cursor position, level taken from context.
headline                      Or use prefix arg to specify level
                       manually.

   So a fast way to store the note is to press `C-c C-c <RET> <RET>' to
append it to the default file.  Even shorter would be `C-u C-c C-c',
which does the same without even showing the tree.  But with little
extra effort, you can push it directly to the correct location.

   Before inserting the text into a tree, the function ensures that the
text has a headline, i.e. a first line that starts with a `*'.  If not,
a headline is constructed from the current date and some additional
data.  If the variable `org-adapt-indentation' is non-nil, the entire
text is also indented so that it starts in the same column as the
headline (after the asterisks).

   ---------- Footnotes ----------

   (1) The two autoload forms are only necessary if `org.el' is not
part of the Emacs distribution or an XEmacs package.


File: org,  Node: TODO items,  Next: Timestamps,  Prev: Hyperlinks,  Up: Top

5 TODO items
************

Org-mode does not maintain TODO lists as a separate document.  TODO
items are an integral part of the notes file, because TODO items
usually come up while taking notes!  With Org-mode, you simply mark any
entry in a tree as being a TODO item.  In this way, the information is
not duplicated, and the entire context from which the item emerged is
always present when you check.

   Of course, this technique causes TODO items to be scattered
throughout your file.  Org-mode provides methods to give you an
overview over all things you have to do.

* Menu:

* TODO basics::                 Marking and displaying TODO entries
* Progress Logging::            Document your productivity
* TODO extensions::             Workflow and assignments
* Priorities::                  Some things are more important than others


File: org,  Node: TODO basics,  Next: Progress Logging,  Prev: TODO items,  Up: TODO items

5.1 Basic TODO functionality
============================

Any headline can become a TODO item by starting it with the word TODO,
for example

     *** TODO Write letter to Sam Fortune

The most important commands to work with TODO entries are:

`C-c C-t'
     Rotate the TODO state of the current item between
          ,-> (unmarked) -> TODO -> DONE --.
          '--------------------------------'
     The same rotation can also be done "remotely" from the timeline and
     agenda buffers with the `t' command key (*note Agenda commands::).  

`C-c C-v'
     View TODO items in a _sparse tree_ (*note Sparse trees::).  Folds
     the entire buffer, but shows all TODO items and the headings
     hierarchy above them.  With prefix arg, show also the DONE
     entries.  With numerical prefix N, show the tree for the Nth
     keyword in the variable `org-todo-keywords'.  

`C-c a t'
     Show the global TODO list.  This collects the TODO items from all
     agenda files (*note Agenda Views::) into a single buffer.  The
     buffer is in `agenda-mode', so there are commands to examine and
     manipulate the TODO entries directly from that buffer (*note
     Agenda commands::).  *Note Global TODO list::, for more
     information.

``org-agenda-include-all-todo''
     If you would like to have all your TODO items listed as part of
     your agenda, customize the variable `org-agenda-include-all-todo'.


File: org,  Node: Progress Logging,  Next: TODO extensions,  Prev: TODO basics,  Up: TODO items

5.2 Progress Logging
====================

If you want to keep track of _when_ a certain TODO item was finished,
turn on logging with
     (setq org-log-done t)
   Then each time you turn a TODO entry into DONE using either `C-c
C-t' in the Org-mode buffer or `t' in the agenda buffer, a line
`CLOSED: [timestamp]' will be inserted just after the headline.  If you
turn the entry back into a TODO item again through further state
cycling, that line will be removed again.  In the timeline (*note
Timeline::) and in the agenda (*note Weekly/Daily Agenda::), you can
then use the `L' key to display the TODO items closed on each day,
giving you an overview of what has been done on a day.


File: org,  Node: TODO extensions,  Next: Priorities,  Prev: Progress Logging,  Up: TODO items

5.3 Extended use of TODO keywords
=================================

The default implementation of TODO entries is just two states:  TODO
and DONE.  You can, however, use the TODO feature for more complicated
things by configuring the variables `org-todo-keywords' and
`org-todo-interpretation'.  Using special setup, you can even use TODO
keywords in different ways in different org files.

* Menu:

* Workflow states::             From TODO to DONE in steps
* TODO types::                  I do this, Fred the rest
* Per file keywords::           Different files, different requirements


File: org,  Node: Workflow states,  Next: TODO types,  Prev: TODO extensions,  Up: TODO extensions

5.3.1 TODO keywords as workflow states
--------------------------------------

You can use TODO keywords to indicate different states in the process
of working on an item, for example

     (setq org-todo-keywords '("TODO" "FEEDBACK" "VERIFY" "DONE")
           org-todo-interpretation 'sequence)

   Changing these variables becomes only effective in a new Emacs
session.  With this setup, the command `C-c C-t' will cycle an entry
from TODO to FEEDBACK, then to VERIFY, and finally to DONE.  You may
also use a prefix argument to quickly select a specific state.  For
example `C-3 C-c C-t' will change the state immediately to VERIFY.  If
you define many keywords, you can use in-buffer completion (see *Note
Completion::) to insert these words into the buffer.


File: org,  Node: TODO types,  Next: Per file keywords,  Prev: Workflow states,  Up: TODO extensions

5.3.2 TODO keywords as types
----------------------------

The second possibility is to use TODO keywords to indicate different
types of action items.  For example, you might want to indicate that
items are for "work" or "home".  If you are into David Allen's _Getting
Things DONE_, you might want to use todo types `NEXTACTION', `WAITING',
`MAYBE'.  Or, when you work with several people on a single project,
you might want to assign action items directly to persons, by using
their names as TODO keywords.  This would be set up like this:

     (setq org-todo-keywords '("Fred" "Sara" "Lucy" "Mike" "DONE")
           org-todo-interpretation 'type)

   In this case, different keywords do not indicate a sequence, but
rather different types.  So it is normally not useful to change from
one type to another.  Therefore, in this case the behavior of the
command `C-c C-t' is changed slightly(1).  When used several times in
succession, it will still cycle through all names.  But when you return
to the item after some time and execute `C-c C-t' again, it will switch
from each name directly to DONE.  Use prefix arguments or completion to
quickly select a specific name.  You can also review the items of a
specific TODO type in a sparse tree by using a numeric prefix to `C-c
C-v'.  For example, to see all things Lucy has to do, you would use
`C-3 C-c C-v'.  To collect collect Lucy's items from all agenda files
into a single buffer, you would use the prefix arg as well when
creating the global todo list: `C-3 C-c t'.

   ---------- Footnotes ----------

   (1) This is also true for the `t' command in the timeline and agenda
buffers.


File: org,  Node: Per file keywords,  Prev: TODO types,  Up: TODO extensions

5.3.3 Setting up TODO keywords for individual files
---------------------------------------------------

It can be very useful to use different aspects of the TODO mechanism in
different files, which is not possible with the global settings
described above.  For file-local settings, you need to add special
lines to the file which set the keywords and interpretation for that
file only.  For example, to set one of the two examples discussed
above, you need one of the following lines, starting in column zero
anywhere in the file:

     #+SEQ_TODO: TODO FEEDBACK VERIFY DONE
     #+TYP_TODO: Fred Sara Lucy Mike DONE

To make sure you are using the correct keyword, type `#+' into the
buffer and then use `M-<TAB>' completion.

   Remember that the last keyword must always mean that the item is DONE
(you may use a different word, though).  Also note that in each file,
only one of the two aspects of TODO keywords can be used.  After
changing one of these lines, use `C-c C-c' with the cursor still in the
line to make the changes known to Org-mode(1).

   If you want to use very many keywords, for example when working with
a large group of people, you may split the names over several lines:

     #+TYP_TODO: Fred Sara Lucy Mike
     #+TYP_TODO: Luis George Jules Jessica
     #+TYP_TODO: Kim Arnold Peter
     #+TYP_TODO: DONE

   ---------- Footnotes ----------

   (1) Org-mode parses these lines only when Org-mode is activated
after visiting a file.  `C-c C-c' with the cursor in a line starting
with `#+' is simply restarting Org-mode, making sure that these changes
will be respected.


File: org,  Node: Priorities,  Prev: TODO extensions,  Up: TODO items

5.4 Priorities
==============

If you use Org-mode extensively to organize your work, you may end up
with a number of TODO entries so large that you'd like to prioritize
them.  This can be done by placing a _priority cookie_ into the
headline, like this

     *** TODO [#A] Write letter to Sam Fortune

With its standard setup, Org-mode supports priorities `A', `B', and
`C'.  `A' is the highest priority.  An entry without a cookie is
treated as priority `B'.  Priorities make a difference only in the
agenda (*note Weekly/Daily Agenda::).

`C-c ,'
     Set the priority of the current item.  The command prompts for a
     priority character `A', `B' or `C'.  When you press <SPC> instead,
     the priority cookie is removed from the headline.  The priorities
     can also be changed "remotely" from the timeline and agenda buffer
     with the `,' command (*note Agenda commands::).

`S-<up>'
`S-<down>'
     Increase/decrease priority of current item.  Note that these keys
     are also used to modify time stamps (*note Creating timestamps::).
     Furthermore, these keys are also used by CUA-mode (*note
     Interaction::).


File: org,  Node: Timestamps,  Next: Agenda Views,  Prev: TODO items,  Up: Top

6 Timestamps
************

Items can be labeled with timestamps to make them useful for project
planning.

* Menu:

* Time stamps::                 Assigning a time to a tree entry
* Creating timestamps::         Commands which insert timestamps


File: org,  Node: Time stamps,  Next: Creating timestamps,  Prev: Timestamps,  Up: Timestamps

6.1 Time stamps, deadlines and scheduling
=========================================

A time stamp is a specification of a date (possibly with time) in a
special format, either `<2003-09-16 Tue>' or `<2003-09-16 Tue 09:39>'.
A time stamp can appear anywhere in the headline or body of an org-tree
entry.  Its presence allows to show entries on specific dates in the
agenda (*note Weekly/Daily Agenda::).  We distinguish:

TIMESTAMP
     A simple time stamp just assigns a date/time to an item.  In the
     timeline and agenda displays, the headline of the entry will be
     shown exactly on that date.

TIMERANGE
     Two time stamps connected by `--' denote a time range.  The
     headline will be shown on the first and last day of the range, and
     on any dates that are displayed and fall in the range.  Here is an
     example:

          ** Meeting in Amsterdam
             <2004-08-23 Mon>--<2004-08-26 Thu>

DEADLINE
     If a time stamp is preceded by the word `DEADLINE:', the task
     (most likely a TODO item) is supposed to be finished on that date,
     and it will be listed then.  In addition, the compilation for
     _today_ will carry a warning about the approaching or missed
     deadline, starting `org-deadline-warning-days' before the due
     date, and continuing until the entry is marked DONE.  An example:

          *** TODO write article about the Earth for the Guide
              The editor in charge is <bbdb:Ford Prefect>
              DEADLINE: <2004-02-29 Sun>

SCHEDULED
     If a time stamp is preceded by the word `SCHEDULED:', it means you
     are planning to start working on that task on the given date.  The
     headline will be listed under the given date.  In addition, a
     reminder that the scheduled date has passed will be present in the
     compilation for _today_, until the entry is marked DONE.  I.e., the
     task will automatically be forwarded.


File: org,  Node: Creating timestamps,  Prev: Time stamps,  Up: Timestamps

6.2 Creating timestamps
=======================

For Org-mode to recognize time stamps, they need to be in the specific
format.  All commands listed below produce time stamps in the correct
format.

`C-c .'
     Prompt for a date and insert a corresponding time stamp.  When the
     cursor is at a previously used time stamp, it is updated to NOW.
     When this command is used twice in succession, a time range is
     inserted.

`C-u C-c .'
     Like `C-c .', but use the alternative format which contains date
     and time.

`C-c !'
     Like `C-c .', but insert an inactive time stamp not triggering the
     agenda.

`C-c <'
     Insert a time stamp corresponding to the cursor date in the
     Calendar.

`C-c >'
     Access the Emacs calendar for the current date.  If there is a
     timestamp in the current line, goto the corresponding date instead.

`C-c C-o'
     Access the agenda for the date given by the time stamp at point
     (*note Weekly/Daily Agenda::).

`C-c C-d'
     Insert `DEADLINE' keyword along with a stamp.  

`C-c C-w'
     Create a sparse tree with all deadlines that are either past-due,
     or which will become due within `org-deadline-warning-days'.  With
     `C-u' prefix, show all deadlines in the file.  With a numeric
     prefix, check that many days.  For example, `C-1 C-c C-w' shows
     all deadlines due tomorrow.

`C-c C-s'
     Insert `SCHEDULED' keyword along with a stamp.

`S-<left>'
`S-<right>'
     Change date at cursor by one day.  These key bindings conflict with
     CUA-mode (*note Interaction::).

`S-<up>'
`S-<down>'
     Change the item under the cursor in a timestamp.  The cursor can
     be on a year, month, day, hour or minute.  Note that if the cursor
     is not at a time stamp, these same keys modify the priority of an
     item.  (*note Priorities::). The key bindings also conflict with
     CUA-mode (*note Interaction::).

`C-c C-y'
     Evaluate a time range by computing the difference between start and
     end.  With prefix arg, insert result after the time range (in a
     table: into the following column).

   When Org-mode prompts for a date/time, the function reading your
input will replace anything you choose not to specify with the current
date and time.  For details, see the documentation string of
`org-read-date'.  Also, a calender will pop up to allow selecting a
date.  The calendar can be fully controlled from the minibuffer, and a
date can be selected with the following commands:

`<'
     Scroll calendar backwards by one month.  

`>'
     Scroll calendar forwards by one month.  

`mouse-1'
     Select date by clicking on it.  

`S-<right>'
     One day forward.  

`S-<left>'
     One day back.  

`S-<down>'
     One week forward.  

`S-<up>'
     One week back.  

`M-S-<right>'
     One month forward.  

`M-S-<left>'
     One month back.  

`<RET>'
     Choose date in calendar (only if nothing typed into minibuffer).


File: org,  Node: Agenda Views,  Next: Exporting,  Prev: Timestamps,  Up: Top

7 Agenda Views
**************

Due to the way Org-mode works, TODO items and time-stamped items can be
scattered throughout a file or even a number of files.  To get an
overview over open action items, or over events that are important for
a particular date, this information must be collected, sorted and
displayed in an organized way.

   Org-mode can select items based on various criteria, and display them
in a separate buffer.  Three different views are provided:
   * an _agenda_ that is like a calendar and shows information for
     specific dates

   * a _TODO list_ that covers all unfinished action items, and

   * a _tags view_ that shows information based on the tags associated
     with headlines in the outline tree.
   The extracted information is displayed in a special _agenda buffer_.
This buffer is read-only, but provides commands to visit the
corresponding locations in the original Org-mode files, and even to
edit these files remotely.

* Menu:

* Agenda files::                Files being searched for agenda information
* Agenda dispatcher::           Keyboard access to agenda views
* Weekly/Daily Agenda::         The calendar page with current tasks
* Global TODO list::            All unfinished action items
* Matching headline tags::      Structured information with fine-tuned search
* Timeline::                    Time-sorted view for single file
* Agenda commands::             Remote editing of org trees


File: org,  Node: Agenda files,  Next: Agenda dispatcher,  Prev: Agenda Views,  Up: Agenda Views

7.1 Agenda files
================

The information to be shown is collected from all _agenda files_, the
files listed in the variable `org-agenda-files'.  Thus even if you only
work with a single Org-mode file, this file should be put into that
list(1).  You can customize `org-agenda-files', but the easiest way to
maintain it is through the following commands

`C-c ['
     Add current file to the list of agenda files.  The file is added to
     the front of the list.  If it was already in the list, it is moved
     to the front.  With prefix arg, file is added/moved to the end.  

`C-c ]'
     Remove current file from the list of agenda files.  

`C-,'
     Cycle through agenda file list.
   The Org menu contains the current list of files and can be used to
visit any of them.

   ---------- Footnotes ----------

   (1) When using the dispatcher pressing `1' before selecting a
command will actually limit the command to the current file, and ignore
`org-agenda-files' until the next dispatcher command.


File: org,  Node: Agenda dispatcher,  Next: Weekly/Daily Agenda,  Prev: Agenda files,  Up: Agenda Views

7.2 The agenda dispatcher
=========================

The views are created through a dispatcher that should be bound to a
global key, for example `C-c a' (*note Installation and Activation::).
In the following we will assume that `C-c a' is indeed how the
dispatcher is accessed and list keyboard access to commands
accordingly.  After pressing `C-c a', an additional letter is required
to execute a command.  The dispatcher offers the following default
commands:
`a'
     Create the calendar-like agenda (*note Weekly/Daily Agenda::).

`t / T'
     Create a list of all TODO items (*note Global TODO list::).

`m / M'
     Create a list of headline matching a TAGS expression (*note
     Matching headline tags::).

   You can also define custom commands that will be accessible through
the dispatcher, just like the default commands.  Custom commands are
global searches for tags and specific TODO keywords, or a variety of
sparse tree creating commands (*note Sparse trees::).  As sparse trees
are only defined for a single org-mode file, these latter commands act
on the current buffer instead of the list of agenda files.

   Custom commands are configured in the variable
`org-agenda-custom-commands'.  You can customize this variable, for
example by pressing `C-c a C'.  You can also directly set it with Emacs
Lisp in `.emacs'.  For example:
     (setq org-agenda-custom-commands
           '(("w" todo "WAITING")
             ("u" tags "+BOSS-URGENT")
             ("U" tags-tree "+BOSS-URGENT")
             ("f" occur-tree "\\<FIXME\\>")))
   will define `C-c a w' as a global search for TODO entries with
`WAITING' as todo keyword, `C-c a u' as a global tags search for
headlines marked `:BOSS:' but not `:URGENT:', `C-c a U' to do the same
search but only in the current buffer and display the result as a
sparse tree, and `C-c a f' to create a sparse tree with all entries
containing the word `FIXME'.  For more information, look at the
documentation string of the variable `org-agenda-custom-commands'.


File: org,  Node: Weekly/Daily Agenda,  Next: Global TODO list,  Prev: Agenda dispatcher,  Up: Agenda Views

7.3 The weekly/daily agenda
===========================

The purpose of the weekly/daily _agenda_ is to act like a page of a
paper agenda, showing all the tasks for the current week or day.

`C-c a a'
     Compile an agenda for the current week from a list of org files.
     The agenda shows the entries for each day.  With a `C-u' prefix (or
     when the variable `org-agenda-include-all-todo' is `t'), all
     unfinished TODO items (also those without a date) are also listed
     at the beginning of the buffer, before the first date.

   Remote editing from the agenda buffer means for example that you can
change the dates of deadlines and appointments from the agenda buffer.
The commands available in the Agenda buffer are listed in *Note Agenda
commands::.

* Menu:

* Categories::                  Not all tasks are equal
* Time-of-day specifications::  How the agenda knows the time
* Calendar/Diary integration::  Integrating Anniversaries and more
* Sorting of agenda items::     The order of things


File: org,  Node: Categories,  Next: Time-of-day specifications,  Prev: Weekly/Daily Agenda,  Up: Weekly/Daily Agenda

7.3.1 Categories
----------------

In the agenda buffer, each entry is preceded by a _category_, which is
derived from the file name.  The category can also be set with a
special line anywhere in the buffer, looking like this:
     #+CATEGORY: Thesis
   If there are several such lines in a file, each specifies the
category for the text below it.  The display in the agenda buffer looks
best if the category is not longer than 10 characters.


File: org,  Node: Time-of-day specifications,  Next: Calendar/Diary integration,  Prev: Categories,  Up: Weekly/Daily Agenda

7.3.2 Time-of-Day Specifications
--------------------------------

Org-mode checks each agenda item for a time-of-day specification.  The
time can be part of the time stamp that triggered inclusion into the
agenda, for example as in `<2005-05-10 Tue 19:00>'.  Time ranges can be
specified with two time stamps, like
`<2005-05-10 Tue 20:30>--<2005-05-10 Tue 22:15>'.

   In the headline of the entry itself, a time(range) may also appear as
plain text (like `12:45' or a `8:30-1pm'.  If the agenda integrates the
Emacs diary (*note Calendar/Diary integration::), time specifications
in diary entries are recognized as well.

   For agenda display, Org-mode extracts the time and displays it in a
standard 24 hour format as part of the prefix.  The example times in
the previous paragraphs would end up in the agenda like this:

         8:30-13:00 Arthur Dent lies in front of the bulldozer
        12:45...... Ford Prefect arrives and takes Arthur to the pub
        19:00...... The Vogon reads his poem
        20:30-22:15 Marwin escorts the Hitchhikers to the bridge

   If the agenda is in single-day mode, or for the display of today, the
timed entries are embedded in a time grid, like

         8:00...... ------------------
         8:30-13:00 Arthur Dent lies in front of the bulldozer
        10:00...... ------------------
        12:00...... ------------------
        12:45...... Ford Prefect arrives and takes Arthur to the pub
        14:00...... ------------------
        16:00...... ------------------
        18:00...... ------------------
        19:00...... The Vogon reads his poem
        20:00...... ------------------
        20:30-22:15 Marwin escorts the Hitchhikers to the bridge

   The time grid can be turned on and off with the variable
`org-agenda-use-time-grid', and can be configured with
`org-agenda-time-grid'.


File: org,  Node: Calendar/Diary integration,  Next: Sorting of agenda items,  Prev: Time-of-day specifications,  Up: Weekly/Daily Agenda

7.3.3 Calendar/Diary integration
--------------------------------

Emacs contains the calendar and diary by Edward M. Reingold.  The
calendar displays a three-month calendar with holidays from different
countries and cultures.  The diary allows to keep track of
anniversaries, lunar phases, sunrise/set, recurrent appointments
(weekly, monthly) and more.  In this way, it is quite complementary to
Org-mode.  It can be very useful to combine output from Org-mode with
the diary.

   In order to include entries from the Emacs diary into Org-mode's
agenda, you only need to customize the variable

     (setq org-agenda-include-diary t)
   After that, everything will happen automatically.  All diary entries
including holidays, anniversaries etc will be included in the agenda
buffer created by Org-mode.  <SPC>, <TAB>, and <RET> can be used from
the agenda buffer to jump to the diary file, in order to edit existing
diary entries.  The `i' command to insert new entries for the current
date works in the agenda buffer, as well as the commands `S', `M', and
`C' to display Sunrise/Sunset times, show lunar phases and to convert
to other calendars, respectively.  `c' can be used to switch back and
forth between calendar and agenda.


File: org,  Node: Sorting of agenda items,  Prev: Calendar/Diary integration,  Up: Weekly/Daily Agenda

7.3.4 Sorting of agenda items
-----------------------------

The entries for each day are sorted.  The default order is to first
collect all items containing an explicit time-of-day specification.
These entries will be shown at the beginning of the list, as a
_schedule_ for the day.  After that, items remain grouped in
categories, in the sequence given by `org-agenda-files'.  Within each
category, items are sorted by priority (*note Priorities::).

   The priority is a numerical quantity composed of the base priority
(2000 for priority `A', 1000 for `B', and 0 for `C'), plus additional
increments for overdue scheduled or deadline items.

   Sorting can be customized using the variable
`org-agenda-sorting-strategy'.


File: org,  Node: Global TODO list,  Next: Matching headline tags,  Prev: Weekly/Daily Agenda,  Up: Agenda Views

7.4 The global TODO list
========================

The global TODO list contains all unfinished TODO items, formatted and
collected into a single place.

`C-c a t'
     Show the global TODO list.  This collects the TODO items from all
     agenda files (*note Agenda Views::) into a single buffer.  The
     buffer is in `agenda-mode', so there are commands to examine and
     manipulate the TODO entries directly from that buffer (*note
     Agenda commands::).  *Note Global TODO list::, for more
     information.  

`C-c a T'
     Like the above, but allow to select a specific TODO keyword.  You
     can also do this by specifying a prefix argument to `C-c a t'.
     With a `C-u' prefix you are prompted for a keyword.  With a numeric
     prefix, the Nth keyword in `org-todo-keywords' is selected.  The
     `r' key in the agenda buffer regenerates it, and you can give a
     prefix argument to this command to change the selected TODO
     keyword, for example `3 r'.  If you often need a search for a
     specific keyword, define a custom command for it (*note Agenda
     dispatcher::).

   Remote editing of TODO items means that you can change the state of a
TODO entry with a single key press.  The commands available in the TODO
list are described in *Note Agenda commands::.


File: org,  Node: Matching headline tags,  Next: Timeline,  Prev: Global TODO list,  Up: Agenda Views

7.5 Matching headline tags
==========================

If headlines in the agenda files are marked with _tags_ (*note Tags::),
you can select headlines based on the tags that apply to them and
collect them into an agenda buffer.

`C-c a m'
     Produce a list of all headlines that match a given set of tags.
     The command prompts for a selection criterion, which is a boolean
     logic expression with tags, like `+WORK+URGENT-WITHBOSS' or
     `WORK|HOME' (*note Tags::).  If you often need a specific search,
     define a custom command for it (*note Agenda dispatcher::).  

`C-c a M'
     Like `C-c a m', but only select headlines that are also TODO items
     and force checking subitems (see variable
     `org-tags-match-list-sublevels'.

   The commands available in the tags list are described in *Note
Agenda commands::.


File: org,  Node: Timeline,  Next: Agenda commands,  Prev: Matching headline tags,  Up: Agenda Views

7.6 Timeline for a single file
==============================

The timeline is not really an agenda view, because it only summarizes
items from a single Org-mode file.  But it also uses the agenda buffer
and provides similar commands, so we discuss it here.  The timeline
shows all time-stamped items in a single Org-mode file (or the selected
part of it), in _time-sorted view_.  The main purpose of this command
is to give an overview over events in a project.

`C-c C-r'
     Show a time-sorted view of the org file, with all time-stamped
     items.  When called with a `C-u' prefix, all unfinished TODO
     entries (scheduled or not) are also listed under the current date.
   The commands available in the timeline buffer are listed in *Note
Agenda commands::.


File: org,  Node: Agenda commands,  Prev: Timeline,  Up: Agenda Views

7.7 Commands in the agenda buffer
=================================

Entries in the agenda buffer are linked back to the org file or diary
file where they originate.  You are not allowed to edit the agenda
buffer itself, but commands are provided to show and jump to the
original entry location, and to edit the org-files "remotely" from the
agenda buffer.  In this way, all information is stored only once, and
you don't risk that your agenda and note files diverge.

   Some commands can be executed with mouse clicks on agenda lines.  For
the other commands, the cursor needs to be in the desired line.

Motion
......

`n'
     Next line (same as <up>).  

`p'
     Previous line (same as <down>).

View/GoTo org file
..................

`mouse-3'
`<SPC>'
     Display the original location of the item in another window.

`L'
     Display original location and recenter that window.

`mouse-2'
`<TAB>'
     Go to the original location of the item in another window.

`<RET>'
     Go to the original location of the item and delete other windows.

`f'
     Toggle Follow mode.  In Follow mode, as you move the cursor through
     the agenda buffer, the other window always shows the corresponding
     location in the org file.

`l'
     Toggle Logbook mode.  In Logbook mode, entries that where marked
     DONE while logging was on (variable `org-log-done') are shown in
     the agenda.

Change display
..............

`o'
     Delete other windows.

`w'
     Switch to weekly view (7 days displayed together)

`d'
     Switch to daily view (just one day displayed)

`D'
     Toggle the inclusion of diary entries.  See *Note Calendar/Diary
     integration::.

`g'
     Toggle the time grid on and off.  See also the variables
     `org-agenda-use-time-grid' and `org-agenda-time-grid'.

`r'
     Recreate the agenda buffer, for example to reflect the changes
     after modification of the time stamps of items with S-<left> and
     S-<right>.  When the buffer is the global todo list, a prefix
     argument is interpreted to create a selective list for a specific
     TODO keyword.

`<right>'
     Display the following `org-agenda-ndays' days.  For example, if
     the display covers a week, switch to the following week.  With
     prefix arg, go forward that many times `org-agenda-ndays' days.

`<left>'
     Display the previous dates.

`.'
     Goto today.

Remote editing
..............

`0-9'
     Digit argument.

`t'
     Change the TODO state of the item, both in the agenda and in the
     original org file.

`T'
     Show all tags assiciated with the current item.  Because of
     inheritance, this may be more than the tags listed in the line
     itself.

`:'
     Set tags for the current headline.

`,'
     Set the priority for the current item.  Org-mode prompts for the
     priority character. If you reply with <SPC>, the priority cookie
     is removed from the entry.

`p'
     Display weighted priority of current item.

`+'
`S-<up>'
     Increase the priority of the current item.  The priority is
     changed in the original buffer, but the agenda is not resorted.
     Use the `r' key for this.

`-'
`S-<down>'
     Decrease the priority of the current item.

`S-<right>'
     Change the time stamp associated with the current line by one day
     into the future.  With prefix argument, change it by that many
     days.  For example, `3 6 5 S-<right>' will change it by a year.
     The stamp is changed in the original org file, but the change is
     not directly reflected in the agenda buffer.  Use the `r' key to
     update the buffer.

`S-<left>'
     Change the time stamp associated with the current line by one day
     into the past.

`>'
     Change the time stamp associated with the current line to today.
     The key `>' has been chosen, because it is the same as `S-.' on my
     keyboard.

`i'
     Insert a new entry into the diary.  Prompts for the type of entry
     (day, weekly, monthly, yearly, anniversary, cyclic) and creates a
     new entry in the diary, just like `i d' etc. would do in the
     calendar.  The date is taken from the cursor position.

Calendar commands
.................

`c'
     Open the Emacs calendar and move to the date at the agenda cursor.

`c'
     When in the calendar, compute and show the Org-mode agenda for the
     date at the cursor.

`M'
     Show the phases of the moon for three month around current date.

`S'
     Show sunrise and sunset times.  The geographical location must be
     set with calendar variables, see documentation of the Emacs
     calendar.

`C'
     Convert the date at cursor into many other cultural and historic
     calendars.

`H'
     Show holidays for three month around the cursor date.

`C-c C-x C-c'
     Export a single iCalendar file containing entries from all agenda
     files.

Quit and Exit
.............

`q'
     Quit Agenda, remove the agenda buffer.

`x'
     Exit agenda, remove the agenda buffer and all buffers loaded by
     Emacs for the compilation of the agenda.  Buffers created by the
     user to visit org files will not be removed.



File: org,  Node: Exporting,  Next: Miscellaneous,  Prev: Agenda Views,  Up: Top

8 Exporting
***********

For printing and sharing of notes, Org-mode documents can be exported
as ASCII or HTML files.  To incorporate entries with associated times
like deadlines or appointments into a desktop calendar program like
iCal, Org-mode can also produce extracts in the iCalendar format.

* Menu:

* ASCII export::                Export as a structured ASCII file
* HTML export::                 Export as an HTML file
* iCalendar export::            Create calendar entries.


File: org,  Node: ASCII export,  Next: HTML export,  Prev: Exporting,  Up: Exporting

8.1 ASCII export
================

`C-c C-x a'
     Export as ASCII file.  If there is an active region, only the
     region will be exported.  For an org file `myfile.org', the ASCII
     file will be `myfile.txt'.  The file will be overwritten without
     warning.

   In the exported version, the first 3 outline levels will become
headlines, defining a general document structure.  Additional levels
will be exported as itemize lists.  If you want that transition to occur
at a different level, specify it with a prefix argument.  For example,
     C-1 C-c C-x a org-export-as-ascii
   creates only top level headlines and does the rest as items.  Lines
starting with `#' and subtrees starting with the word `COMMENT' will
not be exported.


File: org,  Node: HTML export,  Next: iCalendar export,  Prev: ASCII export,  Up: Exporting

8.2 HTML export
===============

Org-mode contains an HTML exporter with extensive HTML formatting, in
ways similar to John Grubers _markdown_ language, but with additional
support for tables.

`C-c C-x h'
     Export as HTML file `myfile.html'.  

`C-c C-x b'
     Export as HTML file and open it with a browser.  

`C-c C-x t'
     Insert template with export options, see below.  

`C-c :'
     Toggle fixed-width for entry (QUOTE) or region, see below.

   In the exported version, the first 3 outline levels will become
headlines, defining a general document structure.  Additional levels
will be exported as itemize lists.  If you want that transition to occur
at a different level, specify it with a prefix argument.  For example,
     C-2 C-c C-x b
   creates two levels of headings and does the rest as items.

* Menu:

* HTML formatting::             Interpretation of the buffer content
* Export options::              How to influence exports
* Comment lines::               Lines which will not be exported


File: org,  Node: HTML formatting,  Next: Export options,  Prev: HTML export,  Up: HTML export

8.2.1 HTML formatting
---------------------

Not all text is transferred literally to the exported HTML file.  The
exporter implements the following interpretation:

   * Hand-formatted lists with `-', `*' or `+' as bullet, or with `1.'
     or `2)' as enumerator will be recognized and transformed into HTML
     lists.  See *Note Plain Lists::.

   * You can make words *bold*, /italic/, and _underlined_

   * Simple TeX-like math constructs are interpreted:

        - `10^22' and `J_n' are super- and subscripts.  You can quote
          `^' and `_' with a backslash: `\_' and `\^'

        - `\alpha' indicates a Greek letter, `\to' an arrow.  You can
          use completion for these macros, just type `\' and maybe a few
          letters, and press `M-<TAB>' to see possible completions.

   * Tables are transformed into HTML tables.  Data fields before the
     first horizontal separator line will be formatted as table header
     fields.

   * If a headline starts with the word `QUOTE', the text below the
     headline will be typeset as fixed-width, to allow quoting of
     computer codes etc.  Lines starting with `:' are also typeset in
     fixed-width font.

   * If you want to include HTML tags which should be interpreted as
     such, mark them with a `@' like in `@<b>bold text@</b>'.  Plain
     `<' and `>' are always transformed to `&lt;' and `&gt;' in HTML
     export.

   If these conversions conflict with your habits of typing ASCII text,
they can all be turned off with corresponding variables.


File: org,  Node: Export options,  Next: Comment lines,  Prev: HTML formatting,  Up: HTML export

8.2.2 Export options
--------------------

The exporter recognizes special lines in the buffer which provide
additional information.  These lines may be put anywhere in the file.
The whole set of lines can be inserted into the buffer with `C-c C-x
t'.  For individual lines, a good way to make sure the keyword is
correct is to type `#+' and then use `M-<TAB>' completion (*note
Completion::).

     #+TITLE:     the title to be shown (default is the buffer name)
     #+AUTHOR:    the author (default taken from `user-full-name')
     #+EMAIL:     his/her email address (default from `user-mail-address')
     #+LANGUAGE:  language for HTML, e.g. `en' (`org-export-default-language')
     #+TEXT:      Some descriptive text to be inserted at the beginning.
     #+TEXT:      Several lines may be given.
     #+OPTIONS:   H:2  num:t  toc:t  \n:nil  t  ::t  |:t  ^:t  *:nil  TeX:t
   The OPTIONS line is a compact form to specify export settings.  Here
you can 
     H:      set the number of headline levels for export
     num:    turn on/off section-numbers
     toc:    turn on/off table of contents
     \n:     turn on/off linebreak-preservation
     @:      turn on/off quoted html tags
     ::      turn on/off fixed-width sections
     |:      turn on/off tables
     ^:      turn on/off TeX-like syntax for sub- and superscripts.
     *:      turn on/off emphasized text (bold, italic, underlined)
     TeX:    turn on/off TeX macros

   You can also give style information for the exported file.  The
default specification can be configured through the option
`org-export-html-style'.  If you want to use a file-local style, you
may use file variables, best wrapped into a COMMENT section at the end
of the outline tree.  For example:

     * COMMENT HTML style specifications

     # Local Variables:
     # org-export-html-style: "   <style type=\"text/css\">
            p {font-weight: normal; color: gray; }
            h1 {color: black; }
        </style>"
     # End: ***

   Remember to execute `M-x normal-mode' after changing this to make
the new style visible to Emacs.


File: org,  Node: Comment lines,  Prev: Export options,  Up: HTML export

8.2.3 Comment lines
-------------------

Lines starting with `#' in column zero are treated as comments and will
never be exported.  Also entire subtrees starting with the word
`COMMENT' will never be exported.  Finally, any text before the first
headline will not be exported either.  This applies also for ASCII
export.

`C-c ;'
     Toggle the COMMENT keyword at the beginning of an entry.


File: org,  Node: iCalendar export,  Prev: HTML export,  Up: Exporting

8.3 iCalendar export
====================

Some people like to use Org-mode for keeping track of projects, but
still prefer a standard calendar application for anniversaries and
appointments.  In this case it can be useful to have deadlines and
other time-stamped items in Org-mode files show up in the calendar
application.  Org-mode can export calendar information in the standard
iCalendar format.

`C-c C-x i'
     Create iCalendar entries for the current file and store them in
     the same directory, using a file extension `.ics'.  

`C-c C-x C-i'
     Like `C-c C-x i', but do this for all files in `org-agenda-files'.
     For each of these files, a separate iCalendar file will be
     written.  

`C-c C-x c'
     Create a single large iCalendar file from all files in
     `org-agenda-files' and write it to the file given by
     `org-combined-agenda-icalendar-file'.

   How this calendar is best read and updated, depends on the
application you are using.  For example, when using iCal under Apple
MacOS X, you could create a new calendar `OrgMode' (the default name
for the calendar created by `C-c C-x c', see the variables
`org-icalendar-combined-name' and
`org-combined-agenda-icalendar-file').  Then set Org-mode to overwrite
the corresponding file `~/Library/Calendars/OrgMode.ics'.  You may even
use AppleScript to make iCal re-read the calendar files each time a new
version of `OrgMode.ics' is produced.  Here is the setup needed for
this:

     (setq org-combined-agenda-icalendar-file
         "~/Library/Calendars/OrgMode.ics")
     (add-hook 'org-after-save-iCalendar-file-hook
      (lambda ()
       (shell-command
        "osascript -e 'tell application \"iCal\" to reload calendars'")))


File: org,  Node: Miscellaneous,  Next: Index,  Prev: Exporting,  Up: Top

9 Miscellaneous
***************

* Menu:

* Completion::                  M-TAB knows what you need
* Customization::               Adapting Org-mode to your taste
* FAQ::                         Frequently asked questions
* Interaction::                 Other Emacs packages
* TTY keys::                    Using Org-mode on a tty
* Bugs::                        Things which do not work perfectly
* Acknowledgments::             These people provided feedback and more


File: org,  Node: Completion,  Next: Customization,  Prev: Miscellaneous,  Up: Miscellaneous

9.1 Completion
==============

Org-mode supports in-buffer completion.  This type of completion does
not make use of the minibuffer.  You simply type a few letters into the
buffer and use the key to complete text right there.

`M-<TAB>'
     Complete word at point
        * At the beginning of a headline, complete TODO keywords.

        * After `\', complete TeX symbols supported by the exporter.

        * After `*', complete CamelCase versions of all headlines in the
          buffer.

        * After `:', complete tags used elsewhere in the buffer.

        * After `#+', complete the special keywords like `TYP_TODO' or
          `OPTIONS' which set file-specific options for Org-mode.  When
          the option keyword is already complete, pressing `M-<TAB>'
          again will insert example settings for this keyword.

        * Elsewhere, complete dictionary words using ispell.


File: org,  Node: Customization,  Next: FAQ,  Prev: Completion,  Up: Miscellaneous

9.2 Customization
=================

There are more than 100 variables that can be used to customize
Org-mode.  For the sake of compactness of the manual, we are not
describing the variables here.  A structured overview of customization
variables is available with `M-x org-customize'.  Or select `Browse Org
Group' from the `Org->Customization' menu.


File: org,  Node: FAQ,  Next: Interaction,  Prev: Customization,  Up: Miscellaneous

9.3 Frequently asked questions
==============================

  1. Org-mode seems to be a useful default mode for the various
     `README' files I have scattered through my directories.  How do I
     turn it on for all `README' files?
          (add-to-list 'auto-mode-alist '("README$" . org-mode))

  2. I would like to have two windows on the same Org-mode file, but
     with different outline visibility.  Is that possible?
     In GNU Emacs, you may use _indirect buffers_ which do exactly
     this.  See the documentation on the command
     `make-indirect-buffer'.  In XEmacs, this is currently not possible
     because of the different outline implementation.

  3. Is there an easy way to insert links to web locations?
     Sure, just type or paste them into the buffer.  A plain-text
     URL-like string is directly interpreted as a link.

  4. When I export my TODO list, every TODO item becomes a separate
     section.  How do I enforce these items to be exported as an
     itemized list?
     If you plan to use ASCII or HTML export, make sure things you want
     to be exported as item lists are level 4 at least, even if that
     does mean there is a level jump.  For example

          * Todays top priorities
          **** TODO write a letter to xyz
          **** TODO Finish the paper
          **** Pick up kids at the school

     Alternatively, if you need a specific value for the heading/item
     transition in a particular file, use the `+OPTIONS' line to
     configure the `H' switch.

          +OPTIONS:   H:2; ...

  5. I would like to export only a subtree of my file to HTML.  How?
     If you want to export a subtree, mark the subtree as region and
     then export.  Marking can be done with `C-c @ C-x C-x', for
     example.

  6. Org-mode takes over the S-cursor keys.  I also want to use
     CUA-mode, is there a way to fix this conflict?
     Yes, see *Note Interaction::

  7. Is there an easy way to insert an empty table template with a
     default number of rows and columns?
     To insert an empty table template, just type `|-' and use <TAB>.
     The default size can be changed with the variable
     `org-table-default-size'.  However, just starting to type the
     first line is usually much easier.

  8. One of my table columns has started to fill up with `#ERROR'.
     What is going on?
     Org-mode tried to compute the column from other fields using a
     formula stored in the `#+TBLFMT:' line just below the table, and
     the evaluation of the formula fails.  Fix the fields used in the
     formula, or fix the formula, or remove it!

  9. When I am in the last column of a table and just above a
     horizontal line in the table, pressing TAB creates a new table line
     before the horizontal line.  How can I quickly move to the line
     below the horizontal line instead?
     Press <down> (to get on the separator line) and then <TAB>.  Or
     configure the variable `org-table-tab-jumps-over-hlines'.

 10. How can I change the indentation of an entire table without fixing
     every line by hand?
     The indentation of a table is set by the first line.  So just fix
     the indentation of the first line and realign with <TAB>.

 11. Is it possible to include entries from org-mode files into my
     emacs diary?
     Since the org-mode agenda is much more powerful and can contain the
     diary (*note Calendar/Diary integration::), you should think twice
     before deciding to do this.  Inegrating org-mode information into
     the diary is, however, possible.  The following steps are
     necessary: Autoload the function `org-diary' as shown above under
     *Note Installation and Activation::.  You also need to use _fancy
     diary display_ by setting in `.emacs':

          (add-hook 'diary-display-hook 'fancy-diary-display)

     Then include the following line into your `~/diary' file, in order
     to get the entries from all files listed in the variable
     `org-agenda-files':

          &%%(org-diary)
     You may also select specific files with

          &%%(org-diary) ~/path/to/some/org-file.org
          &%%(org-diary) ~/path/to/another/org-file.org

     If you now launch the calendar and press `d' to display a diary,
     the headlines of entries containing a timestamp, date range,
     schedule, or deadline referring to the selected date will be
     listed.  Just like in Org-mode's agenda view, the diary for
     _today_ contains additional entries for overdue deadlines and
     scheduled items.  See also the documentation of the `org-diary'
     function.



File: org,  Node: Interaction,  Next: TTY keys,  Prev: FAQ,  Up: Miscellaneous

9.4 Interaction with other packages
===================================

Org-mode can cooperate with the following packages:

`table.el' by Takaaki Ota
     Org mode cooperates with table.el, see *Note table.el::.  

`calc.el' by Dave Gillespie
     Org-mode uses the calc package for implementing spreadsheet
     functionality in its tables (*note Table calculations::).
     Org-modes checks for the availability of calc by looking for the
     function `calc-eval' which should be autoloaded in your setup if
     calc has been installed properly.  As of Emacs 22, calc is part of
     the Emacs distribution.  Another possibility for interaction
     between the two packages is using calc for embedded calculations.
     *Note Embedded Mode: (calc)Embedded Mode.  

`constants.el' by Carsten Dominik
     In a table formula (*note Table calculations::), it is possible to
     use names for natural constants or units.  Instead of defining you
     own constants in the variable `org-table-formula-constants',
     install the `constants' package which defines a large number of
     constants and units, and lets you use unit prefixes like `M' for
     `Mega' etc.  You will need version 2.0 of this package, available
     at `http://www.astro.uva.nl/~dominik/Tools'. Org-mode checks for
     the function `constants-get', which has to be autoloaded in your
     setup.  See the installation instructions in the file
     `constants.el'.  

`CUA.el' by Kim. F. Storm
     Keybindings in Org-mode conflict with the `S-<cursor>' keys used
     by CUA-mode (as well as pc-select-mode and s-region-mode) to
     select and extend the region.  If you want to use one of these
     packages along with Org-mode, configure the variable
     `org-CUA-compatible'.  When set, Org-mode will move the following
     keybindings in org-mode files, and in the agenda buffer (but not
     during date selection).
          S-UP    -> M-p             S-DOWN  -> M-n
          S-LEFT  -> M--             S-RIGHT -> M-+
          S-RET   -> C-S-RET
     Yes, these are unfortunately more difficult to remember.  If you
     want to have other replacement keys, look at the variable
     `org-disputed-keys'.

`remember.el' by John Wiegley
     Org mode cooperates with remember, see *Note Remember::.  

`planner.el' by John Wiegley
     Planner is another tool to plan work and keep track of tasks.
     Planner uses a multi-file approach with project pages and day
     pages.  Is based on Emacs-Wiki.  If Planner is your primary tool,
     it can be useful to display the agenda entries resulting from org
     files in day-pages of the planner.  This can be done through the
     diary of the calendar: Integrate org files into the diary as
     described above, and then turn on the diary support of planner.


File: org,  Node: TTY keys,  Next: Bugs,  Prev: Interaction,  Up: Miscellaneous

9.5 Using org-mode on a tty
===========================

Org-mode uses a number of keys that are not accessible on a tty.  This
applies to most special keys like cursor keys, <TAB> and <RET>, when
these are combined with modifier keys like <Meta> and/or <Shift>.
Org-mode uses these bindings because it needs to provide keys for a
large number of commands, and because these keys appeared particularly
easy to remember.  In order to still be able to access the core
functionality of Org-mode on a tty, alternative bindings are provided.
Here is a complete list of these bindings, which are obviously more
cumbersome to use.  Note that sometimes a work-around can be better.
For example changing a time stamp is really only fun with `S-<cursor>'
keys.  On a tty you would rather use `C-c .'  to re-insert the
timestamp.

Default     Alternative 1  Alternative 2
`S-<TAB>'   `C-u <TAB>'    
`M-<left>'  `C-c C-x l'    `<Esc> <left>'
`M-S-<left>'`C-c C-x L'    
`M-<right>' `C-c C-x r'    `<Esc>
                           <right>'
`M-S-<right>'`C-c C-x R'    
`M-<up>'    `C-c C-x u'    `<Esc> <up>'
`M-S-<up>'  `C-c C-x U'    
`M-<down>'  `C-c C-x d'    `<Esc> <down>'
`M-S-<down>'`C-c C-x D'    
`S-<RET>'   `C-c C-x c'    
`M-<RET>'   `C-c C-x m'    `<Esc> <RET>'
`M-S-<RET>' `C-c C-x M'    
`S-<left>'  `C-c C-x       
            <left>'        
`S-<right>' `C-c C-x       
            <right>'       
`S-<up>'    `C-c C-x       
            <up>'          
`S-<down>'  `C-c C-x       
            <down>'        


File: org,  Node: Bugs,  Next: Acknowledgments,  Prev: TTY keys,  Up: Miscellaneous

9.6 Bugs
========

Here is a list of things which should work differently, but which I
have found too hard to fix.

   * Text in an entry protected with the `QUOTE' keyword should not
     autowrap.

   * When the application called by `C-c C-o' to open a file link fails
     (for example because the application does not exits or refuses to
     open the file), it does so silently.  No error message is
     displayed.

   * The remote-editing commands in the agenda buffer cannot be undone
     with `undo' called from within the agenda buffer.  But you can go
     to the corresponding buffer (using <TAB> or <RET> and execute
     `undo' there.

   * Recalculating a table line applies the formulas from left to right.
     If a formula uses _calculated_ fields further down the row,
     multiple recalculation may be needed to get all fields consistent.

   * Under XEmacs, if Org-mode entries are included into the diary, it
     is not possible to jump back from the diary to the org file.
     Apparently, the text properties are lost when the
     fancy-diary-display is used.  However, from Org-mode's timeline
     and agenda buffers (created with `C-c C-r' and `C-c a'), things do
     work correctly.

   * Linux should also have a default viewer application, using mailcap.
     Maybe we can use GNUS or VM mime code?  Or dired's guessing
     commands?  Any hints (or even patches) are appreciated.

   * When you write `x = a /b/ c', b will be exported in italics.

   * The exporters work well, but could be made more efficient.


File: org,  Node: Acknowledgments,  Prev: Bugs,  Up: Miscellaneous

9.7 Acknowledgments
===================

Org-mode was written by Carsten Dominik, who still maintains it at the
Org-mode homepage `http://www.astro.uva.nl/~dominik/Tools/org/'.  The
following people (in alphabetic order) have helped the development
along with ideas, suggestions and patches.  Many thanks to all of you,
Org-mode would not be what it is without your input.

   * Thomas Baumann contributed the code for links to the MH-E email
     system.

   * Pavel Chalmoviansky reported bugs and suggested improvements
     related to the agenda treatment of items with specified time.

   * Sacha Chua, the current maintainer of Planner, suggested to copy
     linking code from Planner (I took code for RMAIL and Wanderlust).

   * Christian Egli converted the documentation into TeXInfo format and
     patched basic CSS formatting support into the HTML exporter.  He
     also inspired the agenda by showing me his plans for a multifile
     summary.

   * Kai Grossjohann pointed out that a number of key bindings in
     Org-mode conflict with other packages.

   * Stefan Monnier provided a patch with lots of little fixes to keep
     the Emacs-Lisp compiler happy.

   * Tim O'Callaghan suggested in-file links, search options for
     general file links, and TAGS.

   * Oliver Oppitz suggested multi-state TODO items.

   * Pete Phillips helped the development of the TAGS feature with beta
     testing and suggestions.

   * Matthias Rempe (Oelde) provided ideas, a patch introducing Windows
     NT/2000 support, and quality control.

   * Kevin Rogers contributed code to access VM files on remote hosts.

   * Philip Rooke created the Org-mode reference card.  He also helped
     with beta testing and contributed a number of very useful ideas.

   * Christian Schlauer proposed angular brackets around links, among
     other things.

   * Linking to VM/BBDB/GNUS was inspired by Tom Shannon's
     `organizer-mode.el'.

   * Juergen Vollmer contributed code generating the table of contents
     in HTML output, and other export improvements.

   * David Wainberg suggested the archiving mechanism and shaped the
     internal link system with many suggestions and ideas.

   * Scheduling TODO items was inspired by John Wiegley's `planner.el'.

   * Carsten Wimmer suggested some changes and helped fix a bug in
     linking to GNUS.

   * Roland Winkler pointed out that additional keybindings are needed
     to use Org-mode on a tty.


File: org,  Node: Index,  Next: Key Index,  Prev: Miscellaneous,  Up: Top

10 Index
********

 [index ]
* Menu:

* acknowledgments:                       Acknowledgments.     (line   6)
* active region <1>:                     HTML export.         (line  10)
* active region <2>:                     ASCII export.        (line   6)
* active region <3>:                     Built-in table editor.
                                                              (line 166)
* active region:                         Structure editing.   (line  45)
* agenda:                                Weekly/Daily Agenda. (line   6)
* agenda commands, custom:               Agenda dispatcher.   (line   6)
* agenda dispatcher:                     Agenda dispatcher.   (line   6)
* agenda files, removing buffers:        Agenda commands.     (line 184)
* agenda views:                          Agenda Views.        (line   6)
* agenda, for single file:               Timeline.            (line   6)
* applescript, for calendar update:      iCalendar export.    (line  38)
* archive locations:                     Archiving.           (line  13)
* archiving:                             Archiving.           (line   6)
* ASCII export:                          ASCII export.        (line   6)
* author:                                Feedback.            (line   6)
* autoload:                              Installation and Activation.
                                                              (line   6)
* BBDB links:                            External Links.      (line   6)
* bold text:                             HTML formatting.     (line  13)
* bug reports:                           Feedback.            (line   6)
* bugs:                                  Bugs.                (line   6)
* calc package:                          Table calculations.  (line   6)
* calc.el:                               Interaction.         (line   9)
* calculations, in tables <1>:           Table calculations.  (line   6)
* calculations, in tables:               Built-in table editor.
                                                              (line 136)
* calendar integration:                  Calendar/Diary integration.
                                                              (line   6)
* calendar, for selecting date:          Creating timestamps. (line  67)
* CamelCase link completion:             Completion.          (line   6)
* CamelCase links:                       Internal Links.      (line   6)
* CamelCase links, completion of:        CamelCase links.     (line   6)
* category:                              Categories.          (line   6)
* children, subtree visibility state:    Visibility cycling.  (line  10)
* column formula:                        Column formulas.     (line   6)
* commands, in agenda buffer:            Agenda commands.     (line   6)
* comment lines:                         Comment lines.       (line   6)
* completion, of CamelCase links <1>:    Completion.          (line   6)
* completion, of CamelCase links:        CamelCase links.     (line   6)
* completion, of dictionary words:       Completion.          (line   6)
* completion, of file names:             Managing links.      (line  23)
* completion, of links:                  Managing links.      (line  23)
* completion, of option keywords <1>:    Completion.          (line   6)
* completion, of option keywords:        Export options.      (line   6)
* Completion, of option keywords:        Per file keywords.   (line  17)
* completion, of tags <1>:               Completion.          (line   6)
* completion, of tags:                   Tags.                (line  34)
* completion, of TeX symbols <1>:        Completion.          (line   6)
* completion, of TeX symbols:            HTML formatting.     (line  17)
* completion, of TODO keywords <1>:      Completion.          (line   6)
* completion, of TODO keywords:          Workflow states.     (line  12)
* constants, in calculations:            Formula syntax.      (line  24)
* constants.el:                          Interaction.         (line  19)
* contents, global visibility state:     Visibility cycling.  (line  17)
* copying, of subtrees:                  Structure editing.   (line   6)
* creating timestamps:                   Creating timestamps. (line   6)
* CUA.el:                                Interaction.         (line  31)
* custom agenda commands:                Agenda dispatcher.   (line   6)
* customization:                         Customization.       (line   6)
* cutting, of subtrees:                  Structure editing.   (line   6)
* cycling, of TODO states:               TODO basics.         (line  13)
* cycling, visibility:                   Visibility cycling.  (line   6)
* date stamps:                           Time stamps.         (line   6)
* date, reading in minibuffer:           Creating timestamps. (line  67)
* DEADLINE keyword:                      Time stamps.         (line  27)
* deadlines:                             Time stamps.         (line   6)
* demotion, of subtrees:                 Structure editing.   (line   6)
* diary entries, creating from agenda:   Agenda commands.     (line 143)
* diary integration:                     Calendar/Diary integration.
                                                              (line   6)
* dictionary word completion:            Completion.          (line   6)
* dispatching agenda commands:           Agenda dispatcher.   (line   6)
* document structure:                    Document Structure.  (line   6)
* DONE, final TODO keyword:              Per file keywords.   (line  20)
* editing tables:                        Tables.              (line   6)
* editing, of table formulas:            Editing/debugging formulas.
                                                              (line   6)
* emphasized text:                       Export options.      (line  21)
* evaluate time range:                   Creating timestamps. (line  62)
* exporting:                             Exporting.           (line   6)
* exporting a subtree:                   FAQ.                 (line  41)
* exporting, not:                        Comment lines.       (line   6)
* extended TODO keywords:                TODO extensions.     (line   6)
* external links:                        External Links.      (line   6)
* FAQ:                                   FAQ.                 (line   6)
* feedback:                              Feedback.            (line   6)
* file links:                            External Links.      (line   6)
* file links, searching:                 Search Options.      (line   6)
* file name completion:                  Managing links.      (line  23)
* files, adding to agenda list:          Agenda files.        (line  12)
* filing subtrees:                       Archiving.           (line   6)
* fixed width:                           HTML formatting.     (line  28)
* fixed-width sections:                  Export options.      (line  21)
* folded, subtree visibility state:      Visibility cycling.  (line  10)
* folding, sparse trees:                 Sparse trees.        (line   6)
* following links:                       Managing links.      (line  35)
* format specifier:                      Formula syntax.      (line  32)
* formula editing:                       Editing/debugging formulas.
                                                              (line   6)
* formula syntax:                        Formula syntax.      (line   6)
* formula, for named table field:        Named-field formulas.
                                                              (line   6)
* formula, for table column:             Column formulas.     (line   6)
* formula, in tables:                    Built-in table editor.
                                                              (line 136)
* global keybindings:                    Installation and Activation.
                                                              (line   6)
* global TODO list:                      Global TODO list.    (line   6)
* global visibility states:              Visibility cycling.  (line  17)
* GNUS links:                            External Links.      (line   6)
* hand-formatted lists:                  HTML formatting.     (line   9)
* headline levels:                       Export options.      (line  21)
* headline levels, for exporting <1>:    HTML export.         (line  22)
* headline levels, for exporting:        ASCII export.        (line  12)
* headline navigation:                   Motion.              (line   6)
* headline tagging:                      Tags.                (line   6)
* headline, promotion and demotion:      Structure editing.   (line   6)
* headlines:                             Headlines.           (line   6)
* hide text:                             Visibility cycling.  (line   6)
* HTML export:                           HTML export.         (line   6)
* HTML tags:                             HTML formatting.     (line  33)
* hyperlinks:                            Hyperlinks.          (line   6)
* iCalendar export:                      iCalendar export.    (line   6)
* indentation, of tables:                FAQ.                 (line  72)
* indirect buffers:                      FAQ.                 (line  13)
* inheritance, of tags:                  Tags.                (line  13)
* inserting links:                       Managing links.      (line  23)
* installation:                          Installation and Activation.
                                                              (line   6)
* internal links:                        Internal Links.      (line   6)
* introduction:                          Introduction.        (line   6)
* italic text:                           HTML formatting.     (line  13)
* jumping, to headlines:                 Motion.              (line   6)
* keybindings, global:                   Installation and Activation.
                                                              (line   6)
* keyword options:                       Per file keywords.   (line   6)
* linebreak preservation:                Export options.      (line  21)
* link completion:                       Managing links.      (line  23)
* links, external:                       External Links.      (line   6)
* links, internal:                       Internal Links.      (line   6)
* links, returning to:                   Managing links.      (line  64)
* lists, hand-formatted:                 HTML formatting.     (line   9)
* lists, ordered:                        Plain Lists.         (line   6)
* lists, plain:                          Plain Lists.         (line   6)
* logging, of progress:                  Progress Logging.    (line   6)
* maintainer:                            Feedback.            (line   6)
* make-indirect-buffer:                  FAQ.                 (line  13)
* mark ring:                             Managing links.      (line  60)
* marking characters, tables:            Advanced features.   (line  34)
* matching, of tags:                     Matching headline tags.
                                                              (line   6)
* matching, tags:                        Tags.                (line   6)
* MH-E links:                            External Links.      (line   6)
* minor mode for tables:                 orgtbl-mode.         (line   6)
* mode, for calc:                        Formula syntax.      (line  32)
* motion, between headlines:             Motion.              (line   6)
* name, of column or field:              Formula syntax.      (line  24)
* named field formula:                   Named-field formulas.
                                                              (line   6)
* names as TODO keywords:                TODO types.          (line   6)
* occur, command:                        Sparse trees.        (line   6)
* option keyword completion:             Completion.          (line   6)
* options, for customization:            Customization.       (line   6)
* options, for export:                   Export options.      (line   6)
* ordered lists:                         Plain Lists.         (line   6)
* org-agenda, command:                   Weekly/Daily Agenda. (line   9)
* org-mode, turning on:                  Installation and Activation.
                                                              (line  28)
* orgtbl-mode:                           orgtbl-mode.         (line   6)
* outline tree:                          Headlines.           (line   6)
* outline-mode:                          Outlines.            (line   6)
* outlines:                              Outlines.            (line   6)
* overview, global visibility state:     Visibility cycling.  (line  17)
* packages, interaction with other:      Interaction.         (line   6)
* pasting, of subtrees:                  Structure editing.   (line   6)
* per file keywords:                     Per file keywords.   (line   6)
* plain lists:                           Plain Lists.         (line   6)
* planner.el:                            Interaction.         (line  49)
* printing sparse trees:                 Sparse trees.        (line  37)
* priorities:                            Priorities.          (line   6)
* priorities, of agenda items:           Sorting of agenda items.
                                                              (line   6)
* progress logging:                      Progress Logging.    (line   6)
* promotion, of subtrees:                Structure editing.   (line   6)
* quoted html tags:                      Export options.      (line  21)
* ranges, time:                          Time stamps.         (line   6)
* recomputing table fields:              Column formulas.     (line  27)
* region, active <1>:                    HTML export.         (line  10)
* region, active <2>:                    ASCII export.        (line   6)
* region, active <3>:                    Built-in table editor.
                                                              (line 166)
* region, active:                        Structure editing.   (line  45)
* remember.el <1>:                       Interaction.         (line  31)
* remember.el:                           Remember.            (line   6)
* RMAIL links:                           External Links.      (line   6)
* SCHEDULED keyword:                     Time stamps.         (line  39)
* scheduling:                            Time stamps.         (line   6)
* search option in file links:           Search Options.      (line   6)
* section-numbers:                       Export options.      (line  21)
* SHELL links:                           External Links.      (line   6)
* show all, command:                     Visibility cycling.  (line  23)
* show all, global visibility state:     Visibility cycling.  (line  17)
* show hidden text:                      Visibility cycling.  (line   6)
* single file summary:                   Timeline.            (line   6)
* sorting, of agenda items:              Sorting of agenda items.
                                                              (line   6)
* sparse tree, for deadlines:            Creating timestamps. (line  37)
* sparse tree, for TODO:                 TODO basics.         (line  18)
* sparse tree, tag based:                Tags.                (line   6)
* sparse trees:                          Sparse trees.        (line   6)
* spreadsheet capabilities:              Table calculations.  (line   6)
* storing links:                         Managing links.      (line   9)
* structure editing:                     Structure editing.   (line   6)
* structure of document:                 Document Structure.  (line   6)
* subtree visibility states:             Visibility cycling.  (line  10)
* subtree, cut and paste:                Structure editing.   (line   6)
* subtree, subtree visibility state:     Visibility cycling.  (line  10)
* subtrees, cut and paste:               Structure editing.   (line   6)
* summary:                               Summary.             (line   6)
* syntax, of formulas:                   Formula syntax.      (line   6)
* table editor, builtin:                 Built-in table editor.
                                                              (line   6)
* table editor, table.el:                table.el.            (line   6)
* table of contents:                     Export options.      (line  21)
* table, empty template:                 FAQ.                 (line  51)
* table.el <1>:                          Interaction.         (line   8)
* table.el:                              table.el.            (line   6)
* tables <1>:                            Export options.      (line  21)
* tables:                                Tables.              (line   6)
* tables, export to HTML:                HTML formatting.     (line  24)
* tag completion:                        Completion.          (line   6)
* tags:                                  Tags.                (line   6)
* tags view:                             Matching headline tags.
                                                              (line   6)
* TeX interpretation:                    HTML formatting.     (line  15)
* TeX macros:                            Export options.      (line  21)
* TeX symbol completion:                 Completion.          (line   6)
* TeX-like syntax for sub- and superscripts: Export options.  (line  21)
* thanks:                                Acknowledgments.     (line   6)
* time stamps:                           Time stamps.         (line   6)
* time, reading in minibuffer:           Creating timestamps. (line  67)
* time-sorted view:                      Timeline.            (line   6)
* timeline, single file:                 Timeline.            (line   6)
* timerange:                             Time stamps.         (line  18)
* timestamp:                             Time stamps.         (line  12)
* timestamps, creating:                  Creating timestamps. (line   6)
* TODO items:                            TODO items.          (line   6)
* TODO keywords completion:              Completion.          (line   6)
* TODO list, global:                     Global TODO list.    (line   6)
* TODO types:                            TODO types.          (line   6)
* TODO workflow:                         Workflow states.     (line   6)
* transient-mark-mode <1>:               HTML export.         (line  10)
* transient-mark-mode <2>:               ASCII export.        (line   6)
* transient-mark-mode <3>:               Built-in table editor.
                                                              (line 166)
* transient-mark-mode:                   Structure editing.   (line  45)
* trees, sparse:                         Sparse trees.        (line   6)
* trees, visibility:                     Visibility cycling.  (line   6)
* tty keybindings:                       TTY keys.            (line   6)
* types as TODO keywords:                TODO types.          (line   6)
* underlined text:                       HTML formatting.     (line  13)
* URL links:                             External Links.      (line   6)
* URL, paste into buffer:                FAQ.                 (line  19)
* USENET links:                          External Links.      (line   6)
* variables, for customization:          Customization.       (line   6)
* vectors, in table calculations:        Formula syntax.      (line  21)
* visibility cycling:                    Visibility cycling.  (line   6)
* visible text, printing:                Sparse trees.        (line  37)
* VM links:                              External Links.      (line   6)
* WANDERLUST links:                      External Links.      (line   6)
* workflow states as TODO keywords:      Workflow states.     (line   6)


File: org,  Node: Key Index,  Prev: Index,  Up: Top

11 Key Index
************

 [index ]
* Menu:

* +:                                     Agenda commands.     (line 116)
* ,:                                     Agenda commands.     (line 108)
* -:                                     Agenda commands.     (line 122)
* .:                                     Agenda commands.     (line  87)
* ::                                     Agenda commands.     (line 105)
* <:                                     Creating timestamps. (line  74)
* <left>:                                Agenda commands.     (line  84)
* <RET> <1>:                             Agenda commands.     (line  39)
* <RET> <2>:                             Creating timestamps. (line  99)
* <RET>:                                 Built-in table editor.
                                                              (line  65)
* <right>:                               Agenda commands.     (line  79)
* <SPC>:                                 Agenda commands.     (line  28)
* <TAB> <1>:                             Agenda commands.     (line  35)
* <TAB> <2>:                             Built-in table editor.
                                                              (line  58)
* <TAB> <3>:                             Plain Lists.         (line  37)
* <TAB>:                                 Visibility cycling.  (line  10)
* > <1>:                                 Agenda commands.     (line 138)
* >:                                     Creating timestamps. (line  75)
* C:                                     Agenda commands.     (line 167)
* c:                                     Agenda commands.     (line 152)
* C-#:                                   Built-in table editor.
                                                              (line 156)
* C-,:                                   Agenda files.        (line  18)
* C-c !:                                 Creating timestamps. (line  20)
* C-c $:                                 Archiving.           (line   9)
* C-c %:                                 Managing links.      (line  60)
* C-c &:                                 Managing links.      (line  64)
* C-c ' <1>:                             Editing/debugging formulas.
                                                              (line  20)
* C-c ':                                 Built-in table editor.
                                                              (line 145)
* C-c *:                                 Built-in table editor.
                                                              (line 149)
* C-c +:                                 Built-in table editor.
                                                              (line 166)
* C-c ,:                                 Priorities.          (line  18)
* C-c -:                                 Built-in table editor.
                                                              (line  93)
* C-c .:                                 Creating timestamps. (line  10)
* C-c /:                                 Sparse trees.        (line  15)
* C-c ::                                 HTML export.         (line  17)
* C-c ;:                                 Comment lines.       (line  12)
* C-c <:                                 Creating timestamps. (line  24)
* C-c =:                                 Built-in table editor.
                                                              (line 136)
* C-c >:                                 Creating timestamps. (line  28)
* C-c ? <1>:                             Editing/debugging formulas.
                                                              (line  20)
* C-c ?:                                 Built-in table editor.
                                                              (line 162)
* C-c [:                                 Agenda files.        (line  12)
* C-c \:                                 Tags.                (line  42)
* C-c ]:                                 Agenda files.        (line  15)
* C-c ^:                                 Built-in table editor.
                                                              (line  97)
* C-c a a:                               Weekly/Daily Agenda. (line   9)
* C-c a C:                               Agenda dispatcher.   (line  30)
* C-c a M:                               Matching headline tags.
                                                              (line  15)
* C-c a m:                               Matching headline tags.
                                                              (line  10)
* C-c a M:                               Tags.                (line  49)
* C-c a m:                               Tags.                (line  45)
* C-c a T:                               Global TODO list.    (line  15)
* C-c a t <1>:                           Global TODO list.    (line   9)
* C-c a t:                               TODO basics.         (line  25)
* C-c C-a:                               Visibility cycling.  (line  23)
* C-c C-b:                               Motion.              (line  15)
* C-c C-c <1>:                           table.el.            (line   6)
* C-c C-c <2>:                           Editing/debugging formulas.
                                                              (line  16)
* C-c C-c <3>:                           Built-in table editor.
                                                              (line  43)
* C-c C-c <4>:                           Plain Lists.         (line  61)
* C-c C-c:                               Tags.                (line  33)
* C-c C-d:                               Creating timestamps. (line  36)
* C-c C-f:                               Motion.              (line  12)
* C-c C-j:                               Motion.              (line  21)
* C-c C-l:                               Managing links.      (line  23)
* C-c C-n:                               Motion.              (line   8)
* C-c C-o <1>:                           Creating timestamps. (line  32)
* C-c C-o:                               Managing links.      (line  35)
* C-c C-p:                               Motion.              (line   9)
* C-c C-q <1>:                           Editing/debugging formulas.
                                                              (line  20)
* C-c C-q:                               Built-in table editor.
                                                              (line 120)
* C-c C-r:                               Timeline.            (line  13)
* C-c C-s:                               Creating timestamps. (line  46)
* C-c C-t:                               TODO basics.         (line  13)
* C-c C-u:                               Motion.              (line  18)
* C-c C-v:                               TODO basics.         (line  18)
* C-c C-w:                               Creating timestamps. (line  37)
* C-c C-x a:                             ASCII export.        (line   6)
* C-c C-x b:                             HTML export.         (line  11)
* C-c C-x c:                             iCalendar export.    (line  20)
* C-c C-x C-c:                           Agenda commands.     (line 174)
* C-c C-x C-i:                           iCalendar export.    (line  15)
* C-c C-x C-w <1>:                       Built-in table editor.
                                                              (line 109)
* C-c C-x C-w:                           Structure editing.   (line  31)
* C-c C-x C-y <1>:                       Built-in table editor.
                                                              (line 113)
* C-c C-x C-y:                           Structure editing.   (line  37)
* C-c C-x h:                             HTML export.         (line  10)
* C-c C-x i:                             iCalendar export.    (line  13)
* C-c C-x M-w <1>:                       Built-in table editor.
                                                              (line 106)
* C-c C-x M-w:                           Structure editing.   (line  34)
* C-c C-x t:                             HTML export.         (line  14)
* C-c C-x v:                             Sparse trees.        (line  37)
* C-c C-y:                               Creating timestamps. (line  62)
* C-c l:                                 Managing links.      (line   9)
* C-c |:                                 Built-in table editor.
                                                              (line 182)
* C-c ~:                                 table.el.            (line  18)
* C-u C-c .:                             Creating timestamps. (line  16)
* C-u C-c =:                             Built-in table editor.
                                                              (line 140)
* D:                                     Agenda commands.     (line  64)
* d:                                     Agenda commands.     (line  61)
* f:                                     Agenda commands.     (line  42)
* g:                                     Agenda commands.     (line  68)
* H:                                     Agenda commands.     (line 171)
* i:                                     Agenda commands.     (line 143)
* l:                                     Agenda commands.     (line  47)
* L:                                     Agenda commands.     (line  32)
* M:                                     Agenda commands.     (line 159)
* M-<down>:                              Built-in table editor.
                                                              (line  83)
* M-<left> <1>:                          Built-in table editor.
                                                              (line  73)
* M-<left>:                              Structure editing.   (line  13)
* M-<RET> <1>:                           Plain Lists.         (line  42)
* M-<RET>:                               Structure editing.   (line   6)
* M-<right> <1>:                         Built-in table editor.
                                                              (line  73)
* M-<right>:                             Structure editing.   (line  16)
* M-<TAB> <1>:                           Completion.          (line  10)
* M-<TAB> <2>:                           Per file keywords.   (line  17)
* M-<TAB>:                               Tags.                (line  28)
* M-<up>:                                Built-in table editor.
                                                              (line  83)
* M-S-<down> <1>:                        Built-in table editor.
                                                              (line  90)
* M-S-<down> <2>:                        Plain Lists.         (line  46)
* M-S-<down>:                            Structure editing.   (line  28)
* M-S-<left> <1>:                        Creating timestamps. (line  96)
* M-S-<left> <2>:                        Built-in table editor.
                                                              (line  77)
* M-S-<left> <3>:                        Plain Lists.         (line  52)
* M-S-<left>:                            Structure editing.   (line  19)
* M-S-<RET>:                             Structure editing.   (line  10)
* M-S-<right> <1>:                       Creating timestamps. (line  93)
* M-S-<right> <2>:                       Built-in table editor.
                                                              (line  80)
* M-S-<right> <3>:                       Plain Lists.         (line  52)
* M-S-<right>:                           Structure editing.   (line  22)
* M-S-<up> <1>:                          Built-in table editor.
                                                              (line  87)
* M-S-<up> <2>:                          Plain Lists.         (line  46)
* M-S-<up>:                              Structure editing.   (line  25)
* mouse-1:                               Creating timestamps. (line  78)
* mouse-2 <1>:                           Agenda commands.     (line  35)
* mouse-2:                               Managing links.      (line  35)
* mouse-3 <1>:                           Agenda commands.     (line  28)
* mouse-3:                               Managing links.      (line  57)
* n:                                     Agenda commands.     (line  19)
* o:                                     Agenda commands.     (line  55)
* P:                                     Agenda commands.     (line 113)
* p:                                     Agenda commands.     (line  20)
* q:                                     Agenda commands.     (line 181)
* r <1>:                                 Agenda commands.     (line  72)
* r:                                     Global TODO list.    (line  21)
* S:                                     Agenda commands.     (line 162)
* S-<down> <1>:                          Agenda commands.     (line 122)
* S-<down> <2>:                          Creating timestamps. (line  54)
* S-<down>:                              Priorities.          (line  25)
* S-<left> <1>:                          Agenda commands.     (line 134)
* S-<left>:                              Creating timestamps. (line  49)
* S-<RET>:                               Built-in table editor.
                                                              (line 171)
* S-<right> <1>:                         Agenda commands.     (line 126)
* S-<right>:                             Creating timestamps. (line  49)
* S-<TAB> <1>:                           Built-in table editor.
                                                              (line  62)
* S-<TAB>:                               Visibility cycling.  (line  17)
* S-<up> <1>:                            Agenda commands.     (line 116)
* S-<up> <2>:                            Creating timestamps. (line  54)
* S-<up>:                                Priorities.          (line  25)
* T:                                     Agenda commands.     (line 100)
* t:                                     Agenda commands.     (line  96)
* w:                                     Agenda commands.     (line  58)
* x:                                     Agenda commands.     (line 184)



Tag Table:
Node: Top959
Node: Introduction6760
Node: Summary7074
Node: Installation and Activation9185
Node: Feedback10855
Node: Document Structure11629
Node: Outlines12471
Node: Headlines13131
Node: Visibility cycling13560
Node: Motion14747
Node: Structure editing15531
Node: Archiving17248
Node: Sparse trees18108
Ref: Sparse trees-Footnote-120130
Ref: Sparse trees-Footnote-220222
Node: Tags20336
Node: Plain Lists23428
Ref: Plain Lists-Footnote-126169
Node: Tables26273
Node: Built-in table editor26760
Node: Table calculations34295
Node: Formula syntax35478
Ref: Formula syntax-Footnote-138258
Node: Column formulas38557
Node: Advanced features40319
Node: Named-field formulas43580
Node: Editing/debugging formulas44220
Node: Appetizer45997
Node: orgtbl-mode47099
Node: table.el47589
Node: Hyperlinks48566
Node: Internal Links49132
Node: Radio targets50881
Node: CamelCase links51596
Node: External Links52169
Ref: External Links-Footnote-154095
Node: Managing links54234
Node: Search Options57509
Ref: Search Options-Footnote-158822
Node: Remember58903
Ref: Remember-Footnote-161689
Node: TODO items61811
Node: TODO basics62734
Node: Progress Logging64246
Node: TODO extensions65033
Node: Workflow states65721
Node: TODO types66588
Ref: TODO types-Footnote-168254
Node: Per file keywords68336
Ref: Per file keywords-Footnote-169789
Node: Priorities70017
Node: Timestamps71226
Node: Time stamps71555
Node: Creating timestamps73566
Node: Agenda Views76580
Node: Agenda files78107
Ref: Agenda files-Footnote-179031
Node: Agenda dispatcher79223
Node: Weekly/Daily Agenda81349
Node: Categories82476
Node: Time-of-day specifications83041
Node: Calendar/Diary integration85017
Node: Sorting of agenda items86393
Node: Global TODO list87225
Node: Matching headline tags88637
Node: Timeline89580
Node: Agenda commands90453
Node: Exporting95626
Node: ASCII export96198
Node: HTML export97033
Node: HTML formatting98149
Node: Export options99781
Node: Comment lines101973
Node: iCalendar export102443
Node: Miscellaneous104238
Node: Completion104787
Node: Customization105781
Node: FAQ106220
Node: Interaction110907
Node: TTY keys113795
Node: Bugs115396
Node: Acknowledgments117033
Node: Index119565
Node: Key Index139477

End Tag Table
