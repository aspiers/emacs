This is emacs-w3m.info, produced by makeinfo version 4.0b from
emacs-w3m.texi.

INFO-DIR-SECTION GNU Emacs Lisp
START-INFO-DIR-ENTRY
* Emacs-w3m: (emacs-w3m).  An Emacs interface to w3m
END-INFO-DIR-ENTRY

   This file documents emacs-w3m, an Emacs interface to w3m.

   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005 TSUCHIYA Masatoshi

   This edition is for emacs-w3m version 1.4.4.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License, Version 2 or any
later version published by the Free Software Foundation.

   This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

   You should have received a copy of the GNU General Public License
along with this document; if not, you can either send email to this
document's maintainer or write to: The Free Software Foundation, Inc.;
59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.


File: emacs-w3m.info,  Node: Creating and killing buffers,  Next: Moving across buffers,  Up: Working with buffers

Creating and killing buffers
----------------------------

   It is sometimes useful to just create a new buffer without opening a
web page in it.  This operation is called "creating a twin copy" of a
buffer, in emacs-w3m lingo.  It will simply create a new buffer whose
contents are identical to the currently active buffer.

   The opposite of this is closing buffers: you can just close one
buffer (because you're not interested in its contents anymore) or you
can decide to close all buffers but the current one.  Emacs-w3m lets
you do this with the following commands:

`C-c C-t'
     Create an identical copy of the currently active buffer, under a
     new name.  This is used to start a new session without loading a
     web page in the new buffer (`w3m-copy-buffer').

`C-c C-w'
     Close the current emacs-w3m buffer (`w3m-delete-buffer').

`C-c M-w'
     Close all emacs-w3m buffers, but the active one
     (`w3m-delete-other-buffers').


File: emacs-w3m.info,  Node: Moving across buffers,  Next: Selecting buffers,  Prev: Creating and killing buffers,  Up: Working with buffers

Moving across buffers
---------------------

   The commands you will probably use most often are those who allow you
to go to an adjacent buffer; that is a buffer just "after" or "before"
the current one.  The meaning of this will be obvious if you use tabs:
the next buffer is the one just after the active one, on the right, and
the previous buffer is the one on the left.  However, XEmacs displays
tabs in random order unfortunately, so you need to pay attention to the
number which is displayed in each tab in order to know what is the
adjacent buffer if you are using XEmacs.  The key bindings for these
commands are `C-c C-p' and `C-c C-n'.

   These commands understand the numeric argument convention, i.e. if
you call them with a number N as argument, you will be taken N buffers
away from the current one.  For example, to go two buffers on the right
from the current position, use `2 C-c C-n'(1).

`C-c C-p'
     Move to the previous emacs-w3m buffer.  This is usually the next
     buffer to the left in the tabs line under Emacs 21 and later.  If
     called with a numeric argument N, move N buffers to the previous
     (`w3m-previous-buffer').

`C-c C-n'
     Move to the next emacs-w3m buffer.  This is usually the next
     buffer to the right in the tabs line under Emacs 21 and later.  If
     called with a numeric argument N, move N buffers to the next
     (`w3m-next-buffer').

   Also note that if these commands don't fit you well despite our
efforts, you might find what you need in "generalist" buffer management
packages such as ibuffer or iswitchb--since emacs-w3m buffers are
regular Emacs buffers, they will work fine too.

   ---------- Footnotes ----------

   (1) You can use `C-u 2 C-c C-n' instead of `2 C-c C-n' as usual.
But keep in mind all numeric keys and minus-sign are assigned to the
numeric prefix arguments in emacs-w3m buffers.


File: emacs-w3m.info,  Node: Selecting buffers,  Prev: Moving across buffers,  Up: Working with buffers

Selecting buffers from a list
-----------------------------

   There are two ways to select emacs-w3m buffers from a list.  The
first one is a minibuffer-based interface, called with `C-c C-a'.  You
can choose the buffer you want to display using the `M-p' and `M-n'
keys (or the "up" and "down" arrow keys), they will make you cycle
through the list.  You can also edit the prompt and type the title of an
existing web page, using `TAB' for completion.  For example, if you
have a "Google Search" page opened, you can type "Goo" then hit `TAB'
and the page title will be completed.  After the page name, the buffer
name is given (between brackets).  Then use `RET' to switch to the
buffer you have chosen.

   The second and more sophisticated interface is called the emacs-w3m
buffer list, it is invoked with `C-c C-s'.  It shows you the list of
all opened buffers in a separate window (either a vertical or a
horizontal window--`C-c C-s' toggles between the two modes) and allows
you to view the buffers in real-time: when you move the point in the
buffer list, the buffer under point is displayed in the main window,
which allows you to have direct visual feedback of the buffer you're
switching to.

   To move in the buffer list, you can use the `p' and `n' keys (or the
arrow keys).  In the buffer list, `DEL' and `SPC' allow you to scroll
the buffer displayed in the main window, which is handy if you want to
check that you're seeing the right buffer.  To select the buffer under
point, you can use the `RET' key, in which case the buffer list will be
buried, or the `w' key, in which case the buffer list will remain
visible and the focus given to the main window.

   You can also close and create buffers from this menu, using the same
bindings as the one used in regular buffers (*note Creating and killing
buffers::).

   Finally, the `?' key shows a short help, `g' refreshes the list and
the `q' key exits the buffer list, not changing the active buffer.

`C-c C-a'
     Prompt for a buffer name in the minibuffer.  `M-p' and `M-n' cycle
     through the list of existing buffers and `TAB' completes
     (`w3m-switch-buffer').

`C-c C-s'
     Show the buffer list in a separate window (`w3m-select-buffer').
     In this window, `C-c C-s' toggles between horizontal and vertical
     modes, `RET' selects the buffer under point and buries the buffer
     list, `w' selects the buffer under point and gives it the focus,
     `n', `p' and the arrow keys can be used to move down or up.


File: emacs-w3m.info,  Node: Downloading,  Next: Submitting Forms,  Prev: Working with buffers,  Up: Basic Usage

Downloading a file
==================

   It is possible to download (i.e. fetch, but not display) any web
page or file with emacs-w3m: just put the point on the link you want to
download and hit `d'.  You will be prompted for a filename under which
to save the file locally, by default it will be the name of the file on
the remote server.  Confirm with `RET'.  The download will be
asynchronous and not block your Emacs session, you can continue your
emacs-w3m browsing in another buffer if you want.

   Please note that this download mechanism uses w3m to download things,
you might want to use the more powerful wget downloader instead.  Have a
look at our friend project "emacs-wget", its homepage is at
`http://pop-club.hp.infoseek.co.jp/emacs/emacs-wget/'.

`d'
     Download the file or page pointed by the link under point
     (`w3m-download-this-url').


File: emacs-w3m.info,  Node: Submitting Forms,  Next: HTML File Information,  Prev: Downloading,  Up: Basic Usage

Filling in HTML forms
=====================

   These emacs-w3m commands let you move between forms and fill in
fields, using simple key bindings and optionally prompting you for
values in Emacs windows or in the minibuffer.

   The main key binding to remember is `RET'.  It has different
meanings, depending on the thing under point: for textareas, you will be
prompted for a value in the minibuffer.  For select tags, you will be
given a list of choices in an electric Emacs window (you can move using
the arrow keys, and pick one with the `RET' key).  For radio and
checkbox buttons, the `RET' key selects one of the elements.

   When in the minibuffer or in the electric window, you can cancel with
the `C-c C-q' sequence.  To submit the form, use `C-c C-c'.

`]'
     Jump to the next form (`w3m-next-form').

`['
     Jump to the previous form (`w3m-previous-form').

`C-c C-c'
     Submit form at point (`w3m-submit-form').

`RET'
     Edit the value of the form item under point.

`RET (w3m-form-*-keymap)'
     Accept the value.

`C-c C-q (w3m-form-*-keymap)'
     Quit editing the form item, leaving changes.

   Unless `w3m-form-use-textarea-backup' is set to `nil', emacs-w3m
stores the text you input in textareas in backup files for later reuse.
When you start editing a form and there is backup text available, you
will be asked whether you want to use it or not.  Files to save text
are stored in the directory specified by the
`w3m-form-textarea-directory' variable.


File: emacs-w3m.info,  Node: HTML File Information,  Prev: Submitting Forms,  Up: Basic Usage

Support for web page editing and hacking
========================================

   For those who usually use Emacs to write documentation or programs,
it's very convenient to be able to browse the web in the same Emacs
session.  For example, if you are editing a HTML file in Emacs, you can
preview it without launching an external browser.  You can also quickly
copy sample code from technical documentation during a programming
marathon...

   How about the opposite?  (That is, being able to edit the source of a
web page in a web browser.)  Wouldn't that be cool?  Imagine you found
an error in your document after previewing it in emacs-w3m; you probably
want to fix it right away.  Or if you are a programmer specialized in
web technology, sometimes you might want to see the raw HTML file for
the current web page... especially if you are the author of a Shimbun
module (*note Shimbun Basics::).

   It is usually possible to switch to an Emacs buffer visiting an HTML
file by using the buffer name, but emacs-w3m adds a specific keybinding
for this.  Emacs-w3m knows the URL of the web page it is visiting, so
why not take advantage of this?

`\'
     Display the current web page in the raw HTML
     format(`w3m-view-source').

`='
     Show the information about currently displayed web page. It
     includes title, URL, document type, last modified
     date(`w3m-view-header').

`E'
     Edit the local file pointed by URL of current
     page(`w3m-edit-current-url').

`e'
     Edit the local file pointed by URL under
     point(`w3m-edit-this-url').

`M'
     Launch an external browser (other than emacs-w3m) and display the
     same web page as currently displayed in
     emacs-w3m(`w3m-view-url-with-external-browser').  The external
     browser to be used is defined by the variable
     `w3m-content-type-alist', depending on the kind of URL.

   The (*note Tips::) section gives more examples on how to integrate
emacs-w3m with other commands and Emacs subsystems.


File: emacs-w3m.info,  Node: Pretty Good Features,  Next: Customizable Variables,  Prev: Basic Usage,  Up: Top

Pretty good features
********************

* Menu:

* Using Search Engines::        Convenient ways to search the web
* Grouping URLs::               Visiting several web pages in one URL
* Weather Information::         It will be fine tomorrow
* Using Antenna::               Raise your antenna
* Showing Directory Tree::      Showing the tree structure of local directories
* Viewing Perl Documents::      Viewing Perl Documents
* Using Namazu::                Searching files with Namazu
* Octet::                       Viewing data in various octal form


File: emacs-w3m.info,  Node: Using Search Engines,  Next: Grouping URLs,  Up: Pretty Good Features

Convenient ways to search the web
=================================

   Emacs-w3m comes with advanced features related to search engines,
they are accessible through two interfaces:

   * The regular interface, invoked by the `S' key in any emacs-w3m
     buffer.  It is a simple interactive way to choose which search
     engine to use and input a search term; see *Note The Search
     Interface::.

   * The Quicksearch interface: it is a faster (yet more complicated)
     way to use search engines, by going to specially crafted URLs.
     For more information about this feature, see *Note Quick
     Searching::.

* Menu:

* The Search Interface::        How to search with emacs-w3m
* Quick Searching::             An alternative (and fast) way to search the web
* Adding New Search Engines::   Using your favorite engines


File: emacs-w3m.info,  Node: The Search Interface,  Next: Quick Searching,  Up: Using Search Engines

How to search with emacs-w3m
----------------------------

   You can fire up the regular search interface by using the `S' key in
an emacs-w3m buffer (provided you use the default keymap).  You will see
a prompt in the minibuffer, asking for a search term.  Type one or
several words at the prompt, then hit `RET'.  The result page of your
search in the engine appears, you can then browse the results, just as
if you had used the normal web based entry point to the engine.

   You probably noticed that you have not been given a chance to choose
which engine you want to search with.  By default, emacs-w3m will use
the Google search engine, you can change this behavior by customizing
the `w3m-search-default-engine' variable (see *Note Customizable
Variables::), or you can specify the search engine each time you use the
command.

   To specify which engine to use, you have to give the command a prefix
argument (usually, this means hitting `C-u' before the command, e.g.
`C-u S').  Emacs-w3m will prompt you for an engine, you can choose one
by typing its name (completion is also available with the <TAB> key).
Once you have made your choice, hit the `RET' key.  You can then type
your search term, hit `RET', and you will see the search results.

`S'
     Begin a new search.  If called with a prefix argument, prompt for
     the engine to use (`w3m-search').


File: emacs-w3m.info,  Node: Quick Searching,  Next: Adding New Search Engines,  Prev: The Search Interface,  Up: Using Search Engines

An alternative (and fast) way to search the web
-----------------------------------------------

   If you're a "Web Power User" (and since you're reading this, you
probably are), you need a quick and efficient way to perform searches.
The Quick Searching feature is one.

   What does it do?  It lets you launch web searches by simply going to
a special URL such as `gg:emacs'.  The advantages of this mode of
operation are:

   * It's fast.  You just have to type a URL to choose the engine and
     the search word(s), in one go.

   * It's convenient.  With this feature, you can easily open a new
     emacs-w3m tab or window, and launch a search in it, using for
     example, the `G' key to open a URL in a new window, and going to a
     Quicksearch URL.  You can also bookmark searches just by
     bookmarking the special Quicksearch URL.

   * It works with the grouping feature.  You can launch two searches
     at the same time, with a URL like `group:gg:emacs&ya:w3m'.  This
     would for instance launch a search for "emacs" on Google and for
     "w3m" on Yahoo!.  *Note Grouping URLs::.

   Using it is very simple: suppose you want to search for the word
"gnu" on Google.  Hit `g' to go to a new URL, and type "gg:gnu".  The
first part of this expression, "gg" indicates that we want to use the
Google search engine.  The second term is the word we will be searching
for.  The prefix and the search term must be separated by a colon.  Hit
`RET', and you will see the results of your search.  Please note that
you can input several words by separating them with spaces (to type a
space in the minibuffer, hit `C-q' first, e.g. `C-q <SPC>').

   The default configuration of emacs-w3m includes several prefixes you
can use, they are defined in the `w3m-uri-replace-alist' variable.
There's for example "gg" for Google, "ggg" for Google Groups, "ya" for
Yahoo!, "al" for Altavista, to name a few.  You can also add prefixes
for the search engines you define, *Note Adding New Search Engines::.

   Instead of prefixes, you can also use full engine names in
Quicksearch URLs, such as "google" or "yahoo".  These names are defined
in the `w3m-search-engine-alist' variable.


File: emacs-w3m.info,  Node: Adding New Search Engines,  Prev: Quick Searching,  Up: Using Search Engines

Using your favorite engines
---------------------------

   Emacs-w3m has a number of built-in search engines you can use.  What
if you want to use your favorite search engine and it's not listed in
the known search engines?  You have to add it to the list of search
engines, and it's quite easy:

  1. First, you have to find what's the entry point of the search
     engine you want to add, for example:

     `http://my.searchengine.com/?query=foobar'

     where foobar is the term you want to search for.

  2. Once you have this information, add this to your `~/.emacs-w3m'
     file:

          (eval-after-load "w3m-search"
            '(add-to-list 'w3m-search-engine-alist
                          '("My engine"
                            "http://my.searchengine.com/?query=%s"
                            nil)))

     Replace the first field "My engine" with the description of your
     engine, the second field with the entry point (the `%s' is
     important, it will be replaced by the search term when you issue
     the search), and the third field is the encoding to use, `nil' or
     omitting this field means to use the value of
     `w3m-default-coding-system' as a regular encoding.

     For English search engines, you rarely have to worry about this.
     However, for some Japanese search engines, you may need to specify
     something (e.g. `euc-japan') there.

  3. You can now use this engine to search, using the normal `S' key in
     emacs-w3m.  If you use this engine often, you can also add it to
     the Quicksearch (see *Note Quick Searching::) engines and give it
     a small prefix, by adding this to your `~/.emacs-w3m' file instead:

          (eval-after-load "w3m-search"
            '(progn
               (add-to-list 'w3m-search-engine-alist
                            '("My engine"
                              "http://my.searchengine.com/?query=%s"
                              nil))
               (add-to-list 'w3m-uri-replace-alist
                            '("\\`my:" w3m-search-uri-replace "My engine"))))

     This way you can also use a URL like `my:foobar' to search for the
     term "foobar" with your engine.


File: emacs-w3m.info,  Node: Grouping URLs,  Next: Weather Information,  Prev: Using Search Engines,  Up: Pretty Good Features

Visiting several web pages in one URL
=====================================

   Emacs-w3m can manipulate "group URLs": special URLs that contain
several real URLs.  When you open these group URLs, emacs-w3m will open
one buffer for each URL in the group, allowing you to open several pages
in one go.

   To build group URLs, you just have to put together (i.e. concatenate)
all the addresses you want to open, separating them with the ampersand
symbol (that's "&"), and prefixing the grouped URLs with "group:".  For
example, suppose you want to visit the GNU Project's homepage,
`http://www.gnu.org/', and the Savannah homepage,
`http://savannah.nongnu.org/': the group URL would be

   `group:http://www.gnu.org/&http://savannah.nongnu.org/'

   Since this syntax can be quite hard to use on a daily basis, this
feature will be most useful when used with very short URLs (Quicksearch
URLs for example, see *Note Quick Searching::); or in non-interactive
contexts.


File: emacs-w3m.info,  Node: Weather Information,  Next: Using Antenna,  Prev: Grouping URLs,  Up: Pretty Good Features

It will be fine tomorrow
========================


File: emacs-w3m.info,  Node: Using Antenna,  Next: Showing Directory Tree,  Prev: Weather Information,  Up: Pretty Good Features

Raise your antenna
==================

   Antenna is a tool to keep track of changes in web pages.  Using
Antenna, you can periodically check if particular pages have been
updated, and if they haven't, know the last time you saw them.

   You can start Antenna using the `A' key in any emacs-w3m buffer.
Alternatively, you can go to the special URL `about://antenna/'; it
does the same thing.

* Menu:

* Setting up Antenna::          How to add your web sites to Antenna
* Daily web tracking::          Tracking changes with Antenna


File: emacs-w3m.info,  Node: Setting up Antenna,  Next: Daily web tracking,  Up: Using Antenna

How to add your web sites to Antenna
------------------------------------

   If you want to add the visiting web site to Antenna, type the `+'
key.  You will be taken to the customization buffer of
`w3m-antenna-sites', with all fields already set up for you.  You just
have to hit the buttons "Save for future sessions" and "Finish".

`+'
     Add a URL to the Antenna database.  If called with a prefix
     argument, ask for a URL instead of adding the current page
     (`w3m-antenna-add-current-url').


File: emacs-w3m.info,  Node: Daily web tracking,  Prev: Setting up Antenna,  Up: Using Antenna

Tracking changes with Antenna
-----------------------------

   On the Antenna page, you will see two sections: one called "Updated"
and another called "Visited".  In the "Updated" section, you will find
websites which have changed since the last Antenna update, and in the
"Visited" section, the websites which haven't.  In each section, each
line stands for one website of the Antenna database, and has the
following structure:

   `  * 2002/12/15 16:43  (T)  My website'

   The first part is the last time the website was updated, or if this
information is not available, the last time Antenna noticed a change in
this page.

   The `(T)' stands for "Time", it means that the change was detected
because the last modification time of that page has changed since the
last Antenna update.  Another possible value here is `S' (for "Size"),
which means that the change has been detected because the size of the
page has changed.

   The last part of this line is the title you gave to this website when
you added it to the database.

   Please note that the Antenna database doesn't get automatically
updated, you have to update it each time you want to check if the sites
have changed, either by hitting `R' in the Antenna page, or by passing a
prefix argument to the command (start Antenna with `C-u A', for
example).

`A'
     Visit the Antenna page.  If called with a prefix argument, update
     the Antenna database before displaying it (`w3m-antenna').


File: emacs-w3m.info,  Node: Showing Directory Tree,  Next: Viewing Perl Documents,  Prev: Using Antenna,  Up: Pretty Good Features

Showing the tree structure of local directories
===============================================

   Using the `w3m-dtree' command, you can display a tree of all
subdirectories of a local directory, and browse it like a regular web
page.  The emacs-w3m buffer you get when you use this feature is very
similar to the output of the external "tree" utility, hence the name.
Emacs-w3m adds a bonus: if you call the command with a prefix argument,
it will display files as well, turning emacs-w3m into a full-featured
file browser.

   Here is an example of what an emacs-w3m dtree run looks like:

     /home/romain/.elisp/emacs-w3m/
      |-CVS/
      |-attic/
      |  +-CVS/
      |-autom4te.cache/
      |-doc/
      |  |-CVS/
      |  +-emacs-w3m/
      |-icons/
      |  +-CVS/
      |-patches/
      |  +-CVS/
      +-shimbun/
         +-CVS/

   And with a prefix argument, you get something like this instead:

     /home/romain/.elisp/emacs-w3m/ (allfiles)
      |-(f).cvsignore
      |-(f)BUGS.ja
      |-(f)COPYING
      |-[d]CVS/
      |  |-(f)Entries
      |  |-(f)Repository
      |  +-(f)Root
      |-(f)ChangeLog
      |-(f)ChangeLog.1
      |-(f)Makefile
      |-(f)Makefile.in
      |-(f)README
      |-(f)README.ja

`D'
     Prompt for a local directory in the minibuffer, then display its
     tree structure.  If called with a prefix argument (e.g. `C-u D'),
     show files in the directories as well (`w3m-dtree').


File: emacs-w3m.info,  Node: Viewing Perl Documents,  Next: Using Namazu,  Prev: Showing Directory Tree,  Up: Pretty Good Features

Viewing perl documents
======================


File: emacs-w3m.info,  Node: Using Namazu,  Next: Octet,  Prev: Viewing Perl Documents,  Up: Pretty Good Features

Searching files with Namazu
===========================

   (under translation)


File: emacs-w3m.info,  Node: Octet,  Prev: Using Namazu,  Up: Pretty Good Features

Viewing data in various octal form
==================================

   (under construction)

   These following lines in your `~/.emacs' may help you to browse
octet data files which are opened with `octet-find-file'.

     (add-hook 'octet-find-file-hook 'view-mode)
     (add-hook 'octet-find-file-hook 'w3m-minor-mode)


File: emacs-w3m.info,  Node: Customizable Variables,  Next: Hooking into MUAs,  Prev: Pretty Good Features,  Up: Top

Customizable variables
**********************

   A lot of emacs-w3m variables are customizable via the Custom
mechanism, a graphical Emacs interface to define user options.  Custom
offers several methods to define your customizations, you can use for
example `M-x customize-option' for a single option (i.e. an Emacs Lisp
variable) or `M-x customize-group' to see all available options
(including variables and faces) for a "group" and change them; in which
case the group to use is `w3m'.

   Alternatively (if you don't want to use Custom), you can put
arbitrary Emacs Lisp expressions in your emacs-w3m initialization file,
which is `~/.emacs-w3m' by default.  This example:

     (setq w3m-home-page "http://emacs-w3m.namazu.org/")

would set the default homepage to `http://emacs-w3m.namazu.org/'.  The
syntax to use is the same as in your `~/.emacs' file.  *Note Init File:
(emacs)Init File.

   Please note that some variables from external modules could be
undefined at the time the `~/.emacs-w3m' file is loaded, thus making
them impossible to modify (of course if you don't care about the default
value, you can override them completely in your `~/.emacs-w3m') file.
The `w3m-search-engine-alist' variable is a typical example (*note
Search Variables::).

`w3m-init-file'
     When emacs-w3m starts, it will read the `w3m-init-file' file.  The
     default value is `~/.emacs-w3m'.  You probably don't need to change
     this.  This is a normal Emacs Lisp file and can be used to avoid
     cluttering your `~/.emacs' and `site-init' files with emacs-w3m
     stuff.  Emacs-w3m will also check for files with the same names as
     this, but with `.elc' and `.el' extensions (in other words,
     `~/.emacs-w3m.elc', `~/.emacs-w3m.el' and `~/.emacs-w3m', in this
     order).

* Menu:

* General Variables::           General variables
* Image Variables::             Variables related to images
* Form Variables::              Variables related to forms
* Cookie Variables::            Variables related to cookies
* Bookmark Variables::          Variables related to bookmarks
* Search Variables::            Variables related to searching the web
* Weather Variables::           Variables related to weather information
* Dtree Variables::             Variables related to the dtree feature
* Antenna Variables::           Variables related to antenna
* Perldoc Variables::           Variables related to perldoc
* Namazu Variables::            Variables related to namazu
* Octet Variables::             Variables related to the octet feature
* Hooks::                       Hooks
* Other Variables::             Other variables

