Info file: emacs-w3m.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `emacs-w3m.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.


INFO-DIR-SECTION GNU Emacs Lisp
START-INFO-DIR-ENTRY
* Emacs-w3m: (emacs-w3m).  An Emacs interface to w3m
END-INFO-DIR-ENTRY


This file documents emacs-w3m, an Emacs interface to w3m.

Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005
TSUCHIYA Masatoshi

This edition is for emacs-w3m version 1.4.4.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License, Version 2 or any
later version published by the Free Software Foundation.

This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this document; if not, you can either send email to this
document's maintainer or write to: The Free Software Foundation, Inc.;
59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.





File: emacs-w3m.info, Node: Working with buffers, Next: Downloading, Prev: Using Tabs, Up: Basic Usage

Creating, killing and moving across buffers
===========================================

Sooner or later, you will be addicted to emacs-w3m, and you'll have to
manage all your browsing needs with it.  To help you with this
daunting task, we have imagined many different ways to work with
emacs-w3m buffers.

* Menu:

* Creating and killing buffers:: Creating and killing buffers
* Moving across buffers::        Moving across buffers
* Selecting buffers::            Selecting buffers from a list



File: emacs-w3m.info, Node: Creating and killing buffers, Next: Moving across buffers, Prev: Working with buffers, Up: Working with buffers

Creating and killing buffers
----------------------------

It is sometimes useful to just create a new buffer without opening a
web page in it.  This operation is called "creating a twin copy" of a
buffer, in emacs-w3m lingo.  It will simply create a new buffer whose
contents are identical to the currently active buffer.

The opposite of this is closing buffers: you can just close one buffer
(because you're not interested in its contents anymore) or you can
decide to close all buffers but the current one.  Emacs-w3m lets you
do this with the following commands:

`C-c C-t'
     Create an identical copy of the currently active buffer, under a
     new name.  This is used to start a new session without loading a
     web page in the new buffer (`w3m-copy-buffer').

`C-c C-w'
     Close the current emacs-w3m buffer (`w3m-delete-buffer').

`C-c M-w'
     Close all emacs-w3m buffers, but the active one
     (`w3m-delete-other-buffers').



File: emacs-w3m.info, Node: Moving across buffers, Next: Selecting buffers, Prev: Creating and killing buffers, Up: Working with buffers

Moving across buffers
---------------------

The commands you will probably use most often are those who allow you
to go to an adjacent buffer; that is a buffer just "after" or "before"
the current one.  The meaning of this will be obvious if you use tabs:
the next buffer is the one just after the active one, on the right,
and the previous buffer is the one on the left.  However, XEmacs
displays tabs in random order unfortunately, so you need to pay
attention to the number which is displayed in each tab in order to
know what is the adjacent buffer if you are using XEmacs.  The key
bindings for these commands are `C-c C-p' and `C-c C-n'.

These commands understand the numeric argument convention, i.e. if you
call them with a number N as argument, you will be taken N buffers
away from the current one.  For example, to go two buffers on the
right from the current position, use `2 C-c C-n' (1) (*Note Moving
across buffers-Footnotes::).

`C-c C-p'
     Move to the previous emacs-w3m buffer.  This is usually the next
     buffer to the left in the tabs line under Emacs 21 and later.  If
     called with a numeric argument N, move N buffers to the previous
     (`w3m-previous-buffer').

`C-c C-n'
     Move to the next emacs-w3m buffer.  This is usually the next
     buffer to the right in the tabs line under Emacs 21 and later.
     If called with a numeric argument N, move N buffers to the next
     (`w3m-next-buffer').

Also note that if these commands don't fit you well despite our
efforts, you might find what you need in "generalist" buffer
management packages such as ibuffer or iswitchb--since emacs-w3m
buffers are regular Emacs buffers, they will work fine too.


File: emacs-w3m.info  Node: Moving across buffers-Footnotes, Up: Moving across buffers

(1) You can use `C-u 2 C-c C-n' instead of `2 C-c C-n' as
usual.  But keep in mind all numeric keys and minus-sign are assigned
to the numeric prefix arguments in emacs-w3m buffers.



File: emacs-w3m.info, Node: Selecting buffers, Prev: Moving across buffers, Up: Working with buffers

Selecting buffers from a list
-----------------------------

There are two ways to select emacs-w3m buffers from a list.  The first
one is a minibuffer-based interface, called with `C-c C-a'.  You can
choose the buffer you want to display using the `M-p' and `M-n' keys
(or the "up" and "down" arrow keys), they will make you cycle through
the list.  You can also edit the prompt and type the title of an
existing web page, using `TAB' for completion.  For example, if you
have a "Google Search" page opened, you can type "Goo" then hit `TAB'
and the page title will be completed.  After the page name, the buffer
name is given (between brackets).  Then use `RET' to switch to the
buffer you have chosen.

The second and more sophisticated interface is called the emacs-w3m
buffer list, it is invoked with `C-c C-s'.  It shows you the list of
all opened buffers in a separate window (either a vertical or a
horizontal window---`C-c C-s' toggles between the two modes) and
allows you to view the buffers in real-time: when you move the point
in the buffer list, the buffer under point is displayed in the main
window, which allows you to have direct visual feedback of the buffer
you're switching to.

To move in the buffer list, you can use the `p' and `n' keys (or the
arrow keys).  In the buffer list, `DEL' and `SPC' allow you to scroll
the buffer displayed in the main window, which is handy if you want to
check that you're seeing the right buffer.  To select the buffer under
point, you can use the `RET' key, in which case the buffer list will
be buried, or the `w' key, in which case the buffer list will remain
visible and the focus given to the main window.

You can also close and create buffers from this menu, using the same
bindings as the one used in regular buffers (*Note Creating and
killing buffers::).

Finally, the `?' key shows a short help, `g' refreshes the list and
the `q' key exits the buffer list, not changing the active buffer.

`C-c C-a'
     Prompt for a buffer name in the minibuffer.  `M-p' and `M-n'
     cycle through the list of existing buffers and `TAB' completes
     (`w3m-switch-buffer').

`C-c C-s'
     Show the buffer list in a separate window (`w3m-select-buffer').
     In this window, `C-c C-s' toggles between horizontal and vertical
     modes, `RET' selects the buffer under point and buries the buffer
     list, `w' selects the buffer under point and gives it the focus,
     `n', `p' and the arrow keys can be used to move down or up.



File: emacs-w3m.info, Node: Downloading, Next: Submitting Forms, Prev: Working with buffers, Up: Basic Usage

Downloading a file
==================

It is possible to download (i.e. fetch, but not display) any web page
or file with emacs-w3m: just put the point on the link you want to
download and hit `d'.  You will be prompted for a filename under which
to save the file locally, by default it will be the name of the file
on the remote server.  Confirm with `RET'.  The download will be
asynchronous and not block your Emacs session, you can continue your
emacs-w3m browsing in another buffer if you want.

Please note that this download mechanism uses w3m to download things,
you might want to use the more powerful wget downloader instead.  Have
a look at our friend project "emacs-wget", its homepage is at
`http://pop-club.hp.infoseek.co.jp/emacs/emacs-wget/'.

`d'
     Download the file or page pointed by the link under point
     (`w3m-download-this-url').



File: emacs-w3m.info, Node: Submitting Forms, Next: HTML File Information, Prev: Downloading, Up: Basic Usage

Filling in HTML forms
=====================

These emacs-w3m commands let you move between forms and fill in
fields, using simple key bindings and optionally prompting you for
values in Emacs windows or in the minibuffer.

The main key binding to remember is `RET'.  It has different meanings,
depending on the thing under point: for textareas, you will be
prompted for a value in the minibuffer.  For select tags, you will be
given a list of choices in an electric Emacs window (you can move
using the arrow keys, and pick one with the `RET' key).  For radio and
checkbox buttons, the `RET' key selects one of the elements.

When in the minibuffer or in the electric window, you can cancel with
the `C-c C-q' sequence.  To submit the form, use `C-c C-c'.

`]'
     Jump to the next form (`w3m-next-form').

`['
     Jump to the previous form (`w3m-previous-form').

`C-c C-c'
     Submit form at point (`w3m-submit-form').

`RET'
     Edit the value of the form item under point.

`RET (w3m-form-*-keymap)'
     Accept the value.

`C-c C-q (w3m-form-*-keymap)'
     Quit editing the form item, leaving changes.

Unless `w3m-form-use-textarea-backup' is set to `nil', emacs-w3m
stores the text you input in textareas in backup files for later
reuse.  When you start editing a form and there is backup text
available, you will be asked whether you want to use it or not.  Files
to save text are stored in the directory specified by the
`w3m-form-textarea-directory' variable.



File: emacs-w3m.info, Node: HTML File Information, Prev: Submitting Forms, Up: Basic Usage

Support for web page editing and hacking
========================================

For those who usually use Emacs to write documentation or programs,
it's very convenient to be able to browse the web in the same Emacs
session.  For example, if you are editing a HTML file in Emacs, you
can preview it without launching an external browser.  You can also
quickly copy sample code from technical documentation during a
programming marathon...

How about the opposite?  (That is, being able to edit the source of a
web page in a web browser.)  Wouldn't that be cool?  Imagine you found
an error in your document after previewing it in emacs-w3m; you
probably want to fix it right away.  Or if you are a programmer
specialized in web technology, sometimes you might want to see the raw
HTML file for the current web page... especially if you are the author
of a Shimbun module (*Note Shimbun Basics::).

It is usually possible to switch to an Emacs buffer visiting an HTML
file by using the buffer name, but emacs-w3m adds a specific
keybinding for this.  Emacs-w3m knows the URL of the web page it is
visiting, so why not take advantage of this?

`\'
     Display the current web page in the raw HTML
     format(`w3m-view-source').

`='
     Show the information about currently displayed web page. It
     includes title, URL, document type, last modified
     date(`w3m-view-header').

`E'
     Edit the local file pointed by URL of current
     page(`w3m-edit-current-url').

`e'
     Edit the local file pointed by URL under
     point(`w3m-edit-this-url').

`M'
     Launch an external browser (other than emacs-w3m) and display the
     same web page as currently displayed in
     emacs-w3m(`w3m-view-url-with-external-browser').  The external
     browser to be used is defined by the variable
     `w3m-content-type-alist', depending on the kind of URL.


The (*Note Tips::) section gives more examples on how to integrate
emacs-w3m with other commands and Emacs subsystems.



File: emacs-w3m.info, Node: Pretty Good Features, Next: Customizable Variables, Prev: Basic Usage, Up: Top

Pretty good features
********************

* Menu:

* Using Search Engines::        Convenient ways to search the web
* Grouping URLs::               Visiting several web pages in one URL
* Weather Information::         It will be fine tomorrow
* Using Antenna::               Raise your antenna
* Showing Directory Tree::      Showing the tree structure of local directories
* Viewing Perl Documents::      Viewing Perl Documents
* Using Namazu::                Searching files with Namazu
* Octet::                       Viewing data in various octal form



File: emacs-w3m.info, Node: Using Search Engines, Next: Grouping URLs, Prev: Pretty Good Features, Up: Pretty Good Features

Convenient ways to search the web
=================================

Emacs-w3m comes with advanced features related to search engines, they
are accessible through two interfaces:

   * The regular interface, invoked by the `S' key in any emacs-w3m
     buffer.  It is a simple interactive way to choose which search
     engine to use and input a search term; see *Note The Search
     Interface::.

   * The Quicksearch interface: it is a faster (yet more complicated)
     way to use search engines, by going to specially crafted URLs.
     For more information about this feature, see *Note Quick
     Searching::.

* Menu:

* The Search Interface::        How to search with emacs-w3m
* Quick Searching::             An alternative (and fast) way to search the web
* Adding New Search Engines::   Using your favorite engines



File: emacs-w3m.info, Node: The Search Interface, Next: Quick Searching, Prev: Using Search Engines, Up: Using Search Engines

How to search with emacs-w3m
----------------------------

You can fire up the regular search interface by using the `S' key in
an emacs-w3m buffer (provided you use the default keymap).  You will
see a prompt in the minibuffer, asking for a search term.  Type one or
several words at the prompt, then hit `RET'.  The result page of your
search in the engine appears, you can then browse the results, just as
if you had used the normal web based entry point to the engine.

You probably noticed that you have not been given a chance to choose
which engine you want to search with.  By default, emacs-w3m will use
the Google search engine, you can change this behavior by customizing
the `w3m-search-default-engine' variable (see *Note Customizable
Variables::), or you can specify the search engine each time you use
the command.

To specify which engine to use, you have to give the command a prefix
argument (usually, this means hitting `C-u' before the command,
e.g. `C-u S').  Emacs-w3m will prompt you for an engine, you can
choose one by typing its name (completion is also available with the
TAB key).  Once you have made your choice, hit the `RET' key.  You can
then type your search term, hit `RET', and you will see the search
results.

`S'
     Begin a new search.  If called with a prefix argument, prompt for
     the engine to use (`w3m-search').



File: emacs-w3m.info, Node: Quick Searching, Next: Adding New Search Engines, Prev: The Search Interface, Up: Using Search Engines

An alternative (and fast) way to search the web
-----------------------------------------------

If you're a "Web Power User" (and since you're reading this, you
probably are), you need a quick and efficient way to perform searches.
The Quick Searching feature is one.

What does it do?  It lets you launch web searches by simply going to a
special URL such as `gg:emacs'.  The advantages of this mode of
operation are:

   * It's fast.  You just have to type a URL to choose the engine and
     the search word(s), in one go.

   * It's convenient.  With this feature, you can easily open a new
     emacs-w3m tab or window, and launch a search in it, using for
     example, the `G' key to open a URL in a new window, and going to
     a Quicksearch URL.  You can also bookmark searches just by
     bookmarking the special Quicksearch URL.

   * It works with the grouping feature.  You can launch two searches
     at the same time, with a URL like `group:gg:emacs&ya:w3m'.  This
     would for instance launch a search for "emacs" on Google and for
     "w3m" on Yahoo!.  *Note Grouping URLs::.

Using it is very simple: suppose you want to search for the word "gnu"
on Google.  Hit `g' to go to a new URL, and type "gg:gnu".  The first
part of this expression, "gg" indicates that we want to use the Google
search engine.  The second term is the word we will be searching for.
The prefix and the search term must be separated by a colon.  Hit
`RET', and you will see the results of your search.  Please note that
you can input several words by separating them with spaces (to type a
space in the minibuffer, hit `C-q' first, e.g. `C-q SPC').

The default configuration of emacs-w3m includes several prefixes you
can use, they are defined in the `w3m-uri-replace-alist' variable.
There's for example "gg" for Google, "ggg" for Google Groups, "ya" for
Yahoo!, "al" for Altavista, to name a few.  You can also add prefixes
for the search engines you define, *Note Adding New Search Engines::.

Instead of prefixes, you can also use full engine names in Quicksearch
URLs, such as "google" or "yahoo".  These names are defined in the
`w3m-search-engine-alist' variable.



File: emacs-w3m.info, Node: Adding New Search Engines, Prev: Quick Searching, Up: Using Search Engines

Using your favorite engines
---------------------------

Emacs-w3m has a number of built-in search engines you can use.  What
if you want to use your favorite search engine and it's not listed in
the known search engines?  You have to add it to the list of search
engines, and it's quite easy:

  1. First, you have to find what's the entry point of the search
     engine you want to add, for example:

     `http://my.searchengine.com/?query=foobar'

     where foobar is the term you want to search for.

  2. Once you have this information, add this to your `~/.emacs-w3m'
     file:

          (eval-after-load "w3m-search"
            '(add-to-list 'w3m-search-engine-alist
                          '("My engine"
                            "http://my.searchengine.com/?query=%s"
                            nil)))

     Replace the first field "My engine" with the description of your
     engine, the second field with the entry point (the `%s' is
     important, it will be replaced by the search term when you issue
     the search), and the third field is the encoding to use, `nil' or
     omitting this field means to use the value of
     `w3m-default-coding-system' as a regular encoding.

     For English search engines, you rarely have to worry about this.
     However, for some Japanese search engines, you may need to
     specify something (e.g. `euc-japan') there.

  3. You can now use this engine to search, using the normal `S' key
     in emacs-w3m.  If you use this engine often, you can also add it
     to the Quicksearch (see *Note Quick Searching::) engines and give
     it a small prefix, by adding this to your `~/.emacs-w3m' file
     instead:

          (eval-after-load "w3m-search"
            '(progn
               (add-to-list 'w3m-search-engine-alist
                            '("My engine"
                              "http://my.searchengine.com/?query=%s"
                              nil))
               (add-to-list 'w3m-uri-replace-alist
                            '("\\`my:" w3m-search-uri-replace "My engine"))))

     This way you can also use a URL like `my:foobar' to search for
     the term "foobar" with your engine.



File: emacs-w3m.info, Node: Grouping URLs, Next: Weather Information, Prev: Using Search Engines, Up: Pretty Good Features

Visiting several web pages in one URL
=====================================

Emacs-w3m can manipulate "group URLs": special URLs that contain
several real URLs.  When you open these group URLs, emacs-w3m will
open one buffer for each URL in the group, allowing you to open
several pages in one go.

To build group URLs, you just have to put together (i.e. concatenate)
all the addresses you want to open, separating them with the ampersand
symbol (that's "&"), and prefixing the grouped URLs with "group:".
For example, suppose you want to visit the GNU Project's homepage,
`http://www.gnu.org/', and the Savannah homepage,
`http://savannah.nongnu.org/': the group URL would be

`group:http://www.gnu.org/&http://savannah.nongnu.org/'

Since this syntax can be quite hard to use on a daily basis, this
feature will be most useful when used with very short URLs
(Quicksearch URLs for example, see *Note Quick Searching::); or in
non-interactive contexts.



File: emacs-w3m.info, Node: Weather Information, Next: Using Antenna, Prev: Grouping URLs, Up: Pretty Good Features

It will be fine tomorrow
========================



File: emacs-w3m.info, Node: Using Antenna, Next: Showing Directory Tree, Prev: Weather Information, Up: Pretty Good Features

Raise your antenna
==================

Antenna is a tool to keep track of changes in web pages.  Using
Antenna, you can periodically check if particular pages have been
updated, and if they haven't, know the last time you saw them.

You can start Antenna using the `A' key in any emacs-w3m buffer.
Alternatively, you can go to the special URL `about://antenna/'; it
does the same thing.

* Menu:

* Setting up Antenna::          How to add your web sites to Antenna
* Daily web tracking::          Tracking changes with Antenna



File: emacs-w3m.info, Node: Setting up Antenna, Next: Daily web tracking, Prev: Using Antenna, Up: Using Antenna

How to add your web sites to Antenna
------------------------------------

If you want to add the visiting web site to Antenna, type the `+' key.
You will be taken to the customization buffer of `w3m-antenna-sites',
with all fields already set up for you.  You just have to hit the
buttons "Save for future sessions" and "Finish".

`+'
     Add a URL to the Antenna database.  If called with a prefix
     argument, ask for a URL instead of adding the current page
     (`w3m-antenna-add-current-url').



File: emacs-w3m.info, Node: Daily web tracking, Prev: Setting up Antenna, Up: Using Antenna

Tracking changes with Antenna
-----------------------------

On the Antenna page, you will see two sections: one called "Updated"
and another called "Visited".  In the "Updated" section, you will find
websites which have changed since the last Antenna update, and in the
"Visited" section, the websites which haven't.  In each section, each
line stands for one website of the Antenna database, and has the
following structure:

` * 2002/12/15 16:43 (T) My website'

The first part is the last time the website was updated, or if this
information is not available, the last time Antenna noticed a change
in this page.

The `(T)' stands for "Time", it means that the change was detected
because the last modification time of that page has changed since the
last Antenna update.  Another possible value here is `S' (for "Size"),
which means that the change has been detected because the size of the
page has changed.

The last part of this line is the title you gave to this website when
you added it to the database.

Please note that the Antenna database doesn't get automatically
updated, you have to update it each time you want to check if the
sites have changed, either by hitting `R' in the Antenna page, or by
passing a prefix argument to the command (start Antenna with `C-u A',
for example).

`A'
     Visit the Antenna page.  If called with a prefix argument, update
     the Antenna database before displaying it (`w3m-antenna').



File: emacs-w3m.info, Node: Showing Directory Tree, Next: Viewing Perl Documents, Prev: Using Antenna, Up: Pretty Good Features

Showing the tree structure of local directories
===============================================

Using the `w3m-dtree' command, you can display a tree of all
subdirectories of a local directory, and browse it like a regular web
page.  The emacs-w3m buffer you get when you use this feature is very
similar to the output of the external "tree" utility, hence the name.
Emacs-w3m adds a bonus: if you call the command with a prefix
argument, it will display files as well, turning emacs-w3m into a
full-featured file browser.

Here is an example of what an emacs-w3m dtree run looks like:

     /home/romain/.elisp/emacs-w3m/
      |-CVS/
      |-attic/
      |  +-CVS/
      |-autom4te.cache/
      |-doc/
      |  |-CVS/
      |  +-emacs-w3m/
      |-icons/
      |  +-CVS/
      |-patches/
      |  +-CVS/
      +-shimbun/
         +-CVS/

And with a prefix argument, you get something like this instead:

     /home/romain/.elisp/emacs-w3m/ (allfiles)
      |-(f).cvsignore
      |-(f)BUGS.ja
      |-(f)COPYING
      |-[d]CVS/
      |  |-(f)Entries
      |  |-(f)Repository
      |  +-(f)Root
      |-(f)ChangeLog
      |-(f)ChangeLog.1
      |-(f)Makefile
      |-(f)Makefile.in
      |-(f)README
      |-(f)README.ja

`D'
     Prompt for a local directory in the minibuffer, then display its
     tree structure.  If called with a prefix argument (e.g. `C-u D'),
     show files in the directories as well (`w3m-dtree').



File: emacs-w3m.info, Node: Viewing Perl Documents, Next: Using Namazu, Prev: Showing Directory Tree, Up: Pretty Good Features

Viewing perl documents
======================




File: emacs-w3m.info, Node: Using Namazu, Next: Octet, Prev: Viewing Perl Documents, Up: Pretty Good Features

Searching files with Namazu
===========================

(under translation)




File: emacs-w3m.info, Node: Octet, Prev: Using Namazu, Up: Pretty Good Features

Viewing data in various octal form
==================================

(under construction)

These following lines in your `~/.emacs' may help you to browse octet
data files which are opened with `octet-find-file'.

     (add-hook 'octet-find-file-hook 'view-mode)
     (add-hook 'octet-find-file-hook 'w3m-minor-mode)




File: emacs-w3m.info, Node: Customizable Variables, Next: Hooking into MUAs, Prev: Pretty Good Features, Up: Top

Customizable variables
**********************

A lot of emacs-w3m variables are customizable via the Custom
mechanism, a graphical Emacs interface to define user options.  Custom
offers several methods to define your customizations, you can use for
example `M-x customize-option' for a single option (i.e. an Emacs Lisp
variable) or `M-x customize-group' to see all available options
(including variables and faces) for a "group" and change them; in
which case the group to use is `w3m'.

Alternatively (if you don't want to use Custom), you can put arbitrary
Emacs Lisp expressions in your emacs-w3m initialization file, which is
`~/.emacs-w3m' by default.  This example:

     (setq w3m-home-page "http://emacs-w3m.namazu.org/")

would set the default homepage to `http://emacs-w3m.namazu.org/'.  The
syntax to use is the same as in your `~/.emacs' file.  *Note Init
File: (emacs)Init File.

Please note that some variables from external modules could be
undefined at the time the `~/.emacs-w3m' file is loaded, thus making
them impossible to modify (of course if you don't care about the
default value, you can override them completely in your
`~/.emacs-w3m') file.  The `w3m-search-engine-alist' variable is a
typical example (*Note Search Variables::).

`w3m-init-file'
     When emacs-w3m starts, it will read the `w3m-init-file' file.
     The default value is `~/.emacs-w3m'.  You probably don't need to
     change this.  This is a normal Emacs Lisp file and can be used to
     avoid cluttering your `~/.emacs' and `site-init' files with
     emacs-w3m stuff.  Emacs-w3m will also check for files with the
     same names as this, but with `.elc' and `.el' extensions (in
     other words, `~/.emacs-w3m.elc', `~/.emacs-w3m.el' and
     `~/.emacs-w3m', in this order).

* Menu:

* General Variables::           General variables
* Image Variables::             Variables related to images
* Form Variables::              Variables related to forms
* Cookie Variables::            Variables related to cookies
* Bookmark Variables::          Variables related to bookmarks
* Search Variables::            Variables related to searching the web
* Weather Variables::           Variables related to weather information
* Dtree Variables::             Variables related to the dtree feature
* Antenna Variables::           Variables related to antenna
* Perldoc Variables::           Variables related to perldoc
* Namazu Variables::            Variables related to namazu
* Octet Variables::             Variables related to the octet feature
* Hooks::                       Hooks
* Other Variables::             Other variables



File: emacs-w3m.info, Node: General Variables, Next: Image Variables, Prev: Customizable Variables, Up: Customizable Variables

General variables
=================

`w3m-accept-languages'
     List of acceptable languages in descending order of priority.
     The default value is set according to the `accept_language' entry
     of the `w3m' configuration file (normally `~/.w3m/config').

`w3m-add-referer'

     Rule of sending referers.  There are five choices as the valid
     values of this option.

       1. `nil': this means that emacs-w3m never send referers.

       2. `t': this means that emacs-w3m always send referers.

       3. `lambda': this means that emacs-w3m send referers only when
          both the current page and the target page are provided by
          the same server.

       4. a cons cell keeping two regular expressions: this means that
          emacs-w3m send referers when the url of the current page
          matches the first regular expression and does not match the
          second regular expression.  `Nil' for the regexp matches any
          url.

       5. a function: emacs-w3m send referers when this function which
          has two arguments, URL and REFERER, returns non-nil.

     If you're nervous about leaking private WEB browsing history
     information, set this option to `nil' or `lambda'.  If your
     computer belongs to a secret network, you may set a pair of
     regular expressions to inhibit sending referers which will
     disclose your private information, as follows:

          (setq w3m-add-referer
                '("\\`http:\"
                  . "\\`http://\\([^./]+\\.\\)*example\\.net/"))

`w3m-add-user-agent'
     Non-`nil' means add the User-Agent field to the request header.
     The value of `w3m-user-agent' is used for the field body.

`w3m-arrived-file'
     Name of the file to keep the arrived URLs database.

`w3m-auto-show'
     Non-`nil' means provide the ability to horizontally scroll the
     window.  Automatic horizontal scrolling happens when the point
     gets away from both ends of the window, but nothing occurs if
     `truncate-lines' is set to `nil'.

     This feature works with specific emacs-w3m code; usual
     `auto-hscroll-mode', `automatic-hscrolling', `auto-show-mode' or
     `hscroll-mode' will all be invalidated in emacs-w3m buffers.

`w3m-charset-coding-system-alist'
     Alist of MIME charsets and coding systems.  Both charsets and
     coding systems must be symbols.

`w3m-coding-system'
     Default coding system used to communicate with the `w3m' command.

`w3m-coding-system-priority-list'
     Coding systems in order of priority used for emacs-w3m sessions.

`w3m-command'
     Name of the executable file of the `w3m' command.  You normally
     don't have to specify the value, since emacs-w3m looks for the
     existing commands `w3m', `w3mmee' and `w3m-m17n' (in this order)
     in the `exec-path' directories in order if it is `nil' in the
     beginning.

     If you want to use the other `w3m' command, specify the value of
     this variable explicitly in the .emacs file or customize the
     value and save it.  In this case, you need to restart Emacs and
     emacs-w3m: there is currently no way to apply the changing of the
     `w3m' command to all the emacs-w3m programs safely after loading
     the `w3m.elc' module.

`w3m-command-arguments'
     List of the default arguments passed to the `w3m' command.  See
     also `w3m-command-arguments-alist'.

`w3m-command-arguments-alist'
     Alist of regexps matching urls and additional arguments passed to
     `w3m'.  A typical usage of this variable is to specify whether to
     use a proxy server for particular hosts.  The first match made
     will be used.  Here is an example of how to set this variable:

          (setq w3m-command-arguments-alist
                '(;; Don't use the proxy server to visit local web pages.
                  ("^http://\\([^/]*\\.\\)*your-company\\.com\\(/\\|$\\)"
                   "-no-proxy")
                  ;; Use the proxy server to visit any foreign urls.
                  (""
                   "-o" "http_proxy=http://proxy.your-company.com:8080/")))

     Here the first element matches any url where the scheme is `http'
     and the hostname is either `your-company.com' or a name ending
     with `.your-company.com'; the proxy server is not used for those
     hosts.  If you are a regexp novice, you can use the
     `w3m-no-proxy-domains' variable instead.

`w3m-command-environment'
     Alist of environment variables for subprocesses to inherit.

`w3m-content-type-alist'
     Alist of file suffixes and content types.

`w3m-correct-charset-alist'
     Alist of MIME charsets; strange ones and standard ones.

`w3m-db-history-display-size'
     Maximum number of arrived URLs which are displayed per page.

`w3m-decoder-alist'
     Alist of encoding types, decoder commands, and arguments.

`w3m-default-coding-system'
     Default coding system used to encode url strings and post-data.

`w3m-default-content-type'
     Default value assumed as the content type of local files.

`w3m-default-save-directory'
     Default directory where downloaded files will be saved to.

`w3m-delete-duplicated-empty-lines'
     Non-`nil' means display two or more continuous empty lines into
     single.

`w3m-dirlist-cgi-program'
     Name of the CGI program to list a local directory.  If it is
     `nil', the dirlist.cgi module of the `w3m' command will be used.

`w3m-edit-function'
     Function used for editing local files.  It is used when the
     `w3m-edit-current-url' command or the `w3m-edit-this-url' command
     is invoked.

`w3m-edit-function-alist'
     Alist of functions used for editing pages.  This option is
     refered to decide which function shouled be used to edit a
     specified page, when either `w3m-edit-current-url' or
     `w3m-edit-this-url' is invoked.  When no suitable function is
     found from this alist, `w3m-edit-function' is used.

`w3m-encoding-type-alist'
     Alist of file suffixes and content encoding types.

`w3m-file-coding-system'
     Coding system used when writing configuration files.  This value
     will be referred to by the `w3m-save-list' function.

`w3m-file-name-coding-system'
     Coding system used to convert pathnames when emacs-w3m accesses
     files.

`w3m-fill-column'
     Integer used as the value for `fill-column' in emacs-w3m buffers.
     If it is positive, pages will be displayed within the columns of
     that number.  If it is zero or negative, the number of columns
     which subtracted that number from the window width is applied to
     the maximum width of pages.  Note that XEmacs does not always
     obey this setting.

`w3m-follow-redirection'
     Maximum number of redirections which emacs-w3m honors and
     follows.  If `nil', redirections are followed by the `w3m'
     command.  Don't set it to `nil' if you allow to use cookies
     (i.e., you have set `w3m-use-cookies' to non-`nil') since cookies
     may be shared among many redirected pages.

`w3m-home-page'
     This variable specifies the url string to open when emacs-w3m
     starts.  Don't say HP, it's the abbreviated name of a certain
     company. ;-)

`w3m-horizontal-scroll-columns'
     Number of steps in columns used when scrolling a window
     horizontally.

`w3m-horizontal-scroll-division'
     Integer used by the program making the point certainly visible.
     The cursor definitely does not go missing even when it has been
     driven out of the window while wandering around anchors and forms
     in an emacs-w3m buffer.

     Suppose that the value of this variable is N.  When the point is
     outside the left of the window, emacs-w3m scrolls the window so
     that the point may be displayed on the position within 1/N of the
     width of the window from the left.  Similarly, when the point is
     outside the right of the window, emacs-w3m scrolls the window so
     that the point may be displayed on the position of 1/N of the
     width of the window from the right.

     This feature doesn't work if `w3m-auto-show' is `nil'.  The value
     must be a larger integer than 1.

`w3m-horizontal-shift-columns'
     Number of steps in columns used when shifting a window
     horizontally.  The term `shifting' means a fine level scrolling.

`w3m-imitate-widget-button'
     If non-`nil', imitate the widget buttons on link (anchor)
     buttons.  It is useful for moving about in a Gnus article buffer
     using `TAB' key.  It can also be any Lisp form that should return
     a boolean value.

`w3m-init-file'
     Your emacs-w3m startup file name.  If a file with the `.el' or
     `.elc' suffixes exists, it will be read instead.

     Note: This file is used as the startup configuration *NOT* for
     the `w3m' command but for emacs-w3m.  In order to modify
     configurations for the `w3m' command, edit the file named
     `~/.w3m/config' normally.

`w3m-input-coding-system'
     Coding system used when writing to `w3m' processes.  It overrides
     `coding-system-for-write' if it is not `binary'.  Otherwise, the
     value of the `w3m-current-coding-system' variable is used
     instead.

`w3m-keep-arrived-urls'
     Maximum number of URLs which the arrived URLs database keeps.

`w3m-keep-cache-size'
     Maximum number of pages to be cached in emacs-w3m.

`w3m-key-binding'
     Type of key binding set used in emacs-w3m sessions.  The valid
     values include `info' which provides Info-like keys, and `nil'
     which provides Lynx-like keys.

`w3m-language'
     Your preferred language used in emacs-w3m sessions.

`w3m-local-directory-view-method'
     Symbol of the method to view a local directory tree.  The valid
     values include `w3m-cgi' using the CGI program specified by the
     `w3m-dirlist-cgi-program' variable (which see), and `w3m-dtree'
     using the w3m-dtree Lisp module.

`w3m-local-find-file-function'
     Function used to open local files.  If a url of the `file:'
     scheme in which you entered agrees with the rule of the
     `w3m-local-find-file-regexps' variable (which see), it is used to
     open the file.

     Function should take one argument, the string naming the local
     file.  It can also be any Lisp form returning a function.  Set
     this to `nil' if you want to always use emacs-w3m to see local
     files.

`w3m-local-find-file-regexps'
     `Cons' of two regexps matching and not matching with local file
     names.  If a url of the `file:' scheme in which you entered
     matches the first form and does not match the latter form, it
     will be opened by the function specified by the
     `w3m-local-find-file-function' variable.  `Nil' for the regexp
     matches any file names.

     For instance, the value `(nil . "\\.html?\\'")' allows
     `file:///some/where/w3m.el', not `file:///any/where/index.html',
     to open by the function specified by
     `w3m-local-find-file-function'.  The latter will be opened as a
     normal web page.

     It is effective only when the `w3m-local-find-file-function'
     variable is set properly.

`w3m-mailto-url-function'
     Function used to handle the `mailto' urls.  Function is called
     with one argument, just a url.  If it is `nil', a function
     specified by the `mail-user-agent' variable will be used for
     composing mail messages.

`w3m-mailto-url-popup-function-alist'
     Alist of `(MAJOR-MODE . FUNCTION)' pairs used to pop a mail
     buffer up.  If a user clicks on a `mailto' url and a mail buffer
     is composed by `mail-user-agent' with the `MAJOR-MODE',
     `FUNCTION' will be called with a mail buffer as an argument.
     Note that the variables `special-display-buffer-names',
     `special-display-regexps', `same-window-buffer-names' and
     `same-window-regexps' will be bound to `nil' while popping to a
     buffer up.

`w3m-make-new-session'
     Non-`nil' means making new emacs-w3m buffers when visiting new
     pages.  If it is non-`nil' and there are already emacs-w3m
     buffers, the `w3m' command makes a new emacs-w3m buffer if a user
     specifies a url string in the minibuffer, and the
     `w3m-safe-view-this-url' command also makes a new buffer if a
     user invokes it in a buffer not being running the `w3m-mode'.
     The default value is `nil'.

`w3m-mbconv-command'
     Name of the `mbconv' command provided by the `libmoe' package.
     The `libmoe' package is used when you use the `w3mmee' command
     instead of the `w3m' command.  See also `w3m-command'.

`w3m-no-proxy-domains'
     List of domain names for which emacs-w3m will not use a proxy
     server.  Each element should be exactly a domain name which means
     the latter common part of the host names, not a regexp.

`w3m-output-coding-system'
     Coding system used when reading from `w3m' processes.

`w3m-pop-up-frames'
     Non-`nil' means pop to a new frame up for an emacs-w3m session.
     This variable is similar to `pop-up-frames' and does override
     `w3m-pop-up-windows'.  If `w3m-use-tab' is non-`nil' or there is
     the buffers selection window (for the `w3m-select-buffer'
     feature), this variable is ignored when creating the second or
     more emacs-w3m session.

`w3m-pop-up-windows'
     Non-`nil' means split the windows when a new emacs-w3m session is
     created.  This variable is similar to `pop-up-windows' and quite
     overridden by `w3m-pop-up-frames' as if `pop-up-frames'
     influences.  Furthermore, if `w3m-use-tab' is non-`nil' or there
     is the buffers selection window (for the `w3m-select-buffer'
     feature), this variable is ignored when creating the second or
     more emacs-w3m session.

`w3m-popup-frame-parameters'
     Alist of frame parameters used when creating a new emacs-w3m
     frame.  It allows not only the alist form but also XEmacs' plist
     form.

`w3m-prefer-cache'
     Non-nil means that cached contents are used without checking
     headers.

`w3m-profile-directory'
     Directory where emacs-w3m config files are loaded from or saved
     to.

`w3m-quick-start'
     Non-`nil' means let emacs-w3m start quickly w/o requiring
     confirmation.  When you invoke the `w3m' command, it attempts to
     visit the page of a string like url around the cursor or the
     value of `w3m-home-page'.  You won't be asked for the
     confirmation then if this value is non-`nil'.  Otherwise, you
     will be prompted for that url with the editing form.

`w3m-redirect-with-get'
     If non-`nil', use the GET method after redirection.  It controls
     how emacs-w3m works when a server responds the code 301 or 302.
     Here is an extract from RFC2616:

     Note: RFC 1945 and RFC 2068 specify that the client is not
     allowed to change the method on the redirected request.  However,
     most existing user agent implementations treat 302 as if it were
     a 303 response, performing a GET on the Location field-value
     regardless of the original request method.

`w3m-relationship-estimate-rules'
     Rules to estimate relationships between a retrieved page and
     others.

`w3m-select-buffer-horizontal-window'
     Non-`nil' means split windows horizontally to open the selection
     window.

`w3m-select-buffer-window-ratio'
     The percentage of the selection window to the whole frame.  The
     car is used when splitting windows horizontally and the cdr is
     for splitting windows vertically.

`w3m-show-decoded-url'
     Non-nil means show decoded URIs in the echo area, the balloon,
     etc.  This variable can take one of the following five kinds of
     forms:

       1. t

          Decode URIs using the encoding assumed by the default
          presumption rule based on the priority list including the
          encoding used to decode the current page and the value of
          `w3m-coding-system-priority-list'.

       2. Coding system

          Decode URIs using this value.

       3. List of coding systems

          Decode URIs using the encoding assumed based on this list.

       4. Alist of predicates and forms described below:

          Each element looks like the `(PREDICATE . ENCODING)' form.
          `PREDICATE' should be a regexp, a function or a Lisp form,
          and `ENCODING' should be one of the forms described here
          excluding this form.  If `PREDICATE' is a regexp, it will be
          tested whether it matches to the current url.  If it is a
          function, it will be called with no argument.  If it is a
          Lisp form, it will be simply evaluated.  Elements are tested
          in turn until the result of the test of the predicate is
          true and the encoding which is associated to the predicate
          is used for decoding URIs.

       5. nil

          Don't decode URIs.

`w3m-show-error-information'
     Non-`nil' means show an error information as a web page.  Page is
     made when the foreign server doesn't respond to a request to
     retrieve data.

`w3m-space-before-favicon'
     String of space char(s) to be put in front of favicon in the
     mode-line.  It may be better to use two or more spaces if you are
     using oblique or italic font in the modeline.

`w3m-space-before-modeline-icon'
     String of space character(s) to be put in front of the modeline
     icon.  It may be better to use one or more spaces if you are
     using oblique or italic font in the modeline.

`w3m-terminal-coding-system'
     Default coding system used when writing to `w3m' processes.  It
     is just a default value to set process' coding system initially.
     (This variable name is analogically derived from the behavior of
     the `w3m' command which accepts data from Emacs just like reads
     from the terminal.)

`w3m-touch-command'
     Name of the executable file of the touch command.  Note that the
     command is required to be able to modify file's timestamp with
     the `-t' option.

`w3m-track-mouse'
     Whether to track the mouse and message the url under the mouse.
     This feature does not work under Emacs or XEmacs versions prior
     to 21.  See also `show-help-function' if you are using Emacs 21
     or later.

     A tip for XEmacs users:

     You can also use the `balloon-help' feature by the `M-x
     balloon-help-mode' command with arg 1.  If the window manager
     decorates the balloon-help frame, and that is not to your taste,
     you may strip it off with the following directives:

          For ol[v]wm use this in .Xdefaults:
             olvwm.NoDecor: balloon-help
               or
             olwm.MinimalDecor: balloon-help

          For fvwm version 1 use this in your .fvwmrc:
             NoTitle balloon-help
          or
             Style "balloon-help" NoTitle, NoHandles, BorderWidth 0

          For twm use this in your .twmrc:
             NoTitle { "balloon-help" }

     See the `balloon-help.el' file for more information.

`w3m-uri-replace-alist'
     Alist of regexps matching URIs, and some types of replacements.
     It can be used universally to replace URI strings in the local
     rule to the valid forms in the Internet.

     Each element looks like the `(REGEXP FUNCTION OPTIONS...)' form.
     `FUNCTION' takes one or more arguments, a uri and `OPTIONS'.  You
     can use the grouping constructs `\\(...\\)' in `REGEXP', and they
     can be referred by the `\N' forms in a replacement (which is one
     of `OPTIONS').

     Here are some predefined functions which can be used for those
     ways:

     `w3m-pattern-uri-replace'
          Replace a URI using PATTERN (which is just an `OPTION').  It
          is allowed that PATTERN contains the `\N' forms in the same
          manner of `replace-match'.

     `w3m-search-uri-replace'
          Generate valid URLs to query words on some specified search
          engines.  For example, the element

               ("\\`gg:" w3m-search-uri-replace "google")

          makes it possible to replace the URI `gg:emacs' to a query
          for the word `emacs' on the Google search engine.

`w3m-url-local-directory-alist'
     Alist of URLs and local directories.  If directory names of a
     given URL and the car of an element are the same, emacs-w3m
     assumes that the file exists in the local directory where the cdr
     of an element points to.  The default value will be set to a
     value of the `yahtml-path-url-alist' variable which exchanged the
     car and the cdr in each element if it is available.

`w3m-use-ange-ftp'
     Non-`nil' means that `ange-ftp' or `efs' is used to access FTP
     servers.

`w3m-use-cygdrive'
     If non-`nil', use the `/cygdrive/' rule when performing
     `expand-file-name'.

`w3m-use-filter'
     Non-`nil' means use filter programs to convert web contents.  See
     also `w3m-filter-rules'.

`w3m-use-form'
     Non-`nil' means make it possible to use form
     extensions. *(EXPERIMENTAL)*

`w3m-use-header-line'
     Non-`nil' means display the header line.

`w3m-use-mule-ucs'
     Non-`nil' means use the multi-script support with Mule-UCS.

`w3m-use-refresh'
     Non-`nil' means honor the REFRESH attribute in META tags.
     Emacs-w3m arbitrarily takes you to a url specified by that
     attribute.  Note that they may be malicious traps.

`w3m-use-symbol'
     Non-`nil' means replace symbols that the `<_SYMBOL>' tags lead
     into.  It is meaningful only when the `w3m-m17n' command is used
     and (X)Emacs handles unicode charsets.

`w3m-use-tab'
     Non-`nil' means make emacs-w3m a tab browser.  It makes it
     possible to show all emacs-w3m buffers in a single window with
     the tabs line, and you can choose one by clicking a mouse on it.
     Unfortunately, users of Emacs 20 and less cannot enjoy this
     feature.  See also `w3m-use-tab-menubar'.

`w3m-use-tab-menubar'
     Non-`nil' means use the TAB pull-down menu in the menubar.  It
     makes it possible to show all emacs-w3m buffers in a single
     window, and you can choose one by clicking a mouse on it.  This
     feature requires that Emacs has been built to be able to display
     multilingual text in the menubar if you often visit web sites
     written in non-ascii text.  See also `w3m-use-tab'.

`w3m-use-toolbar'
     Non-`nil' activates toolbar of `w3m'.

`w3m-user-agent'
     String used for the User-Agent field.  See also
     `w3m-add-user-agent'.

`w3m-view-this-url-new-session-in-background'
     Run `w3m-view-this-url' without switching to the newly created
     buffer.  It is useful if you enabled the tabs line or the buffers
     selection window for the `w3m-select-buffer' feature.  Note that
     it is meaningful only when specifying a prefix argument to the
     `w3m-view-this-url' command or using the
     `w3m-view-this-url-new-session' command in order to create a new
     emacs-w3m session.



