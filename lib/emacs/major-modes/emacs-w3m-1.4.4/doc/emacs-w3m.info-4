This is emacs-w3m.info, produced by makeinfo version 4.0b from
emacs-w3m.texi.

INFO-DIR-SECTION GNU Emacs Lisp
START-INFO-DIR-ENTRY
* Emacs-w3m: (emacs-w3m).  An Emacs interface to w3m
END-INFO-DIR-ENTRY

   This file documents emacs-w3m, an Emacs interface to w3m.

   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005 TSUCHIYA Masatoshi

   This edition is for emacs-w3m version 1.4.4.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License, Version 2 or any
later version published by the Free Software Foundation.

   This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

   You should have received a copy of the GNU General Public License
along with this document; if not, you can either send email to this
document's maintainer or write to: The Free Software Foundation, Inc.;
59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.


File: emacs-w3m.info,  Node: Trouble FAQ,  Next: Shimbun FAQ,  Prev: General FAQ,  Up: Frequently Asked Questions

Troubleshooting
===============

   * Q. Why can't I enter a password on pages which require
     authentication?

     Make sure the `w3m-async-exec' variable is set to a value other
     than `nil'.

   * Q. Why can't I enter a password for a proxy server which requires
     authentication?

     Make sure the `w3m-async-exec' variable is set to a value other
     than `nil'.

   * Q. Why can't I follow links?

     Emacs-w3m requires a version of w3m which recognizes the `-header'
     option.  Check what version of w3m you use.

   * Q. Why do garbage characters appear?

     It could be caused by the following reasons:

       1. Bad HTML file

          If the character set specified by the `<meta>' tag differs
          from the actual contents in an HTML file, it will not be
          displayed correctly.  Use the command `M-x
          w3m-redisplay-with-charset' or `C c' to set the correct
          character set and to force redisplay of the page.

       2. Limitation of the character sets

          A page written by a character set other than
          ISO-2022-JP(jis), EUC-JP, or SHIFT_JIS may not be displayed
          correctly.  Try one of the following ways:

            a. Any characters defined in Unicode will be displayed
               correctly if you install the Mule-UCS package (*note
               Other Requirements::).  You need to make sure that the
               value of the `w3m-use-mule-ucs' variable is set to a
               value other than `nil' after installing the Mule-UCS
               package.  In addition, if you want to make Emacs (and
               also emacs-w3m) handle the character sets EUC-JISX0213
               and ISO-2022-JP-3, you have to install the `jisx0213'
               module which is contained in the Mule-UCS package
               (though it doesn't work under XEmacs unfortunately).

            b. Install w3mmee or w3m-m17n, and set the `w3m-command'
               variable to the appropriate value.  And emacs-w3m will
               use the multi-lingual features provided by one of those
               programs.  However, a page written by a coding system
               which Emacs doesn't support may not be displayed
               correctly. So please install Mule-UCS package if
               necessary.

       3. Emacsen incompatibility

          Under XEmacs 21.1, pages written by the SHIFT_JIS character
          set may not be displaied correctly.  There is also a problem
          in XEmacs 21.2 prior to the beta 36 version.  You should
          upgrade your XEmacs if you use such one.

          You should notice that XEmacs versions 21.1 and 21.2 have
          already been retired officially.

       4. Don't use `standard-display-european'

          It is generally harmful since it often makes Latin characters
          get displayed incorrectly.  For instance, the apostrophe
          character (`'') which was encoded as `&#8217' will be
          displayed as the character `u' with a grave accent as if it
          had been encoded as `&#249'.  If the line something like the
          following is in your `~/.emacs' file or site files which
          Emacs loads when starting up, we strongly recommend you to
          remove it.

               (standard-display-european 1)

          There the argument might be `t', not `1'.

   * Q. Why can't images be shown?

     It could be caused by the following reasons:

     There is a bug in the earlier versions of the `libungif' library.
     You have to install `libungif-4.1.0b1' and later.

     You must install the `gifsicle' program if you want to run
     emacs-w3m under XEmacs.  *Note Other Requirements::.

     Emacs-w3m doesn't support the old versions of w3m.  Check what
     version of w3m you use.

   * Q. Why can't I browse pages which require cookies?

     (This is still an experimental feature.)

     Make sure the `w3m-use-cookies' variable is set to a value other
     than `nil'.

   * Q. Why can't I fill in the form?

     (This is still an experimental feature.)

     Make sure the `w3m-use-form' variable is set to a value other than
     `nil'.

   * Q. Why can't I submit a form?

     (This is still an experimental feature.)

     Make sure the `w3m-use-form' variable is set to a value other than
     `nil'.  You also need to use a version of w3m which recognizes the
     `-post' option in order to use this function.  Check what version
     of w3m you use.

   * Q. Why are frames not rendered?

     Install w3mmee and put the following line in your `~/.emacs' file:

          (setq w3m-command "w3mmee")

   * Q. Why are favicon images not displayed in the Emacs 21 tab bar?

     Install the `convert' program which is included in ImageMagick.
     It is available from: `http://www.imagemagick.org/'

   * Q. Why does Emacs 21 get locked when a favicon image is going to be
     displayed?

   * Q. My computer accesses the disk drive violently and says `process
     convert exited abnormally with code 10'.  What's the story?

     Do you use an old version of ImageMagick?  As far as we know, it
     happens when you use the `convert' program bundled with
     ImageMagick 5.2.1.  It has been confirmed that the `convert'
     program bundled with ImageMagick 5.4.0-5 (and later) works fine.

     If you don't want to use ImageMagick, or if you can't use its most
     recent version, add the following line in your `~/.emacs-w3m' file:

          (setq w3m-use-favicon nil)

   * Q. Why does not emacs-w3m work with w3mmee?

     If you are using w3mmee configured with the option `lang=en' or
     `lang=ja', reconfigure w3mmee with the option `lang=many' (it can
     be done by entering 3, when the `configure' script prompts you,
     "Which language do you prefer?"), and rebuild w3mmee.

   * Q. Why I cannot visit web pages using emacs-w3m?  There is no
     problem when visiting local html files or using w3m barefoot,
     though.

     What is called the asynch patch(1) is applied to the w3m command
     which some Linux distribution (e.g. Gentoo Linux) contains.  It is
     useful when using w3m barefoot, however it might make emacs-w3m
     hang.  If it is suspected, we recommend you reinstall the w3m
     command from the original source.

   ---------- Footnotes ----------

   (1) w3m on cygwin (http://www.page.sannet.ne.jp/knabe/w3m/w3m.html)


File: emacs-w3m.info,  Node: Shimbun FAQ,  Prev: Trouble FAQ,  Up: Frequently Asked Questions

Questions of Shimbun Library
============================

   * Q. Why are the `shimbun' modules not installed?

     Note that the `shimbun' modules (files under the `shimbun/'
     directory) won't be installed if the FLIM package has not been
     installed in your system.

     The `configure' script determines automatically whether the FLIM
     package is installed or not.  If the FLIM package is installed in
     a non-standard directory, the determination fails.  In this case,
     you can use the `--with-addpath' configure option to explicitly
     set the directory name where the FLIM package has been installed.
     Here's an example:

          % ./configure --with-addpath=$HOME/share/emacs/site-lisp/flim


File: emacs-w3m.info,  Node: Known Problems,  Next: Shimbun Library,  Prev: Frequently Asked Questions,  Up: Top

You can surely solve it
***********************


File: emacs-w3m.info,  Node: Shimbun Library,  Next: Tips,  Prev: Known Problems,  Up: Top

A tool for reading a newspaper
******************************

   More and more newspapers, mailing list archives, bulletin boards, and
individual diaries (such as hyper nikki system, weblogs and blogs) are
published on the web.  `Shimbun' library enables you to read those
contents with your favorite mail/news reader.  Actually, `Shimbun'
library provides functions to convert those contents into articles like
common e-mails.

     `Shimbun' is pronounced "she-n-boon" (but actually vowels
     shouldn't be prolonged), it means "newspaper" in Japanese.

   `Shimbun' library currently supports Asahi Shimbun, Yomiuri On-line,
many maling list archives such as Emacs Devel, XEmacs Beta, Gnus, Mew,
and Wanderlust, the Japanese Prime Minister Koizumi's mail magazine,
Slashdot Japan, and a lot of others.  For more detail, see *Note
Shimbun Sites::.

   By the way, you have to pay attention to copyright when using
`Shimbun' library.  Copyrights of articles generated with `Shimbun'
library are reserved by copyright holders of those original contents.
Therefore, you are obliged not to violate rights of copyright holders,
when you enjoy generated articles.  It means that you can enjoy
generated articles on "fair use" that is described in the copyright law.

   We, emacs-w3m development team, give no warranty to you, if
`Shimbun' library causes a damage to you, or if you face a lawsuit
about violation of copyrights.

   `Shimbun' library is a collection of many modules, but each of them
serves no useful purpose alone.  This section explains three typical
`Shimbun' applications (two of which are included in the `Shimbun'
library) and how to make `Shimbun' modules by yourself (you need to be
able to write Emacs Lisp programs).

* Menu:

* Nnshimbun::                   Turning Gnus into a web browser!
* Mew Shimbun::                 Reading web newspapers with Mew
* Shimbun with Wanderlust::     Reading web newspapers with Wanderlust
* Shimbun Sites::               Sites supported by Shimbun
* Shimbun Basics::              How to make a new shimbun module

   Note that you need to have installed the FLIM package (and Gnus if
you'd like to use `nnshimbun') before building and installing
emacs-w3m.  The FLIM package requires the APEL package.  You might also
want to see *Note Other Requirements::.


File: emacs-w3m.info,  Node: Nnshimbun,  Next: Mew Shimbun,  Up: Shimbun Library

Turning Gnus into a web browser!
================================

   `Nnshimbun' is a Gnus back end, but it is distributed with
emacs-w3m, not Gnus, exceptionally.  `Nnshimbun' allows you to turn
Gnus into an exceptionally useful web browser.  You can skim through the
articles on a newspaper's web server without having to see all the
advertisement.  You can read articles in mailing list archives as if you
were subscribed to the list.  You can also read submissions in bulletin
boards, etc...  Note that if you want to followup, you still need to use
emacs-w3m as Gnus can't post via the web with `nnshimbun'.

   See also *Note Gnus:: for rendering HTML messages with emacs-w3m if
you use Gnus, see *Note SEMI MUAs:: for T-gnus or Nana-gnus instead.

   The easiest way to get started with `nnshimbun' is to use something
like the following in the Group buffer:

   `M-x gnus-group-make-shimbun-group RET asahi RET national RET'

Replace `asahi' and `national' with the keyword corresponding to the
server you'd like to connect to and the group you're interested in
respectively.  You can complete both of those names by using <TAB> or
<SPC>.

   You can also bind that to a key if there's enough room in the
`gnus-group-mode-map' map, you can add something like the following in
your `~/.gnus.el' file (T-gnus users, you don't need to bother to add
it, since there's already the similar thing in T-gnus):

     (eval-after-load "gnus-group"
       '(define-key gnus-group-mode-map "Gn"
          'gnus-group-make-shimbun-group))

Then, you can use `G n' instead of `M-x gnus-group-make-shimbun-group'.

   _Could someone book this keystroke at the Gnus Tower?_

   `Nnshimbun' simply fetches HTML contents from the web server and
displays them as an article, but it will never save articles in the
local file system, except if you use persistent articles (*note
Persistent Articles: (gnus)Persistent Articles.).  `Nnshimbun' uses NOV
files for each `nnshimbun' group, and its back end is almost the same as
`nnml'.

   The following `nnshimbun' variables can be customized:

`nnshimbun-keep-backlog'
     This variable overrides the `gnus-keep-backlog' variable (*note
     Article Backlog: (gnus)Article Backlog.) in `nnshimbun' groups.
     If you set `nnshimbun-keep-backlog' to a number N, `nnshimbun'
     will store at most N old articles in a buffer for later
     re-fetching.  If this variable is non-`nil' and is not a number,
     `nnshimbun' will store _all_ read articles (this is not a good
     idea).  The default value is 300.

     Note that smaller values may spoil the `prefetch-articles' feature
     (see below), since `nnshimbun' uses the backlog to keep the
     prefetched articles.

`nnshimbun-directory'
     Directory where `nnshimbun' saves NOV files.  The default value is
     `~/News/shimbun/'.

   You can use the specially made group parameter for `nnshimbun' in
addition to the standard group parameters provided by Gnus(1).  Several
parameters for `nnshimbun' are collected into the single group
parameter `nnshimbun-group-parameters' which is a property list (the
values can be different for every group).  Here's an example:

     '(index-range all prefetch-articles off encapsulate-images on
                   expiry-wait 6)

   Below is the documentation for those group parameters and related
variables.

`prefetch-articles'
     In a group where this group parameter is set to something else than
     `off' or `nil', `nnshimbun' not only checks for new articles, but
     also downloads them.  Though it will slow checking of new articles
     down, you won't be kept waiting when reading articles.  In the
     group where this group parameter is not set or its value is `nil',
     the value of the `nnshimbun-pre-fetch-article' variable (`off' by
     default) is used instead.

`encapsulate-images'
     In a group where this group parameter is set to something else than
     `off' or `nil', `nnshimbun' will put image data embedded in the
     original contents into an article as `multipart/related' parts of
     the MIME format.  In the group where this group parameter is not
     set or its value is `nil', the value of the
     `nnshimbun-encapsulate-images' variable is used instead.  The
     default value for the `nnshimbun-encapsulate-images' variable is
     the value of the `shimbun-encapsulate-images' variable which is
     provided in the `shimbun' library (the default value is probably
     `t').

`index-range'
     You can specify the range of articles to be fetched from the web
     server using the `index-range' group parameter.  To specify the
     range, use the following values:

    `nil'

    `all'
          all pages

    `last'
          only the latest page

    `integer N'
          the latest N pages

     `Nnshimbun' checks whether there are new articles by parsing the
     index page of the server.  It is possible that there are two or
     more index pages on the server.  For instance, in the case of the
     mailing list servers, index pages are generally classified
     according to the date on which the article was posted.  It would
     take a considerable amount of time to check all those huge index
     pages especially if you are connecting via a slow line.

     If it is possible, `nnshimbun' won't check index pages which have
     already been checked at the last connection.  If you want to save
     even more time, use `last'.  It makes `nnshimbun' refer to only the
     latest index page for checking new articles.

     In the group where the `index-range' group parameter is not set or
     its value is `nil', the value of the `nnshimbun-index-range'
     variable (`nil' by default) is used.

`nnshimbun-group-parameters-alist'
     This is an Emacs Lisp variable, an alist of regexp of group names
     and `nnshimbun' group parameters.  The default value is `nil'.
     Each element may have the form `(REGEXP KEYWORD VALUE KEYWORD
     VALUE...)', for example:

          '("^nnshimbun\\+asahi:" index-range all prefetch-articles off
            encapsulate-images on expiry-wait 6)

     Since you can use this variable to specify the same `nnshimbun'
     group parameters for two or more groups which have similar names
     (i.e., those groups are likely to have similar characteristics
     each other), it is useful that it can be used instead of
     specifying the `nnshimbun' group parameters to several groups
     respectively.  If the group parameter has already been set in a
     group, that takes precedence over this variable.

   You can instruct `nnshimbun' to expire articles(2).  Keep in mind
that when an article is expired, it is not deleted from the remote
server, it's still available there.  What is deleted is the line in
your own NOV file for `nnshimbun'(3) corresponding to the article to be
expired.  Then the article won't appear in the Summary buffer, forever
and ever.

   If you don't expire articles in `nnshimbun' groups, the NOV files
will continue to grow fat indefinitely and you may see very old
articles in the Summary buffer as if they were existing (in fact, they
might have expired three years ago on the remote server!).  Even if you
try to read such an article, nothing will appear in the article buffer.
On the other hand, most mailing list servers generally offer all the
past articles.  You may not feel like expiring articles in such groups
in order to look back with nostalgia to the good old days and to be
able to read, eyes filled with tears, articles which you thought long
gone.

   You can mark `nnshimbun' articles as expirable and specify the
expiry period in each `nnshimbun' group as well as the other mail back
ends.  However, there are a little differences between `nnshimbun' and
the other mail back ends:

   * First of all, the expiry period is determined with the following
     priorities.  Note that the default value might be different from
     group to group.

       1. The value of the `expiry-wait' group parameter in a group.

       2. The value produced by evaluating the
          `nnmail-expiry-wait-function' variable for a group.

       3. The default value provided by the `shimbun' module
          corresponding to a group.

       4. The value of the `nnmail-expiry-wait' variable.

   * Second of all, the argument to be passed to the function specified
     by the `nnmail-expiry-wait-function' variable will contain the
     names of the back end and the server like
     "nnshimbun+asahi:national", while only the group name will be
     given in the case of the other mail back ends.  Here's an example:

          (setq nnmail-expiry-wait-function
                (lambda (group)
                  (cond ((string-equal group "ding") 7)
                        ((string-equal group "nnshimbun+ding:ding") 'never))))

     This means that there are two groups for the same ding mailing
     list; one is subscribed as a list member, the other is for reading
     from the mailing list archive at the Gnus Towers.  Ahem, isn't it
     clever?  The local mail files in the "ding" group will be expired
     in seven days and your local disk space will be saved, but you can
     read even the articles of the last century in the second group (if
     it is really needed, though).

   * Third of all, and this is written down so that you can remember it
     when you're filled with doubt: even when all articles from a
     `nnshimbun' group should be expired, the most recent one will be
     kept.  This is not to satisfy your indecisive heart, it's because
     the next time you fetch new articles for this group, `nnshimbun'
     will know where to begin and not fetch all the articles all over
     again.

   The group parameters and the variables related to expiring
`nnshimbun' articles are:

`expiry-wait'
     Don't be confused, please.  The `expiry-wait' group parameter is
     provided as one of the elements of `nnshimbun-group-parameters',
     the specially made group parameter for `nnshimbun'.  It has the
     same name and the same meaning as the standard group parameter.
     You may use whichever you like.  If nnshimbun's one is set to
     non-`nil' value, it takes precedence over the standard one.  It is
     provided in order to concentrate things related to `nnshimbun' at
     one place of the "Gnus Customize" buffer (which will appear by
     typing `G c' in the group buffer) and to realize managing
     collectively by the `nnshimbun-group-parameters-alist' variable(4).
     The values which can be used are a number of expiry period, `never'
     or `immediate' as well as the standard group parameter.

`nnshimbun-keep-unparsable-dated-articles'
     If this variable is non-`nil', the articles of which the time of
     creation (or the time of arrival) is unknown will never be expired,
     since their age is unknown.  The default is `t'.  If you set this
     variable to `nil', the articles of which the time is unknown will
     also be expired unconditionally when the time to expire has come.
     Well, it might prove useful for a general cleaning at the end of a
     year.

   ---------- Footnotes ----------

   (1) The easiest way to specify group parameters is to type `G c' in
the group buffer after moving the point to the group you'd like to
customize (*note Group Parameters: (gnus)Group Parameters.).

   (2) There are mainly two ways to expire articles automatically in
the `nnshimbun' groups.  One is to add a group name regular expression
(it should begin with "^nnshimbun\\+") to the
`gnus-auto-expirable-newsgroups' variable and to put the expiry period
for each group into the `nnmail-expiry-wait-function' variable.
Another is to set the `auto-expire' group parameter to `t' and to set
the expiry period with the `expiry-wait' group parameter in every
`nnshimbun' group which you want to expire automatically.  See *Note
(gnus)Expiring Mail:: for more information.  In the group to which the
`expiry-wait' group parameter is not specified, a default expiry period
will be applied.

   (3) The NOV file for `nnshimbun' is named something like
"~/News/shimbun/asahi/national/.overview".

   (4) We've already prepared the answer to the question that why
`auto-expire' etc. aren't included in the nnshimbun's special group
parameter?  The answer is, `expiry-wait' is handled by the `nnshimbun'
back end, but `auto-expire' is handled by the Gnus core.  Therefore, it
is contrary to the design policy of Gnus to extend the Gnus core
functions so that it may work for one particular back end (i.e. reading
a value from the nnshimbun's special group parameter).


File: emacs-w3m.info,  Node: Mew Shimbun,  Next: Shimbun with Wanderlust,  Prev: Nnshimbun,  Up: Shimbun Library

Reading web newspapers with Mew
===============================

   Mew Shimbun is an Emacs Lisp program meant to be used with `shimbun'
and Mew (version 2.1 and later).  The `mew-shimbun' module will be
installed together with emacs-w3m if Mew, APEL, and FLIM are also
installed.

   We recommend you also see *Note Mew::.

  1. Setting things up

     Put the following lines in the last of the `~/.mew.el' file:

     ;;; Loading mew-shimbun, defining keys.
     ;; (setq mew-shimbun-use-unseen t)              ;;; (1)
     (require 'mew-shimbun)
     (define-key mew-summary-mode-map "G"  (make-sparse-keymap))
     (define-key mew-summary-mode-map "Gg" 'mew-shimbun-goto-folder)
     (define-key mew-summary-mode-map "GG" 'mew-shimbun-goto-unseen-folder)
     (define-key mew-summary-mode-map "Gi" 'mew-shimbun-retrieve)
     (define-key mew-summary-mode-map "GI" 'mew-shimbun-retrieve-all)
     (define-key mew-summary-mode-map "Gr" 'mew-shimbun-re-retrieve)
     (define-key mew-summary-mode-map "GR" 'mew-shimbun-re-retrieve-all)
     (define-key mew-summary-mode-map "Ge" 'mew-shimbun-expire)
     (define-key mew-summary-mode-map "GE" 'mew-shimbun-expire-all)
     
     ;; Specifying `shimbun' servers and groups to be read with Mew in the
     ;; `mew-shimbun-folder-groups' variable.  Each element has the form
     ;; `("folder" ("server.group" . range) ...)'.  You can use `all',
     ;; `last', and a number for the `range' item.
     
     (setq mew-shimbun-folder-groups
           '(;; Fetching `yomiuri.shakai', `yomiuri.sports', etc.
             ;; into the `+shimbun/yomiuri' folder collectively.
             ("yomiuri"
              ("yomiuri.shakai" . 2)
              ("yomiuri.sports". 2)
              ("yomiuri.kokusai". 2))
             ;; Fetching `security-memo.memo'
             ;; into `+shimbun/security-memo'.
             ("security-memo"
              ("security-memo.memo" . 2))
             ("slashdot-jp"
              ("slashdot-jp.story" . last))
             ;; You can read several groups in one folder (`+shimbun/emacs')
             ;; as follows even if each group comes from a different server.
             ("emacs"
              ("airw.wl" . last)
              ("emacs-w3m.emacs-w3m" . last))
             ;; Fetching diaries into `+shimbun/hns/arisawa' and
             ;; `+shimbun/hns/miyoshi' respectively.
             ("hns/arisawa"
              ("hns.arisawa" . last))
             ("hns/miyoshi"
              ("hns.miyoshi" . last))))

     You did the fundamental setups.  For the other user definable
     variables, use `M-x customize-group' for the `mew-shimbun' group
     or see the source code.

  2. Reading `shimbun' messages

       a. Getting started

          Type `G I' (`mew-shimbun-retrieve-all') first, after setting
          things up as mentioned above.  The `shimbun' folders
          specified by the `mew-shimbun-folder-groups' variable will be
          created under the `+shimbun' parent folder.  Typing `G I' is
          also useful when you have added new groups.  You can change
          the name of the parent folder (`+shimbun' by default) by
          customizing the `mew-shimbun-folder' variable.

       b. Moving into a `shimbun' folder

          You can move to any folder (including `shimbun') by typing `g'
          (`mew-summary-goto-folder'), but `G g'
          (`mew-shimbun-goto-folder') is restricted to moving to only
          the `shimbun' folder.  In addition, folders which have new
          messages (in other words, folders which have not been
          scanned) will be displayed when using a prefix argument with
          `G g' (i.e. `C-u G g').  A prefix argument similarly affects
          `G G' as well.

       c. Fetching messages in each folder

          You can fetch new messages for the current folder exclusively
          by typing `G i' (`mew-shimbun-retrieve') in a `shimbun'
          folder.

       d. Fetching updated messages

          If you perform the `G r' command (`mew-shimbun-re-retrieve')
          when a particular message is being displayed, the message
          will be updated if it is possible, and new messages will be
          fetched.  With a prefix argument (i.e. `C-u G r'), it will
          attempt to update messages which are marked with the mark
          specified by the `mew-shimbun-mark-re-retrieve' variable (`@'
          by default).  It would be useful for CNET, etc.

          The `G R' command (`mew-shimbun-re-retrieve-all') checks the
          freshness of all messages and re-fetches the updated
          messages.  If a prefix argument is given (i.e. `C-u G R'),
          the messages within the region will be processed.  It is
          probably worthwhile if the site is running the hyper nikki
          system (`nikki' means "diary" in Japanese).

  3. Managing unseen messages

     If you have the following setting in the `~/.mew.el' file,

          (setq mew-shimbun-use-unseen t)

     newly fetched messages will be marked with the mark specified by
     the `mew-shimbun-mark-unseen' variable (`*' by default), and it
     will disappear automatically after reading the message.

     Normally, the unseen marks will not be saved in the `.mew-cache'
     file if scanning is not performed after adding or deleting marks
     in the Mew summary mode, but if you add the following line to the
     `~/.mew.el' file,

          (setq mew-shimbun-use-unseen-cache-save t)

     the unseen marks will be saved in the `.mew-cache' file
     automatically for the `shimbun' groups when exiting Mew or killing
     a folder (using `C-c C-q').  However, it is not securely saved
     (2).  To do this securely, you had better have the habit of
     performing the `scan update' command after reading the folder.

     If you don't like the `*' mark for unseen messages, customize the
     `mew-shimbun-mark-unseen' variable (see above).  By specifying the
     mark by `C-u N', you will be able to lead a better life with
     taking care of unseen messages.

  4. Expiring messages

     You can expire messages if you set the `mew-shimbun-expires'
     variable beforehand.  For example:

          (setq mew-shimbun-expires
                '(("yomiuri" . 7)
                  ("asahi" . 1)
                  ("slashdot-jp" . 7)
                  ("emacs" . 7)))

     If you set this variable as shown above, you can specify the expiry
     period; 7 days for `+shimbun/yomiuri', 1 day for `+shimbun/asahi'.
     Messages in the `shimbun' folder where the expiry period is not
     specified will never be expired.  You can use the `G e' command
     (`mew-shimbun-expire') to expire the expirable messages in the
     current folder.  The `G E' command (`mew-shimbun-expire-all') is
     for expiring the expirable messages in all the `shimbun' folders.
     Note that once the messages have been expired, you cannot recover
     them.

  5. How to mark messages with `$' as unseen

     Put the following lines in the `~/.mew.el' file in order to define
     the `$' mark and use `$' for the mark of unseen.  See
     `http://www.mew.org/ml/mew-dist-2.0/msg01251.html' if you would
     like to replace the `$' mark with another.

     ;;----------------------------------------------------------------------
     ;;; Code for using `$' as the unseen mark.
     (setq mew-mark-unseen ?$)
     (setq mew-shimbun-mark-unseen mew-mark-unseen)
     (setq mew-mark-show-list (cons mew-mark-unseen mew-mark-show-list))
     (setq mew-mark-afterstep-spec
           (cons (cons mew-mark-unseen '(1 0 1 0 0 0 0))
                 mew-mark-afterstep-spec))
     (setq mew-mark-spec
           (cons (list mew-mark-unseen "unseen" 0 nil nil nil nil nil)
                 mew-mark-spec))
     (setq mew-highlight-mark-keywords
           (cons
            (cons mew-mark-unseen 'mew-face-mark-unseen)
            mew-highlight-mark-keywords))
     (defface mew-face-mark-unseen
       '((((class color) (type tty))
          (:foreground "green"))
         (((class color) (background light))
          (:foreground "deep pink" :bold t :italic t))
         (((class color) (background dark))
          (:foreground "thistle"))
         (t (:bold t)))
       "*Face to highlight the unseen mark"
       :group 'mew-highlight)
     (defun mew-summary-unseen (&optional count)
       "Put the unseen mark(default is '$') in COUNT times."
       (interactive "P")
       (mew-mark-put-mark-loop (function mew-summary-unseen-one) count nil))
     (defun mew-summary-unseen-one (&optional no-msg)
       "Put the unseen mark(default is '$') on this message."
       (mew-mark-put-mark mew-mark-unseen no-msg))
     (defun mew-summary-mark-unseen ()
       "Change the '*' mark into the '$' mark."
       (interactive)
       (mew-summary-exchange-mark mew-mark-review mew-mark-unseen))
     (defun mew-thread-mark-unseen ()
       "Put the '$' mark on all messages of the current sub-thread."
       (interactive)
       (mew-thread-mark mew-mark-unseen))
     
     (define-key mew-summary-mode-map "$"  'mew-summary-unseen)
     (define-key mew-summary-mode-map "m$" 'mew-summary-mark-unseen)
     (define-key mew-summary-mode-map "t$" 'mew-thread-mark-unseen)
     ;;----------------------------------------------------------------------

   ---------- Footnotes ----------

   (1) Uncomment this line if you'd like to manage unseen messages.  It
must be placed before the `(require 'mew-shimbun)' line.

   (2) People who have set the `mew-touch-folder-p' variable to `t'
will succeed 100% in saving marks, but people who use `nil' value seem
not to be 0% successful.


File: emacs-w3m.info,  Node: Shimbun with Wanderlust,  Next: Shimbun Sites,  Prev: Mew Shimbun,  Up: Shimbun Library

Reading web newspapers with Wanderlust
======================================

   Wanderlust includes `elmo-shimbun' as an ELMO module, so you can
read `shimbun' by just accessing a folder beginning with `@' (*note
Shimbun Folder: (wl)Shimbun Folder.).


File: emacs-w3m.info,  Node: Shimbun Sites,  Next: Shimbun Basics,  Prev: Shimbun with Wanderlust,  Up: Shimbun Library

Sites supported by Shimbun
==========================

   This section provides the list of sites supported by `shimbun'
library.  Unfortunately for people who cannot understand Japanese,
almost of supported sites are written in Japanese.

* Menu:

* Newspapers Supported by Shimbun::
* News Sites Supported by Shimbun::
* Mailing Lists Supported by Shimbun::
* Sport Sites Supported by Shimbun::
* Misc Sites Supported by Shimbun::


File: emacs-w3m.info,  Node: Newspapers Supported by Shimbun,  Next: News Sites Supported by Shimbun,  Up: Shimbun Sites

Newspapers Supported by Shimbun
-------------------------------

   These are newspapers that are supported by `shimbun' library.

Asahi Shimbun (http://www.asahi.com/)
     asahi.book asahi.business asahi.business.column asahi.car
     asahi.car.italycolumn asahi.car.motorsports asahi.car.newcar
     asahi.car.newcarbywebcg asahi.culture asahi.culture.column
     asahi.digital asahi.digital.apc asahi.digital.bcnnews
     asahi.digital.column01 asahi.digital.hotwired
     asahi.digital.internet asahi.digital.mobile asahi.digital.nikkanko
     asahi.digital.pc asahi.editorial asahi.edu asahi.edu.column
     asahi.edu.it asahi.edu.kosodate asahi.edu.nyushi asahi.edu.tamate
     asahi.english asahi.health asahi.health.aged asahi.health.alz
     asahi.health.medical asahi.housing asahi.housing.amano
     asahi.housing.column asahi.housing.diary asahi.housing.world
     asahi.igo asahi.international asahi.international.jinmin asahi.job
     asahi.job.special asahi.kansai asahi.kansai.horiekenichi
     asahi.kansai.umaimon asahi.kansai.fuukei asahi.kansai.yotsuba
     asahi.kansai.smile asahi.kansai.keiki asahi.kansai.okiniiri
     asahi.kansai.syun asahi.kansai.takara asahi.kansai.kansaiisan
     asahi.kansai.depa asahi.kansai.kaban asahi.kansai.kyosho
     asahi.kansai.okan asahi.kansai.densetsu asahi.kansai.onayami
     asahi.kansai.sanshi asahi.life asahi.life.column asahi.life.food
     asahi.nankyoku asahi.nankyoku.borderless asahi.nankyoku.people
     asahi.nankyoku.whitemail asahi.national asahi.national.calamity
     asahi.national.etc asahi.national.trial asahi.obituaries
     asahi.politics asahi.rss asahi.science asahi.shopping
     asahi.shopping.kishi asahi.shopping.ryouhin asahi.shougi
     asahi.sports asahi.sports.baseball asahi.sports.column
     asahi.sports.football asahi.sports.spo asahi.tenjin asahi.travel
     asahi.travel.kaido asahi.travel.matsuri asahi.travel.zeitaku
     asahi.wakamiya

     These backends generates articles including only texts; in other
     hands, `asahi-html' generates MIME articles that include texts and
     photographs.  In order to use the latter backend, specify
     asahi-html.business instead of asahi.business as the group name.
     Especially, it is recommended to use `asahi-html' in order to see
     the groups in which there are pictures.

Asahi Shimbun (http://mytown.asahi.com/)
     asahi-mytown.(hokkaido...okinawa) asahi-mytown.usa

     The Asahi Shimbun local-news sections including US and all the
     prefectures of Japan.

MSN-Mainichi INTERACTIVE (http://www.mainichi-msn.co.jp/)
     mainichi.geinou mainichi.it mainichi.kagaku.env
     mainichi.kagaku.medical mainichi.kagaku.science mainichi.keizai
     mainichi.kokusai mainichi.kurashi mainichi.seiji mainichi.shakai
     mainichi.shakai.edu mainichi.sports

Nikkan Sports (http://www.nikkansports.com/)
     nikkansports.baseball nikkansports.mlb nikkansports.soccer
     nikkansports.world-soccer nikkansports.sports nikkansports.battle
     nikkansports.horseracing nikkansports.entertainment
     nikkansports.society nikkansports.leisure

Nihon Keizai Shimbun (http://www.nikkei.co.jp/)
     nikkei.top nikkei.main nikkei.keizai nikkei.sangyo nikkei.tento
     nikkei.zinzi nikkei.report nikkei.kansai nikkei.it nikkei.kokunai
     nikkei.it.zensen nikkei.it.seisaku nikkei.it.manage
     nikkei.it.digicore nikkei.markets nikkei.kawase nikkei.kinri
     nikkei.ft nikkei.dj nikkei.ngyoseki nikkei.gyosuuchi
     nikkei.gyoseki nikkei.market nikkei.kaigai nikkei.seiji
     nikkei.shakai nikkei.sports nikkei.newpro nikkei.release
     nikkei.shasetsu nikkei.okuyami

Sponichi (http://www.sponichi.co.jp/)
     sponichi.baseball sponichi.soccer sponichi.usa sponichi.others
     sponichi.society sponichi.entertainment sponichi.horseracing

Yomiuri Shimbun (http://www.yomiuri.co.jp/)
     yomiuri.business yomiuri.culture yomiuri.editorial yomiuri.kyoiku
     yomiuri.national yomiuri.obit yomiuri.politics yomiuri.science
     yomiuri.sports yomiuri.world

     The backend, `yomiuri-html', is also supported.

Sankei Shimbun (http://www.sankei.co.jp/)
     sankei.shakai sankei.sports sankei.keizai sankei.seiji
     sankei.kokusai sankei.bungei sankei.book sankei.person sankei.dead

BBC (http://www.bbc.co.uk/)
     bbc.news

Spiegel Online (http://www.spiegel.de/)
     spiegel.news


File: emacs-w3m.info,  Node: News Sites Supported by Shimbun,  Next: Mailing Lists Supported by Shimbun,  Prev: Newspapers Supported by Shimbun,  Up: Shimbun Sites

News Sites Supported by Shimbun
-------------------------------

   These are news sites that are supported by `shimbun' library.

CNET (http://news.com.com/)
     cnet.news cnet.enterprise.software cnet.enterprise.hardware
     cnet.security cnet.networking cnet.personal.technology
     cnet.newsmakers cnet.perspectives

CNET Japan (http://japan.cnet.com/)
     cnet-jp.news cnet-jp.blog.kenn cnet-jp.blog.lessig
     cnet-jp.blog.watanabe cnet-jp.blog.editors

CNN Japan (http://www.cnn.co.jp/)
     cnn-jp.business cnn-jp.fringe cnn-jp.science cnn-jp.showbiz
     cnn-jp.sports cnn-jp.top cnn-jp.usa cnn-jp.world

Excite News (http://www.excite.co.jp/)
     excite.bit-koneta excite.world-odd

FAU-IAA (http://www.fau.org/)
     fau.news

Heise Online (http://www.heise.de/)
     heise.news heise.telepolis

Impress (http://www.watch.impress.co.jp/)
     impress.enterprise impress.pc impress.dc impress.akiba impress.av
     impress.game impress.k-tai impress.internet impress.bb
     impress.forest

ITmedia (http://www.itmedia.co.jp/)
     itmedia.anchordesk itmedia.bursts itmedia.enterprise itmedia.games
     itmedia.lifestyle itmedia.mobile itmedia.news itmedia.pcupdate
     itmedia.technology

Japan Times (http://www.japantimes.co.jp/)
     japantimes.general japantimes.business

LAUT AG (http://www.laut.de/)
     laut-de.news laut-de.platten laut-de.platten_alternative
     laut-de.platten_dance laut-de.platten_hiphop platten_jazz
     laut-de.platten_metal laut-de.platten_pop laut-de.platten_rnb
     laut-de.platten_rock

japan.linux.com (http://japan.linux.com/)
     linux-ja.news linux-ja.desktop linux-ja.enterprise linux-ja.kernel
     linux-ja.opensource linux-ja.security

N24 (http://www.n24.de/)
     n24-de.boerse n24-de.boulevard n24-de.nachrichten n24-de.netnews
     n24-de.politik n24-de.sport n24-de.wirtschaft

Rediff.com (http://www.rediff.com/)
     rediff.news

Slashdot Japan (http://slashdot.jp/)
     slashdot-jp.story slashdot-jp.askslashdot slashdot-jp.bookreview
     slashdot-jp.bsd slashdot-jp.developers slashdot-jp.interview
     slashdot-jp.linuxkernel slashdot-jp.mac slashdot-jp.mobile
     slashdot-jp.science slashdot-jp.security slashdot-jp.slash
     slashdot-jp.diary.oliver

     Add appropriate configurations to the variable
     `shimbun-slashdot-jp-group-alist', you can browse other diaries
     provided at `http://slashdot.jp/'.

Weekly World News (http://www.weeklyworldnews.com/news/)
     weeklyworldnews.news

Die Welt (http://www.welt.de/)
     welt-de.news

HotWired Japan (http://hotwired.goo.ne.jp/)
     wired.business wired.culture wired.technology

HotWired Japan (http://hotwired.goo.ne.jp/) (Experimental Module)
     wired-jp.news wired-jp.business wired-jp.culture
     wired-jp.technology wired-jp.blog.ogura wired-jp.blog.sasaki
     wired-jp.blog.takahashi

Yahoo! Japan (http://headlines.yahoo.co.jp/)
     yahoo.politics yahoo.society yahoo.people yahoo.business-all
     yahoo.market yahoo.stock yahoo.industry yahoo.international
     yahoo.entertainment yahoo.sports yahoo.computer yahoo.hokkaido
     yahoo.tohoku yahoo.kanto yahoo.sinetsu yahoo.hokuriku yahoo.tokai
     yahoo.kinki yahoo.chugoku yahoo.sikoku yahoo.kyushu yahoo.okinawa

Die Zeit (http://www.zeit.de/)
     zeit-de.news

