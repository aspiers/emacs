Info file: emacs-w3m.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `emacs-w3m.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.


INFO-DIR-SECTION GNU Emacs Lisp
START-INFO-DIR-ENTRY
* Emacs-w3m: (emacs-w3m).  An Emacs interface to w3m
END-INFO-DIR-ENTRY


This file documents emacs-w3m, an Emacs interface to w3m.

Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005
TSUCHIYA Masatoshi

This edition is for emacs-w3m version 1.4.4.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License, Version 2 or any
later version published by the Free Software Foundation.

This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this document; if not, you can either send email to this
document's maintainer or write to: The Free Software Foundation, Inc.;
59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.





File: emacs-w3m.info, Node: Image Variables, Next: Form Variables, Prev: General Variables, Up: Customizable Variables

Variables related to images
===========================

`w3m-default-display-inline-images'
     Non-`nil' means display images inline in emacs-w3m buffers.  You
     can toggle the visibility of images with the
     `w3m-toggle-inline-images' command.  See also
     `w3m-toggle-inline-images-permanently'.

`w3m-favicon-cache-expire-wait'
     The cache will be expired after specified seconds passed since
     retrieval.  If this variable is `nil', never expired.

`w3m-favicon-cache-file'
     Filename of saving favicon cache.  It defaults to the file named
     `.favicon' under the directory specified by the
     `w3m-profile-directory' variable.

`w3m-favicon-size'
     Size of favicon. This value is used as geometry argument for
     `convert'.

`w3m-favicon-type'
     Image type of display favicon.

`w3m-favicon-use-cache-file'
     If non-`nil', use favicon cache file.

`w3m-icon-directory'
     Directory where emacs-w3m should find icon files.

`w3m-imagick-convert-program'
     Program name of ImageMagick's `convert'.

`w3m-treat-image-size'
     Non-`nil' means let the `w3m' command mind the ratio of the size
     of images and text.  The default value is `t'.

     If it is non-`nil', the `w3m' command will make a `halfdump'
     which reserves rectangle spaces in which images will be put, and
     also `alt' texts will be truncated or padded with spaces so that
     their display width will be the same as the width of images.

     See also `w3m-pixels-per-character' and `w3m-pixels-per-line'.
     Those values will be passed to the `w3m' command in order to
     compute columns and lines which images occupy.

`w3m-pixels-per-character'
     Integer used for the `-ppc' argument of the `w3m' command.  If
     `nil', the width of the default face is used.  It is valid only
     when `w3m-treat-image-size' is non-`nil'.  The default value is
     `nil'.  If you want to use emacs-w3m in a character terminal and
     make `w3m-treat-image-size' effective, you need to set this
     variable properly.

`w3m-pixels-per-line'
     Integer used for the `-ppl' argument of the `w3m' command.  If
     `nil', the height of the default face is used.  It is valid only
     when `w3m-treat-image-size' is non-`nil'.  Note that a small
     value may not induce a good result.  The default value is `64'.
     If you want to use emacs-w3m in a character terminal and make
     `w3m-treat-image-size' effective, you need to set this variable
     properly.

`w3m-resize-image-scale'
     Number of steps in percent used when resizing images.

`w3m-resize-images'
     If non-`nil', resize images to the specified width and height.

`w3m-show-graphic-icons-in-header-line'
     Non-`nil' means show graphic status indicators in the
     header-line.  If it is `nil', also the favicon won't be shown in
     the header-line even if `w3m-use-favicon' is non-`nil'.  This
     variable is currently meaningless under XEmacs.

`w3m-show-graphic-icons-in-mode-line'
     Non-`nil' means show graphic status indicators in the mode-line.
     If it is `nil', also the favicon won't be shown in the mode-line
     even if `w3m-use-favicon' is non-`nil'.

`w3m-toggle-inline-images-permanently'
     Non-`nil' means let the visibility of images continue
     permanently.  The visibility of images is initialized according
     to `w3m-default-display-inline-images' at the first time, and
     except that it may be toggled by the `w3m-toggle-inline-images'
     command, it does not change hereafter, if it is non-`nil'.
     Otherwise, whether images are visible is initialized according to
     `w3m-default-display-inline-images' whenever you visit a new page
     or reload the current page in an emacs-w3m buffer.

`w3m-use-favicon'
     Non-`nil' means show favicon images if they are available.  It
     will be set to `nil' automatically if ImageMagick's `convert'
     program does not support the ico format.



File: emacs-w3m.info, Node: Form Variables, Next: Cookie Variables, Prev: Image Variables, Up: Customizable Variables

Variables related to forms
==========================

`w3m-form-input-map-buffer-lines'
     Buffer lines for form select map buffer.

`w3m-form-input-select-buffer-lines'
     Buffer lines for form select buffer.

`w3m-form-input-textarea-buffer-lines'
     Buffer lines for form textarea buffer.

`w3m-form-mouse-face'
     Mouse face to highlight selected value.

`w3m-form-treat-textarea-size'
     Non-`nil' means to process textarea size (treat textarea rows).

`w3m-form-use-fancy-faces'
     Use fancy faces to fontify `<form>' tags.

`w3m-form-use-textarea-backup'
     Non-`nil' means save and restore backup text saved when you last
     edited this textarea.  Files to save text are stored in the
     directory specified by the `w3m-form-textarea-directory'
     variable.



File: emacs-w3m.info, Node: Cookie Variables, Next: Bookmark Variables, Prev: Form Variables, Up: Customizable Variables

Variables related to cookies
============================

`w3m-cookie-accept-bad-cookies'
     If `nil', don't accept bad cookies.  If `t', accept bad cookies.
     If ask, ask user whether accept bad cookies or not.

`w3m-cookie-accept-domains'
     A list of trusted domain name string.

`w3m-cookie-file'
     File in which cookies are kept.

`w3m-cookie-reject-domains'
     A list of untrusted domain name string.

`w3m-use-cookies'
     Non-`nil' means enable emacs-w3m to use cookies.
     *(EXPERIMENTAL)*



File: emacs-w3m.info, Node: Bookmark Variables, Next: Search Variables, Prev: Cookie Variables, Up: Customizable Variables

Variables related to bookmarks
==============================




File: emacs-w3m.info, Node: Search Variables, Next: Weather Variables, Prev: Bookmark Variables, Up: Customizable Variables

Variables related to searching the web
======================================




File: emacs-w3m.info, Node: Weather Variables, Next: Dtree Variables, Prev: Search Variables, Up: Customizable Variables

Variables related to weather information
========================================




File: emacs-w3m.info, Node: Dtree Variables, Next: Antenna Variables, Prev: Weather Variables, Up: Customizable Variables

Variables related to the dtree feature
======================================




File: emacs-w3m.info, Node: Antenna Variables, Next: Perldoc Variables, Prev: Dtree Variables, Up: Customizable Variables

Variables related to antenna
============================




File: emacs-w3m.info, Node: Perldoc Variables, Next: Namazu Variables, Prev: Antenna Variables, Up: Customizable Variables

Variables related to perldoc
============================




File: emacs-w3m.info, Node: Namazu Variables, Next: Octet Variables, Prev: Perldoc Variables, Up: Customizable Variables

Variables related to namazu
===========================




File: emacs-w3m.info, Node: Octet Variables, Next: Hooks, Prev: Namazu Variables, Up: Customizable Variables

Variables related to the octet feature
======================================




File: emacs-w3m.info, Node: Hooks, Next: Other Variables, Prev: Octet Variables, Up: Customizable Variables

Hooks
=====

`w3m-after-cursor-move-hook'
     Hook run each time after the cursor moves in emacs-w3m buffers.
     This hook is called by the `w3m-check-current-position' function
     by way of `post-command-hook'.

`w3m-delete-buffer-hook'
     Hook run when every emacs-w3m buffer is deleted.

`w3m-display-hook'
     Hook run after displaying pages in emacs-w3m buffers.  Each
     function is called with a url string as the argument.  This hook
     is evaluated by the `w3m-goto-url' function.

`w3m-fontify-after-hook'
     Hook run after fontifying emacs-w3m buffers.  This hook is
     evaluated by the `w3m-fontify' function.

`w3m-fontify-before-hook'
     Hook run when starting to fontify emacs-w3m buffers.  This hook
     is evaluated by the `w3m-fontify' function.

`w3m-form-input-map-mode-hook'
     A hook called after w3m-form-input-map-mode.

`w3m-form-input-map-set-hook'
     A Hook called before w3m-form-input-map-set.

`w3m-form-input-select-mode-hook'
     A hook called after w3m-form-input-select-mode.

`w3m-form-input-select-set-hook'
     A Hook called before w3m-form-input-select-set.

`w3m-form-input-textarea-mode-hook'
     A hook called after w3m-form-input-textarea-mode.

`w3m-form-input-textarea-set-hook'
     A Hook called before w3m-form-input-textarea-set.

`w3m-minor-mode-hook'
     Hook run after `w3m-minor-mode' initialization.

`w3m-mode-hook'
     Hook run after `w3m-mode' initialization.  This hook is evaluated
     by the `w3m-mode' function.

`w3m-select-buffer-hook'
     Hook run when a different emacs-w3m buffer is selected.



File: emacs-w3m.info, Node: Other Variables, Prev: Hooks, Up: Customizable Variables

Other variables
===============

`w3m-async-exec'
     Non-`nil' means execute the `w3m' command asynchronously in Emacs
     process.

`w3m-broken-proxy-cache'
     Set it to `t' if the proxy server seems not to work properly in
     caching.  Note that this may be the double-edged sword; setting
     it to `t' will likely be harmful if the proxy server sends bad
     requests (e.g., not including the Host header, see RFC2616
     section 14.23) to foreign servers when the `w3m' command
     specifies the `no-cache' directive.  Also note that it may not be
     effective if you are using old `w3m' command.

`w3m-history-minimize-in-new-session'
     Non-`nil' means minimize copied history so that there's only
     current page.  This variable is effective when creating of the
     new session by copying (i.e., `w3m-copy-buffer').  The default
     value is `nil'.

`w3m-history-reuse-history-elements'
     Non-`nil' means reuse the history element when re-visiting the
     page.  Otherwise, a new history element will be created even if
     there are elements for the same url in the history.

     Emacs-w3m used to operate as the case in which it is non-`nil',
     however it sometimes brought about users' dissatisfaction.  For
     example, if a user visited the pages A -> B -> C -> B in order,
     performing BACK on the second B would let a user visit A.  The
     reason why a user was taken to A rather than C is that the
     `w3m-history' variable only had the list `(A B C)' as a history
     and B was the current position at that time.

     The default value for this variable is `nil' which allows the
     `w3m-history' variable to have the list `(A B C B)'.  Where
     contents of two B's are the identical Lisp objects.  So, too much
     wasting the Lisp resources will be avoided.

     See the documentation for the variables `w3m-history' and
     `w3m-history-flat' for more information.

`w3m-process-connection-type'
     Value for `process-connection-type' used when communicating with
     `w3m'.

`w3m-process-modeline-format'
     Format used when displaying the progress of the external `w3m'
     process.  It shows a percentage of the data loaded from the web
     server.

`w3m-xmas-show-current-title-in-buffer-tab'
     If non-`nil', show the title strings in the buffers tab.  It has
     no effect if your XEmacs does not support the gutter items.



File: emacs-w3m.info, Node: Hooking into MUAs, Next: Frequently Asked Questions, Prev: Customizable Variables, Up: Top

Hooking emacs-w3m into mail/newsreaders
***************************************

This section introduces three Message User Agents (MUAs).  All those
MUAs can display HTML mails properly using emacs-w3m.  You'll find
here HowTo's and some notes about setting up and using emacs-w3m with
each of these MUAs.

Quick note about the conventions we use: what does `message'
mean?
 When a Gnus user says `message', it often means a draft of
a message to be sent as mail or news.  However, it is the term used by
Mew or Wanderlust users for received mail.  They use `draft' for
the draft of a message to be sent.  On the other hand, a received
message is called an `article' by Gnus users.

* Menu:

* Gnus::                        Reading HTML mails in Gnus
* Mew::                         Reading HTML mails in Mew
* SEMI MUAs::                   Reading HTML mails in SEMI MUAs
* VM::                          VM (vieW maiL) is not Wanderlust



File: emacs-w3m.info, Node: Gnus, Next: Mew, Prev: Hooking into MUAs, Up: Hooking into MUAs

Reading HTML mails in Gnus
==========================

Did you know that Gnus, the Emacs newsreader, supports emacs-w3m?

Actually, the version of Gnus bundled with Emacs does not support
emacs-w3m (yet).  You'd better use the latest version of Gnus.  It is
available at:

`ftp://ftp.gnus.org/pub/gnus/gnus.tar.gz'

Note: if emacs-w3m *is* supported in the Gnus version that comes with
your Emacs distribution, it means either that this documentation is
out-of-date (please report this bug as described in *Note Mailing
List::), or that you're using a very old version of emacs-w3m (in
which case you should update it to a newer version).

   * What can you do with emacs-w3m?

     You can convert HTML spam mails to be human-readable using
     emacs-w3m.  Of course, it works for HTML ham (non-spam) mails as
     well, and for both emacs-w3m is probably faster than the default
     converter.  You don't need to perform any additional operation.
     It will simply be displayed.

     On HTML parts of an article buffer, the `w3m-minor-mode' is
     turned on and you can use the same main keys as the keys of
     emacs-w3m, for instance, RET is for visiting a page which a link
     in the current position points to.  Those keys are defined in the
     `w3m-minor-mode-command-alist' variable.  Keep in mind that some
     commands are replaced by others similar to them, for security
     reasons (see below).

   * What do you have to do?

     Read the Gnus manual (*Note Display Customization:
     (emacs-mime)Display Customization.).  The easiest way is to put
     the following line in your `~/.gnus.el' file:

          (setq mm-text-html-renderer 'w3m)

     Also put the following line if you want to show images inline in
     article buffers:

          (setq mm-inline-text-html-with-images t)

     If you don't need to use emacs-w3m keys in article buffers, add
     the following line too:

          (setq mm-inline-text-html-with-w3m-keymap nil)

   * Notes

     The above description about spam and ham is not for kidding, it's
     just here to get your attention.  Some HTML mails might contain a
     nasty trick used by spammers, using the `<img>' tag which is far
     more evil than the `Click Here!' button.  It is most likely
     intended to check whether the ominous spam mail has reached your
     eyes or not, in which case the spammer knows for sure that your
     email address is valid.  It is done by embedding an identifier
     string into a URL that you might automatically retrieve when
     displaying the image.  If the `mm-w3m-safe-url-regexp' variable
     has not been changed from the default value, Gnus will never
     connect to the spammer's site arbitrarily.

     You can display images inline in an article buffer if you set
     `mm-inline-text-html-with-images' to `t', can't you?  No, not
     exactly: you're still being protected.  If you don't care about
     leaking information (i.e. the fact that your mail address is
     reachable), set the `mm-w3m-safe-url-regexp' variable to `nil'.
     The default value for `mm-w3m-safe-url-regexp' is `"\\`cid:"'
     which means we consider that images included in a mail with the
     `cid:' URL are safe (that is, you can display such images without
     modifying the `mm-w3m-safe-url-regexp' variable).

   * Giveaway

     Even when you are in the summary buffer, you can toggle
     displaying of images in the article buffer.  It is effective only
     when those images are displayed by emacs-w3m, though.  Here's an
     example:

          (defun gnus-summary-w3m-safe-toggle-inline-images (&optional arg)
            "Toggle displaying of all images in the article buffer.
          If the prefix arg is given, all images are considered to be safe."
            (interactive "P")
            (save-excursion
              (set-buffer gnus-article-buffer)
              (w3m-safe-toggle-inline-images arg)))

          (eval-after-load "gnus-sum"
            '(define-key gnus-summary-mode-map
               "\C-i" 'gnus-summary-w3m-safe-toggle-inline-images))

See also *Note Nnshimbun::.



File: emacs-w3m.info, Node: Mew, Next: SEMI MUAs, Prev: Gnus, Up: Hooking into MUAs

Reading HTML mails in Mew
=========================

By using emacs-w3m with Mew, you can see HTML mails as it intended to
be displayed.  To do so, put the following line in the `~/.mew.el'
file:

     (require 'mew-w3m)

With just this, an HTML mail will be displayed in the message window
as if it were a plain text.  You can still use the `C-c C-e' command
(`mew-summary-execute-external') there.

It is also quite common these days to see mails containing the same
information twice, they use the `multipart/alternative' format which
consists of both a `text/plain' part and a `text/html' part (what a
waste of bandwidth it is).  Mew displays only the `text/plain' part of
such a mail by default.  However, you perhaps want to see the
`text/html' part since you are using emacs-w3m.  If so, add the
following lines to the `~/.mew.el' file:

     (setq mew-mime-multipart-alternative-list
           '("Text/Html" "Text/Plain" ".*"))

There are some customizable variables related to Mew:

`mew-use-w3m-minor-mode'
     If non-`nil', the `w3m-minor-mode' is turned on in the message
     buffer where a text/html part is displayed, and you can use the
     same main keys as the keys of emacs-w3m, for instance, RET is for
     visiting a page which a link in the current position points to.
     Those keys are defined in the `w3m-minor-mode-command-alist'
     variable.  Keep in mind that some commands are replaced by others
     similar to them, for security reasons.  The default value is
     `nil'.

`mew-w3m-auto-insert-image'
     If non-`nil', you can see images inline in the message buffer
     when you read a multipart/related message.  Note that mew-w3m
     only allows images contained in the message body with a `cid:'
     URL to be displayed (as we consider them safe).  The default
     value is `nil'.

     To activate this feaeture, add following in your `~/.mew.el'.

          (define-key mew-summary-mode-map "T" 'mew-w3m-view-inline-image)

     Press "T", toggle the visibility of the images included its
     message only.  Press "C-uT", display the all images included its
     Text/Html part."

`mew-w3m-cid-retrieve-hook'
     A hook run just after retrieving a `cid:' URL.  The default value
     is `nil'.

See also *Note Mew Shimbun::.



File: emacs-w3m.info, Node: SEMI MUAs, Next: VM, Prev: Mew, Up: Hooking into MUAs

Reading HTML mails in SEMI MUAs
===============================

You can display HTML mails as human-readable, using emacs-w3m and SEMI
MUAs, for example, Wanderlust, T-gnus, etc.  Since those MUAs depend
on SEMI (and also FLIM) for MIME functions, we generically call them
SEMI MUAs.  Although SEMI uses Emacs/W3 for rendering HTML mails by
default, it can easily be altered to emacs-w3m and it will make your
cyber life still more comfortable.

You simply need to put the following line in `~/.emacs' file:

     (require 'mime-w3m)

The `mime-w3m' and `mime-w3' modules are functionally alike, as you
might have guessed (see how the names sound alike?).  The latter is
included in the SEMI package.

On HTML parts of an article buffer, the `w3m-minor-mode' is turned on
and you can use the same main keys as the keys of emacs-w3m, for
instance, RET is for visiting a page which a link in the current
position points to.  Those keys are defined in the
`w3m-minor-mode-command-alist' variable.  Keep in mind that some
commands are replaced by others similar to them, for security reasons.

There are some customizable variables related to the `mime-w3m'
module:

`mime-w3m-display-inline-images'
     If it is non-`nil', images will be displayed inline in HTML
     mails.  If it is the symbol `default' (which is the default) at
     the first time, the value of this variable will be replaced with
     the value of the `w3m-default-display-inline-images' variable.
     You probably don't need to change this.

`mime-w3m-safe-url-regexp'
     Regexp matching URLs which are considered to be safe.  The
     default value is `"\\`cid:"' which means we consider that images
     included in a mail with the `cid:' URLs are safe.  See also *Note
     Gnus:: about rogue attacks.

`mime-w3m-setup-hook'
     A hook run just after setting up the cooperation of the
     `mime-w3m' module and SEMI.  The default value is `nil'.

By the way, even when you are in the summary buffer, you can toggle
displaying of images in the article buffer (which is what is called
the message buffer in the Wanderlust community).  It is effective only
when those images are displayed by emacs-w3m, though.  Here're
examples for T-gnus, Nana-gnus and Wanderlust:

     ;; T-gnus or Nana-gnus:
     (defun gnus-summary-w3m-safe-toggle-inline-images (&optional arg)
       "Toggle displaying of all images in the article buffer.
     If the prefix arg is given, all images are considered to be safe."
       (interactive "P")
       (save-excursion
         (set-buffer gnus-article-buffer)
         (w3m-safe-toggle-inline-images arg)))

     (eval-after-load "gnus-sum"
       '(define-key gnus-summary-mode-map
          "\C-i" 'gnus-summary-w3m-safe-toggle-inline-images))

     ;; Wanderlust:
     (defun wl-summary-w3m-safe-toggle-inline-images (&optional arg)
       "Toggle displaying of all images in the message buffer.
     If the prefix arg is given, all images are considered to be safe."
       (interactive "P")
       (save-excursion
         (set-buffer wl-message-buffer)
         (w3m-safe-toggle-inline-images arg)))

     (eval-after-load "wl-summary"
       '(define-key wl-summary-mode-map
          "\M-i" 'wl-summary-w3m-safe-toggle-inline-images))

See also *Note Nnshimbun:: if you are using T-gnus or Nana-gnus.



File: emacs-w3m.info, Node: VM, Prev: SEMI MUAs, Up: Hooking into MUAs

VM (vieW maiL) is not Wanderlust
================================

Emacs-w3m is not supporting VM positively.  It is simply because there
is no VM user in the emacs-w3m team.  However, don't be pessimistic.
There is the `vm-w3m.el' module in the attic directory of the
emacs-w3m distribution.  You are a lucky person if it is helpful to
you.  Try it anyhow.  You can find how to use it in the file itself.

If you want to toggle displaying of images in the presentation buffer
when you are in any VM buffer, use the following:

     (define-key vm-mode-map "T" 'vm-w3m-safe-toggle-inline-images)



File: emacs-w3m.info, Node: Frequently Asked Questions, Next: Known Problems, Prev: Hooking into MUAs, Up: Top

There isn't always an answer
****************************

* Menu:

* General FAQ::                 General Questions
* Trouble FAQ::                 Troubleshooting
* Shimbun FAQ::                 Questions of Shimbun Library



File: emacs-w3m.info, Node: General FAQ, Next: Trouble FAQ, Prev: Frequently Asked Questions, Up: Frequently Asked Questions

General Questions
=================

   * Q. What's emacs-w3m?

     It is an interface program on Emacs which controls w3m.  For more
     information, see *Note Introduction::.

   * Q. Which emacs versions are supported?

     The following Emacsen have been checked for emacs-w3m support:

        * Mule 2.3 (based on Emacs 19.34)
        * Emacs 19.34
        * Emacs 20
        * Emacs 21
        * Emacs 22
        * XEmacs 21.1 with Mule
        * XEmacs 21.2 with Mule (beta37 or greater)
        * XEmacs 21.4 with/without Mule
        * XEmacs 21.5 with/without Mule
        * Meadow

     Note that you're required to use APEL if you'd like to run
     emacs-w3m under Mule 2.3, Emacs 19.34 or XEmacs.  For more
     information, see *Note Other Requirements::.

     Emacs-w3m works on Emacs 19.34 or XEmacs without the Mule feature
     except for several commands, such as the command to look weather
     forecasts in Japan.  They strongly depends on the Mule feature,
     so that they must not work on Emacs 19.34 or XEmacs without Mule.

   * Q. Which w3m versions are supported?

     The following w3m versions have been checked for emacs-w3m
     support:

        * w3m-0.3 and later
        * w3mmee-p24-18 + moe-1.5.4

          Note that w3mmee mentioned as the example is configured with
          the `lang=many' option (it can be done by entering 3, when
          the `configure' script prompts you, "Which language do you
          prefer?").  It also requires the `libmoe' package.

   * Q. I've already installed APEL in the XEmacs SUMO package, is it
     ok?

     There are some problems in the XEmacs APEL package (all modules
     have been compiled for XEmacs with Mule); for instance, the
     `std11' modules conflict with the FLIM's one, etc.  Even though
     you can use `apel-1.23-pkg.tar.gz' or later for both XEmacs with
     Mule and non-Mule XEmacs if you don't use FLIM for the `shimbun'
     features, we recommend you replace it or newly install the
     original APEL package.  See *Note Other Requirements:: where to
     get it from.

   * Q. I've gotten the developing version of emacs-w3m with CVS,
     however I'm missing `configure' script.

     It is necessary to run `autoconf' first, to generate `configure'
     script.



File: emacs-w3m.info, Node: Trouble FAQ, Next: Shimbun FAQ, Prev: General FAQ, Up: Frequently Asked Questions

Troubleshooting
===============

   * Q. Why can't I enter a password on pages which require
     authentication?

     Make sure the `w3m-async-exec' variable is set to a value other
     than `nil'.

   * Q. Why can't I enter a password for a proxy server which requires
     authentication?

     Make sure the `w3m-async-exec' variable is set to a value other
     than `nil'.

   * Q. Why can't I follow links?

     Emacs-w3m requires a version of w3m which recognizes the
     `-header' option.  Check what version of w3m you use.

   * Q. Why do garbage characters appear?

     It could be caused by the following reasons:

       1. Bad HTML file

          If the character set specified by the `<meta>' tag differs
          from the actual contents in an HTML file, it will not be
          displayed correctly.  Use the command `M-x
          w3m-redisplay-with-charset' or `C c' to set the correct
          character set and to force redisplay of the page.

       2. Limitation of the character sets

          A page written by a character set other than
          ISO-2022-JP(jis), EUC-JP, or SHIFT_JIS may not be displayed
          correctly.  Try one of the following ways:

            a. Any characters defined in Unicode will be displayed
               correctly if you install the Mule-UCS package (*Note
               Other Requirements::).  You need to make sure that the
               value of the `w3m-use-mule-ucs' variable is set to a
               value other than `nil' after installing the Mule-UCS
               package.  In addition, if you want to make Emacs (and
               also emacs-w3m) handle the character sets EUC-JISX0213
               and ISO-2022-JP-3, you have to install the `jisx0213'
               module which is contained in the Mule-UCS package
               (though it doesn't work under XEmacs unfortunately).

            b. Install w3mmee or w3m-m17n, and set the `w3m-command'
               variable to the appropriate value.  And emacs-w3m will
               use the multi-lingual features provided by one of those
               programs.  However, a page written by a coding system
               which Emacs doesn't support may not be displayed
               correctly. So please install Mule-UCS package if
               necessary.

       3. Emacsen incompatibility

          Under XEmacs 21.1, pages written by the SHIFT_JIS character
          set may not be displaied correctly.  There is also a problem
          in XEmacs 21.2 prior to the beta 36 version.  You should
          upgrade your XEmacs if you use such one.

          You should notice that XEmacs versions 21.1 and 21.2 have
          already been retired officially.

       4. Don't use `standard-display-european'

          It is generally harmful since it often makes Latin
          characters get displayed incorrectly.  For instance, the
          apostrophe character (`'') which was encoded as `&#8217'
          will be displayed as the character `u' with a grave accent
          as if it had been encoded as `&#249'.  If the line something
          like the following is in your `~/.emacs' file or site files
          which Emacs loads when starting up, we strongly recommend
          you to remove it.

               (standard-display-european 1)

          There the argument might be `t', not `1'.

   * Q. Why can't images be shown?

     It could be caused by the following reasons:

     There is a bug in the earlier versions of the `libungif' library.
     You have to install `libungif-4.1.0b1' and later.

     You must install the `gifsicle' program if you want to run
     emacs-w3m under XEmacs.  *Note Other Requirements::.

     Emacs-w3m doesn't support the old versions of w3m.  Check what
     version of w3m you use.

   * Q. Why can't I browse pages which require cookies?

     (This is still an experimental feature.)

     Make sure the `w3m-use-cookies' variable is set to a value other
     than `nil'.

   * Q. Why can't I fill in the form?

     (This is still an experimental feature.)

     Make sure the `w3m-use-form' variable is set to a value other
     than `nil'.

   * Q. Why can't I submit a form?

     (This is still an experimental feature.)

     Make sure the `w3m-use-form' variable is set to a value other
     than `nil'.  You also need to use a version of w3m which
     recognizes the `-post' option in order to use this function.
     Check what version of w3m you use.

   * Q. Why are frames not rendered?

     Install w3mmee and put the following line in your `~/.emacs'
     file:

          (setq w3m-command "w3mmee")

   * Q. Why are favicon images not displayed in the Emacs 21 tab bar?

     Install the `convert' program which is included in ImageMagick.
     It is available from: `http://www.imagemagick.org/'

   * Q. Why does Emacs 21 get locked when a favicon image is going to
     be displayed?
   * Q. My computer accesses the disk drive violently and says
     `process convert exited abnormally with code 10'.  What's the
     story?

     Do you use an old version of ImageMagick?  As far as we know, it
     happens when you use the `convert' program bundled with
     ImageMagick 5.2.1.  It has been confirmed that the `convert'
     program bundled with ImageMagick 5.4.0-5 (and later) works fine.

     If you don't want to use ImageMagick, or if you can't use its
     most recent version, add the following line in your
     `~/.emacs-w3m' file:

          (setq w3m-use-favicon nil)

   * Q. Why does not emacs-w3m work with w3mmee?

     If you are using w3mmee configured with the option `lang=en' or
     `lang=ja', reconfigure w3mmee with the option `lang=many' (it can
     be done by entering 3, when the `configure' script prompts you,
     "Which language do you prefer?"), and rebuild w3mmee.

   * Q. Why I cannot visit web pages using emacs-w3m?  There is no
     problem when visiting local html files or using w3m barefoot,
     though.

     What is called the asynch patch (1) (*Note Trouble
     FAQ-Footnotes::) is applied to the w3m command which some Linux
     distribution (e.g. Gentoo Linux) contains.  It is useful when
     using w3m barefoot, however it might make emacs-w3m hang.  If it
     is suspected, we recommend you reinstall the w3m command from the
     original source.


File: emacs-w3m.info  Node: Trouble FAQ-Footnotes, Up: Trouble FAQ

(1) w3m on cygwin (http://www.page.sannet.ne.jp/knabe/w3m/w3m.html)



File: emacs-w3m.info, Node: Shimbun FAQ, Prev: Trouble FAQ, Up: Frequently Asked Questions

Questions of Shimbun Library
============================

   * Q. Why are the `shimbun' modules not installed?

     Note that the `shimbun' modules (files under the `shimbun/'
     directory) won't be installed if the FLIM package has not been
     installed in your system.

     The `configure' script determines automatically whether the FLIM
     package is installed or not.  If the FLIM package is installed in
     a non-standard directory, the determination fails.  In this case,
     you can use the `--with-addpath' configure option to explicitly
     set the directory name where the FLIM package has been installed.
     Here's an example:

          % ./configure --with-addpath=$HOME/share/emacs/site-lisp/flim



File: emacs-w3m.info, Node: Known Problems, Next: Shimbun Library, Prev: Frequently Asked Questions, Up: Top

You can surely solve it
***********************




File: emacs-w3m.info, Node: Shimbun Library, Next: Tips, Prev: Known Problems, Up: Top

A tool for reading a newspaper
******************************

More and more newspapers, mailing list archives, bulletin boards, and
individual diaries (such as hyper nikki system, weblogs and blogs) are
published on the web.  `Shimbun' library enables you to read those
contents with your favorite mail/news reader.  Actually, `Shimbun'
library provides functions to convert those contents into articles
like common e-mails.

     `Shimbun' is pronounced "she-n-boon" (but actually vowels
     shouldn't be prolonged), it means "newspaper" in Japanese.

`Shimbun' library currently supports Asahi Shimbun, Yomiuri On-line,
many maling list archives such as Emacs Devel, XEmacs Beta, Gnus, Mew,
and Wanderlust, the Japanese Prime Minister Koizumi's mail magazine,
Slashdot Japan, and a lot of others.  For more detail, see *Note
Shimbun Sites::.

By the way, you have to pay attention to copyright when using
`Shimbun' library.  Copyrights of articles generated with `Shimbun'
library are reserved by copyright holders of those original contents.
Therefore, you are obliged not to violate rights of copyright holders,
when you enjoy generated articles.  It means that you can enjoy
generated articles on "fair use" that is described in the copyright
law.

We, emacs-w3m development team, give no warranty to you, if `Shimbun'
library causes a damage to you, or if you face a lawsuit about
violation of copyrights.

`Shimbun' library is a collection of many modules, but each of them
serves no useful purpose alone.  This section explains three typical
`Shimbun' applications (two of which are included in the `Shimbun'
library) and how to make `Shimbun' modules by yourself (you need to be
able to write Emacs Lisp programs).

* Menu:

* Nnshimbun::                   Turning Gnus into a web browser!
* Mew Shimbun::                 Reading web newspapers with Mew
* Shimbun with Wanderlust::     Reading web newspapers with Wanderlust
* Shimbun Sites::               Sites supported by Shimbun
* Shimbun Basics::              How to make a new shimbun module

Note that you need to have installed the FLIM package (and Gnus if
you'd like to use `nnshimbun') before building and installing
emacs-w3m.  The FLIM package requires the APEL package.  You might
also want to see *Note Other Requirements::.



File: emacs-w3m.info, Node: Nnshimbun, Next: Mew Shimbun, Prev: Shimbun Library, Up: Shimbun Library

Turning Gnus into a web browser!
================================

`Nnshimbun' is a Gnus back end, but it is distributed with emacs-w3m,
not Gnus, exceptionally.  `Nnshimbun' allows you to turn Gnus into an
exceptionally useful web browser.  You can skim through the articles
on a newspaper's web server without having to see all the
advertisement.  You can read articles in mailing list archives as if
you were subscribed to the list.  You can also read submissions in
bulletin boards, etc...  Note that if you want to followup, you still
need to use emacs-w3m as Gnus can't post via the web with `nnshimbun'.

See also *Note Gnus:: for rendering HTML messages with emacs-w3m if
you use Gnus, see *Note SEMI MUAs:: for T-gnus or Nana-gnus instead.

The easiest way to get started with `nnshimbun' is to use something
like the following in the Group buffer:

`M-x gnus-group-make-shimbun-group RET asahi RET national RET'

Replace `asahi' and `national' with the keyword corresponding to the
server you'd like to connect to and the group you're interested in
respectively.  You can complete both of those names by using TAB or
SPC.

You can also bind that to a key if there's enough room in the
`gnus-group-mode-map' map, you can add something like the following in
your `~/.gnus.el' file (T-gnus users, you don't need to bother to add
it, since there's already the similar thing in T-gnus):

     (eval-after-load "gnus-group"
       '(define-key gnus-group-mode-map "Gn"
          'gnus-group-make-shimbun-group))

Then, you can use `G n' instead of `M-x
gnus-group-make-shimbun-group'.

*Could someone book this keystroke at the Gnus Tower?*


`Nnshimbun' simply fetches HTML contents from the web server and
displays them as an article, but it will never save articles in the
local file system, except if you use persistent articles (*Note
Persistent Articles: (gnus)Persistent Articles.).  `Nnshimbun' uses
NOV files for each `nnshimbun' group, and its back end is almost the
same as `nnml'.

The following `nnshimbun' variables can be customized:

`nnshimbun-keep-backlog'
     This variable overrides the `gnus-keep-backlog' variable (*Note
     Article Backlog: (gnus)Article Backlog.) in `nnshimbun' groups.
     If you set `nnshimbun-keep-backlog' to a number N, `nnshimbun'
     will store at most N old articles in a buffer for later
     re-fetching.  If this variable is non-`nil' and is not a number,
     `nnshimbun' will store *all* read articles (this is not a good
     idea).  The default value is 300.

     Note that smaller values may spoil the `prefetch-articles'
     feature (see below), since `nnshimbun' uses the backlog to keep
     the prefetched articles.

`nnshimbun-directory'
     Directory where `nnshimbun' saves NOV files.  The default value
     is `~/News/shimbun/'.

You can use the specially made group parameter for `nnshimbun' in
addition to the standard group parameters provided by Gnus (1) (*Note
Nnshimbun-Footnotes::).  Several parameters for `nnshimbun' are
collected into the single group parameter `nnshimbun-group-parameters'
which is a property list (the values can be different for every
group).  Here's an example:

     '(index-range all prefetch-articles off encapsulate-images on
                   expiry-wait 6)

Below is the documentation for those group parameters and related
variables.

`prefetch-articles'
     In a group where this group parameter is set to something else
     than `off' or `nil', `nnshimbun' not only checks for new
     articles, but also downloads them.  Though it will slow checking
     of new articles down, you won't be kept waiting when reading
     articles.  In the group where this group parameter is not set or
     its value is `nil', the value of the
     `nnshimbun-pre-fetch-article' variable (`off' by default) is used
     instead.

`encapsulate-images'
     In a group where this group parameter is set to something else
     than `off' or `nil', `nnshimbun' will put image data embedded in
     the original contents into an article as `multipart/related'
     parts of the MIME format.  In the group where this group
     parameter is not set or its value is `nil', the value of the
     `nnshimbun-encapsulate-images' variable is used instead.  The
     default value for the `nnshimbun-encapsulate-images' variable is
     the value of the `shimbun-encapsulate-images' variable which is
     provided in the `shimbun' library (the default value is probably
     `t').

`index-range'
     You can specify the range of articles to be fetched from the web
     server using the `index-range' group parameter.  To specify the
     range, use the following values:

     `nil'
     `all'
          all pages

     `last'
          only the latest page

     `integer N'
          the latest N pages

     `Nnshimbun' checks whether there are new articles by parsing the
     index page of the server.  It is possible that there are two or
     more index pages on the server.  For instance, in the case of the
     mailing list servers, index pages are generally classified
     according to the date on which the article was posted.  It would
     take a considerable amount of time to check all those huge index
     pages especially if you are connecting via a slow line.

     If it is possible, `nnshimbun' won't check index pages which have
     already been checked at the last connection.  If you want to save
     even more time, use `last'.  It makes `nnshimbun' refer to only
     the latest index page for checking new articles.

     In the group where the `index-range' group parameter is not set
     or its value is `nil', the value of the `nnshimbun-index-range'
     variable (`nil' by default) is used.

`nnshimbun-group-parameters-alist'
     This is an Emacs Lisp variable, an alist of regexp of group names
     and `nnshimbun' group parameters.  The default value is `nil'.
     Each element may have the form `(REGEXP KEYWORD VALUE KEYWORD
     VALUE...)', for example:

          '("^nnshimbun\\+asahi:" index-range all prefetch-articles off
            encapsulate-images on expiry-wait 6)

     Since you can use this variable to specify the same `nnshimbun'
     group parameters for two or more groups which have similar names
     (i.e., those groups are likely to have similar characteristics
     each other), it is useful that it can be used instead of
     specifying the `nnshimbun' group parameters to several groups
     respectively.  If the group parameter has already been set in a
     group, that takes precedence over this variable.

You can instruct `nnshimbun' to expire articles (2) (*Note
Nnshimbun-Footnotes::).  Keep in mind that when an article is expired,
it is not deleted from the remote server, it's still available there.
What is deleted is the line in your own NOV file for `nnshimbun' (3)
(*Note Nnshimbun-Footnotes::) corresponding to the article to be
expired.  Then the article won't appear in the Summary buffer, forever
and ever.

If you don't expire articles in `nnshimbun' groups, the NOV files will
continue to grow fat indefinitely and you may see very old articles in
the Summary buffer as if they were existing (in fact, they might have
expired three years ago on the remote server!).  Even if you try to
read such an article, nothing will appear in the article buffer.  On
the other hand, most mailing list servers generally offer all the past
articles.  You may not feel like expiring articles in such groups in
order to look back with nostalgia to the good old days and to be able
to read, eyes filled with tears, articles which you thought long gone.

You can mark `nnshimbun' articles as expirable and specify the expiry
period in each `nnshimbun' group as well as the other mail back ends.
However, there are a little differences between `nnshimbun' and the
other mail back ends:

   * First of all, the expiry period is determined with the following
     priorities.  Note that the default value might be different from
     group to group.

       1. The value of the `expiry-wait' group parameter in a group.

       2. The value produced by evaluating the
          `nnmail-expiry-wait-function' variable for a group.

       3. The default value provided by the `shimbun' module
          corresponding to a group.

       4. The value of the `nnmail-expiry-wait' variable.

   * Second of all, the argument to be passed to the function
     specified by the `nnmail-expiry-wait-function' variable will
     contain the names of the back end and the server like
     "nnshimbun+asahi:national", while only the group name will be
     given in the case of the other mail back ends.  Here's an
     example:

          (setq nnmail-expiry-wait-function
                (lambda (group)
                  (cond ((string-equal group "ding") 7)
                        ((string-equal group "nnshimbun+ding:ding") 'never))))

     This means that there are two groups for the same ding mailing
     list; one is subscribed as a list member, the other is for
     reading from the mailing list archive at the Gnus Towers.  Ahem,
     isn't it clever?  The local mail files in the "ding" group will
     be expired in seven days and your local disk space will be saved,
     but you can read even the articles of the last century in the
     second group (if it is really needed, though).

   * Third of all, and this is written down so that you can remember
     it when you're filled with doubt: even when all articles from a
     `nnshimbun' group should be expired, the most recent one will be
     kept.  This is not to satisfy your indecisive heart, it's because
     the next time you fetch new articles for this group, `nnshimbun'
     will know where to begin and not fetch all the articles all over
     again.

The group parameters and the variables related to expiring `nnshimbun'
articles are:

`expiry-wait'
     Don't be confused, please.  The `expiry-wait' group parameter is
     provided as one of the elements of `nnshimbun-group-parameters',
     the specially made group parameter for `nnshimbun'.  It has the
     same name and the same meaning as the standard group parameter.
     You may use whichever you like.  If nnshimbun's one is set to
     non-`nil' value, it takes precedence over the standard one.  It
     is provided in order to concentrate things related to `nnshimbun'
     at one place of the "Gnus Customize" buffer (which will appear by
     typing `G c' in the group buffer) and to realize managing
     collectively by the `nnshimbun-group-parameters-alist' variable
     (4) (*Note Nnshimbun-Footnotes::).  The values which can be used
     are a number of expiry period, `never' or `immediate' as well as
     the standard group parameter.

`nnshimbun-keep-unparsable-dated-articles'
     If this variable is non-`nil', the articles of which the time of
     creation (or the time of arrival) is unknown will never be
     expired, since their age is unknown.  The default is `t'.  If you
     set this variable to `nil', the articles of which the time is
     unknown will also be expired unconditionally when the time to
     expire has come.  Well, it might prove useful for a general
     cleaning at the end of a year.


File: emacs-w3m.info  Node: Nnshimbun-Footnotes, Up: Nnshimbun

(1) The easiest way to specify group parameters is to type `G c'
in the group buffer after moving the point to the group you'd like to
customize (*Note Group Parameters: (gnus)Group Parameters.).

(2) There are mainly two ways to expire articles automatically in the
`nnshimbun' groups.  One is to add a group name regular
expression (it should begin with "^nnshimbun\\+") to the
`gnus-auto-expirable-newsgroups' variable and to put the expiry
period for each group into the `nnmail-expiry-wait-function'
variable.  Another is to set the `auto-expire' group parameter to
`t' and to set the expiry period with the `expiry-wait'
group parameter in every `nnshimbun' group which you want to
expire automatically.  See *Note (gnus)Expiring Mail:: for more
information.  In the group to which the `expiry-wait' group
parameter is not specified, a default expiry period will be applied.

(3) The NOV file for `nnshimbun' is named something
like "~/News/shimbun/asahi/national/.overview".

(4) We've already prepared the answer to the question that why
`auto-expire' etc. aren't included in the nnshimbun's
special group parameter?  The answer is, `expiry-wait' is
handled by the `nnshimbun' back end, but `auto-expire'
is handled by the Gnus core.  Therefore, it is contrary to the
design policy of Gnus to extend the Gnus core functions so that
it may work for one particular back end (i.e. reading a value
from the nnshimbun's special group parameter).



File: emacs-w3m.info, Node: Mew Shimbun, Next: Shimbun with Wanderlust, Prev: Nnshimbun, Up: Shimbun Library

Reading web newspapers with Mew
===============================

Mew Shimbun is an Emacs Lisp program meant to be used with `shimbun'
and Mew (version 2.1 and later).  The `mew-shimbun' module will be
installed together with emacs-w3m if Mew, APEL, and FLIM are also
installed.

We recommend you also see *Note Mew::.

  1. Setting things up

     Put the following lines in the last of the `~/.mew.el' file:

     ;;; Loading mew-shimbun, defining keys.  ;; (setq
     mew-shimbun-use-unseen t) ;;; (1) (*Note Mew Shimbun-Footnotes::)
     (require 'mew-shimbun) (define-key mew-summary-mode-map "G"
     (make-sparse-keymap)) (define-key mew-summary-mode-map "Gg"
     'mew-shimbun-goto-folder) (define-key mew-summary-mode-map "GG"
     'mew-shimbun-goto-unseen-folder) (define-key mew-summary-mode-map
     "Gi" 'mew-shimbun-retrieve) (define-key mew-summary-mode-map "GI"
     'mew-shimbun-retrieve-all) (define-key mew-summary-mode-map "Gr"
     'mew-shimbun-re-retrieve) (define-key mew-summary-mode-map "GR"
     'mew-shimbun-re-retrieve-all) (define-key mew-summary-mode-map
     "Ge" 'mew-shimbun-expire) (define-key mew-summary-mode-map "GE"
     'mew-shimbun-expire-all)

     ;; Specifying `shimbun' servers and groups to be read with Mew in the
     ;; `mew-shimbun-folder-groups' variable.  Each element has the form
     ;; `("folder" ("server.group" . range) ...)'.  You can use `all',
     ;; `last', and a number for the `range' item.

     (setq mew-shimbun-folder-groups
           '(;; Fetching `yomiuri.shakai', `yomiuri.sports', etc.
             ;; into the `+shimbun/yomiuri' folder collectively.
             ("yomiuri"
              ("yomiuri.shakai" . 2)
              ("yomiuri.sports". 2)
              ("yomiuri.kokusai". 2))
             ;; Fetching `security-memo.memo'
             ;; into `+shimbun/security-memo'.
             ("security-memo"
              ("security-memo.memo" . 2))
             ("slashdot-jp"
              ("slashdot-jp.story" . last))
             ;; You can read several groups in one folder (`+shimbun/emacs')
             ;; as follows even if each group comes from a different server.
             ("emacs"
              ("airw.wl" . last)
              ("emacs-w3m.emacs-w3m" . last))
             ;; Fetching diaries into `+shimbun/hns/arisawa' and
             ;; `+shimbun/hns/miyoshi' respectively.
             ("hns/arisawa"
              ("hns.arisawa" . last))
             ("hns/miyoshi"
              ("hns.miyoshi" . last))))

     You did the fundamental setups.  For the other user definable
     variables, use `M-x customize-group' for the `mew-shimbun' group
     or see the source code.

  2. Reading `shimbun' messages

       a. Getting started

          Type `G I' (`mew-shimbun-retrieve-all') first, after setting
          things up as mentioned above.  The `shimbun' folders
          specified by the `mew-shimbun-folder-groups' variable will
          be created under the `+shimbun' parent folder.  Typing `G I'
          is also useful when you have added new groups.  You can
          change the name of the parent folder (`+shimbun' by default)
          by customizing the `mew-shimbun-folder' variable.

       b. Moving into a `shimbun' folder

          You can move to any folder (including `shimbun') by typing
          `g' (`mew-summary-goto-folder'), but `G g'
          (`mew-shimbun-goto-folder') is restricted to moving to only
          the `shimbun' folder.  In addition, folders which have new
          messages (in other words, folders which have not been
          scanned) will be displayed when using a prefix argument with
          `G g' (i.e. `C-u G g').  A prefix argument similarly affects
          `G G' as well.

       c. Fetching messages in each folder

          You can fetch new messages for the current folder
          exclusively by typing `G i' (`mew-shimbun-retrieve') in a
          `shimbun' folder.

       d. Fetching updated messages

          If you perform the `G r' command (`mew-shimbun-re-retrieve')
          when a particular message is being displayed, the message
          will be updated if it is possible, and new messages will be
          fetched.  With a prefix argument (i.e. `C-u G r'), it will
          attempt to update messages which are marked with the mark
          specified by the `mew-shimbun-mark-re-retrieve' variable
          (`@' by default).  It would be useful for CNET, etc.

          The `G R' command (`mew-shimbun-re-retrieve-all') checks the
          freshness of all messages and re-fetches the updated
          messages.  If a prefix argument is given (i.e. `C-u G R'),
          the messages within the region will be processed.  It is
          probably worthwhile if the site is running the hyper nikki
          system (`nikki' means "diary" in Japanese).

  3. Managing unseen messages

     If you have the following setting in the `~/.mew.el' file,

          (setq mew-shimbun-use-unseen t)

     newly fetched messages will be marked with the mark specified by
     the `mew-shimbun-mark-unseen' variable (`*' by default), and it
     will disappear automatically after reading the message.

     Normally, the unseen marks will not be saved in the `.mew-cache'
     file if scanning is not performed after adding or deleting marks
     in the Mew summary mode, but if you add the following line to the
     `~/.mew.el' file,

          (setq mew-shimbun-use-unseen-cache-save t)

     the unseen marks will be saved in the `.mew-cache' file
     automatically for the `shimbun' groups when exiting Mew or
     killing a folder (using `C-c C-q').  However, it is not securely
     saved (2) (*Note Mew Shimbun-Footnotes::).  To do this securely,
     you had better have the habit of performing the `scan update'
     command after reading the folder.

     If you don't like the `*' mark for unseen messages, customize the
     `mew-shimbun-mark-unseen' variable (see above).  By specifying
     the mark by `C-u N', you will be able to lead a better life with
     taking care of unseen messages.

  4. Expiring messages

     You can expire messages if you set the `mew-shimbun-expires'
     variable beforehand.  For example:

          (setq mew-shimbun-expires
                '(("yomiuri" . 7)
                  ("asahi" . 1)
                  ("slashdot-jp" . 7)
                  ("emacs" . 7)))

     If you set this variable as shown above, you can specify the
     expiry period; 7 days for `+shimbun/yomiuri', 1 day for
     `+shimbun/asahi'.  Messages in the `shimbun' folder where the
     expiry period is not specified will never be expired.  You can
     use the `G e' command (`mew-shimbun-expire') to expire the
     expirable messages in the current folder.  The `G E' command
     (`mew-shimbun-expire-all') is for expiring the expirable messages
     in all the `shimbun' folders.  Note that once the messages have
     been expired, you cannot recover them.

  5. How to mark messages with `$' as unseen

     Put the following lines in the `~/.mew.el' file in order to
     define the `$' mark and use `$' for the mark of unseen.  See
     `http://www.mew.org/ml/mew-dist-2.0/msg01251.html' if you would
     like to replace the `$' mark with another.

     ;;----------------------------------------------------------------------
     ;;; Code for using `$' as the unseen mark.
     (setq mew-mark-unseen ?$)
     (setq mew-shimbun-mark-unseen mew-mark-unseen)
     (setq mew-mark-show-list (cons mew-mark-unseen mew-mark-show-list))
     (setq mew-mark-afterstep-spec
           (cons (cons mew-mark-unseen '(1 0 1 0 0 0 0))
                 mew-mark-afterstep-spec))
     (setq mew-mark-spec
           (cons (list mew-mark-unseen "unseen" 0 nil nil nil nil nil)
                 mew-mark-spec))
     (setq mew-highlight-mark-keywords
           (cons
            (cons mew-mark-unseen 'mew-face-mark-unseen)
            mew-highlight-mark-keywords))
     (defface mew-face-mark-unseen
       '((((class color) (type tty))
          (:foreground "green"))
         (((class color) (background light))
          (:foreground "deep pink" :bold t :italic t))
         (((class color) (background dark))
          (:foreground "thistle"))
         (t (:bold t)))
       "*Face to highlight the unseen mark"
       :group 'mew-highlight)
     (defun mew-summary-unseen (&optional count)
       "Put the unseen mark(default is '$') in COUNT times."
       (interactive "P")
       (mew-mark-put-mark-loop (function mew-summary-unseen-one) count nil))
     (defun mew-summary-unseen-one (&optional no-msg)
       "Put the unseen mark(default is '$') on this message."
       (mew-mark-put-mark mew-mark-unseen no-msg))
     (defun mew-summary-mark-unseen ()
       "Change the '*' mark into the '$' mark."
       (interactive)
       (mew-summary-exchange-mark mew-mark-review mew-mark-unseen))
     (defun mew-thread-mark-unseen ()
       "Put the '$' mark on all messages of the current sub-thread."
       (interactive)
       (mew-thread-mark mew-mark-unseen))

     (define-key mew-summary-mode-map "$"  'mew-summary-unseen)
     (define-key mew-summary-mode-map "m$" 'mew-summary-mark-unseen)
     (define-key mew-summary-mode-map "t$" 'mew-thread-mark-unseen)
     ;;----------------------------------------------------------------------


