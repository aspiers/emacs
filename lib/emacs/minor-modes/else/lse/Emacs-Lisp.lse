;; Copyright (C) 1997,1998,1999,2000,2001,2002,2003 Peter Milliken
;;
;; Author: Peter Milliken <peterm@resmed.com.au>,
;;                        <peter.millken@exemail.com.au>
;;
;; Keywords: language sensitive abbreviation template placeholder token
;;
;; GNU Emacs is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; GNU Emacs is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.
 
DELETE LANGUAGE "Emacs-Lisp" -
DEFINE LANGUAGE "Emacs-Lisp" -
    /INITIAL_STRING="{compilation_unit}" -
    /PUNCTUATION_CHARACTERS=",;()*.'" -
    /SELF_INSERT_CHARACTERS=" `~!@#$%^&*(),.<>/?;:'[]{}=\-+|""
    /VALID_IDENTIFIER_CHARACTERS="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789"
    /INDENT_SIZE=2
    /VERSION=1.9

END DEFINE

DELETE PLACEHOLDER COMPILATION_UNIT -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER COMPILATION_UNIT -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=NONTERMINAL

  "[file_header]"
  "[def]..."
  "[defun]..."
  "[defcustom]..."

END DEFINE

DELETE PLACEHOLDER FILE_HEADER -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER FILE_HEADER -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=NONTERMINAL

  ";;; {file-name}.el --- {package-name}"
  ""
  ";; Copyright (C) {year}... {author-name}"
  ";;"
  ";; Author: {author-name} [email-address]"
  ";;"
  ";; $Date[please_expand_me]$"
  ";; Version: {text}"
  ";; Keywords: {text}..."
  ";;"
  ";;"
  ";; GNU Emacs is free software; you can redistribute it and/or modify"
  ";; it under the terms of the GNU General Public License as published by"
  ";; the Free Software Foundation; either version 2, or (at your option)"
  ";; any later version."
  ""
  ";; GNU Emacs is distributed in the hope that it will be useful,"
  ";; but WITHOUT ANY WARRANTY; without even the implied warranty of"
  ";; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
  ";; GNU General Public License for more details."
  ""
  ";; You should have received a copy of the GNU General Public License"
  ";; along with GNU Emacs; see the file COPYING.  If not, write to the"
  ";; Free Software Foundation, Inc., 59 Temple Place - Suite 330,"
  ";; Boston, MA 02111-1307, USA."
  ""
  ";;; Commentary:"
  ""
  ";;  {text}"
  ""
  ";;; Change Log:"
  ""
  ";;; Code:"
  ""

END DEFINE

DELETE PLACEHOLDER PACKAGE-NAME -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER PACKAGE-NAME -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=TERMINAL

  "Enter the name of the package"

END DEFINE

DELETE PLACEHOLDER YEAR -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER YEAR -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR=", " -
  /TYPE=TERMINAL

  "Enter the year of the copyright"

END DEFINE

DELETE PLACEHOLDER EMAIL-ADDRESS -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER EMAIL-ADDRESS -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=TERMINAL

  "Enter your email address"

END DEFINE

DELETE PLACEHOLDER PLEASE_EXPAND_ME -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER PLEASE_EXPAND_ME -
    /LANGUAGE="Emacs-Lisp" -
    /TYPE=NONTERMINAL

    ":"

END DEFINE

DELETE PLACEHOLDER AUTHOR-NAME -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER AUTHOR-NAME -
  /LANGUAGE="Emacs-Lisp" -
  /AUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=TERMINAL

  "Enter the name of the author"

END DEFINE


DELETE PLACEHOLDER FILE-NAME -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER FILE-NAME -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=TERMINAL

  "Please enter the name of the file"

END DEFINE

DELETE PLACEHOLDER DEF -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER DEF -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=MENU

  "defmacro"/PLACEHOLDER
  "defvar"/PLACEHOLDER
  "defadvice"/PLACEHOLDER
  "defalias"/PLACEHOLDER
  "defconst"/TOKEN

END DEFINE

DELETE PLACEHOLDER DEFUN -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER DEFUN -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Define a lisp function" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(defun {identifier} ([defun_arguments]...)"
    "  [Documentation]"
    "  [interactive]"
    "  {statement}...)"

END DEFINE

DELETE PLACEHOLDER DEFUN_ARGUMENTS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER DEFUN_ARGUMENTS -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="lisp defun arguments" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL
    /PLACEHOLDER=IDENTIFIER

END DEFINE

DELETE PLACEHOLDER DEFVAR -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER DEFVAR -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Define a variable" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(defvar {identifier} [value]"
    "  [Documentation])"

END DEFINE

DELETE PLACEHOLDER IDENTIFIER -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER IDENTIFIER -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR=" " -
    /TYPE=TERMINAL

    "Just type in a legal Elisp identifier"

END DEFINE

DELETE PLACEHOLDER DOCUMENTATION -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER DOCUMENTATION -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="lisp function Documentation" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    ""[text]""

END DEFINE

DELETE PLACEHOLDER TEXT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER TEXT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="lisp function template" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR=" " -
    /TYPE=TERMINAL

    "Just type some text"

END DEFINE

DELETE PLACEHOLDER LOCAL_DEFINITIONS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER LOCAL_DEFINITIONS -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="lisp local argument" -
    /DUPLICATION=VERTICAL -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "({identifier} [value])"

END DEFINE

DELETE PLACEHOLDER VALUE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER VALUE -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="lisp local argument initialisation value" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Type a valid initialisation value that you want to use"

END DEFINE

DELETE PLACEHOLDER STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="lisp statement menu" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=MENU

    "let_statement"/PLACEHOLDER
    "if_statement"/PLACEHOLDER
    "progn_statement"/PLACEHOLDER
    "plain_statement"/PLACEHOLDER
    "cond_statement"/PLACEHOLDER
    "while_statement"/PLACEHOLDER
    "setq_stmt"/PLACEHOLDER
    "catch_stmt"/PLACEHOLDER
    "throw"/TOKEN
    "unless"/TOKEN
    "when"/TOKEN
    "dolist"/TOKEN
    "dotimes"/TOKEN
    "error"/TOKEN
    "signal"/TOKEN
    "condition-case"/PLACEHOLDER
    "unwind-protect"/PLACEHOLDER
    "property-list-stmt"/PLACEHOLDER/NOFOLLOW
    "symbols"/PLACEHOLDER/NOFOLLOW
    "sequences"/PLACEHOLDER/NOFOLLOW
    "association_lists"/PLACEHOLDER/NOFOLLOW
    "boolean-vectors"/PLACEHOLDER/NOFOLLOW
    "arrays"/PLACEHOLDER/NOFOLLOW
    "lists-sets"/PLACEHOLDER/NOFOLLOW
    "string-stmts"/PLACEHOLDER/NOFOLLOW

END DEFINE

DELETE PLACEHOLDER IF_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER IF_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="if statement" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(if {condition}"
    "    {statement}"
    "  [statement]...)"

END DEFINE

DELETE PLACEHOLDER LET_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER LET_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="let statement" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(let ([local_definitions]...)"
    "  {statement}...)"

END DEFINE

DELETE PLACEHOLDER PROGN_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER PROGN_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="progn statement" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(progn"
    "  {statement}...)"

END DEFINE

DELETE PLACEHOLDER PLAIN_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER PLAIN_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="plain statement" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "({function} [fun_arguments]...)"

END DEFINE

DELETE PLACEHOLDER FUN_ARGUMENTS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER FUN_ARGUMENTS -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="arguments to a function call" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /PLACEHOLDER=IDENTIFIER

END DEFINE

DELETE PLACEHOLDER FUNCTION -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER FUNCTION -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="function call" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Type in a Lisp function name ie setq, assoc etc"

END DEFINE


DELETE PLACEHOLDER COND_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER COND_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="cond statement" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(cond {cond_alternative}...)"

END DEFINE

DELETE PLACEHOLDER COND_ALTERNATIVE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER COND_ALTERNATIVE -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="cond alternative statement" -
    /DUPLICATION=VERTICAL -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "({condition}"
    " {statement}...)"

END DEFINE

DELETE PLACEHOLDER WHILE_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER WHILE_STATEMENT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="While statement" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(while {condition}"
    "   {statement}...)"

END DEFINE

DELETE PLACEHOLDER CONDITION -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER CONDITION -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR=" " -
    /TYPE=TERMINAL

    "Just type a condition"

END DEFINE

DELETE PLACEHOLDER DEFADVICE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER DEFADVICE -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="lisp advice template" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(defadvice {identifier} ({ad_type} {identifier} [ad_flag]...)"
    "  [Documentation]"
    "  [interactive]"
    "  {statement}...)"

END DEFINE

DELETE PLACEHOLDER DEFMACRO -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER DEFMACRO -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Define a macro" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(defmacro {identifier} ([fun_arguments])"
    "  [Documentation]"
    "  [interactive]"
    "  {statement}...)"

END DEFINE

DELETE PLACEHOLDER DEFALIAS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER DEFALIAS -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Define an alias" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(defalias '{identifier} '{identifier})"

END DEFINE

DELETE PLACEHOLDER AD_FLAG -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER AD_FLAG -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="lisp advice type menu" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR=" " -
    /TYPE=MENU

    "activate"
    "protect"
    "compile"
    "preactivate"
    "disable"


END DEFINE

DELETE PLACEHOLDER INTERACTIVE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER INTERACTIVE -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="lisp interactive statement" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(interactive [interactive_string])"

END DEFINE

DELETE PLACEHOLDER INTERACTIVE_STRING -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER INTERACTIVE_STRING -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="lisp function Documentation" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    ""[text]""

END DEFINE

DELETE PLACEHOLDER AD_TYPE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER AD_TYPE -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="lisp advice type menu" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=MENU

    "before"
    "around"
    "after"

END DEFINE

DELETE TOKEN DEFUN -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DEFUN -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=DEFUN

END DEFINE

DELETE TOKEN DEFVAR -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DEFVAR -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=DEFVAR

END DEFINE

DELETE TOKEN DEFCONST -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DEFCONST -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Define a const expression"

    "(defconst {identifier} [value]"
    "  [Documentation])"

END DEFINE

DELETE TOKEN DEFMACRO -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DEFMACRO -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=DEFMACRO

END DEFINE

DELETE TOKEN DEFADVICE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DEFADVICE -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=DEFADVICE

END DEFINE

DELETE TOKEN DEFALIAS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DEFALIAS -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=DEFALIAS

END DEFINE

DELETE TOKEN DF -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DF -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=DEFUN

END DEFINE

DELETE TOKEN DV -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DV -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=DEFVAR

END DEFINE

DELETE TOKEN DA -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DA -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=DEFADVICE

END DEFINE

DELETE TOKEN IF -
     /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN IF -
     /LANGUAGE="Emacs-Lisp" -
     /PLACEHOLDER=IF_STATEMENT

END DEFINE

DELETE TOKEN PROGN -
     /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN PROGN -
     /LANGUAGE="Emacs-Lisp" -
     /PLACEHOLDER=PROGN_STATEMENT

END DEFINE

DELETE TOKEN COND -
     /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN COND -
     /LANGUAGE="Emacs-Lisp" -
     /PLACEHOLDER=COND_STATEMENT

END DEFINE

DELETE TOKEN WHILE -
     /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN WHILE -
     /LANGUAGE="Emacs-Lisp" -
     /PLACEHOLDER=WHILE_STATEMENT

END DEFINE

DELETE PLACEHOLDER CATCH_STMT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER CATCH_STMT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(catch '{catch-name}"
    "  {statement}...)"

END DEFINE

DELETE PLACEHOLDER CATCH-NAME -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER CATCH-NAME -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

   "Enter a valid Elisp name for the throw to identify"

END DEFINE

DELETE TOKEN CATCH -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN CATCH -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=CATCH_STMT

END DEFINE

DELETE PLACEHOLDER SETQ_STMT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER SETQ_STMT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL
    
    "(setq {variable} {statement})"

END DEFINE

DELETE PLACEHOLDER VARIABLE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER VARIABLE -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL
    
    "Enter an elisp variable name."

END DEFINE

DELETE TOKEN SET -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN SET -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=SETQ_STMT -

END DEFINE

DELETE PLACEHOLDER DEFCUSTOM -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER DEFCUSTOM -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=NONTERMINAL

  "(defcustom {variable} {default-value}"
  "  "{documentation}""
  "  {custom-type}..."
  "  :group {group-name})"

END DEFINE

DELETE PLACEHOLDER COMPOSITE-TYPE -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER COMPOSITE-TYPE -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=MENU

  "(restricted-sexp :match-alternatives ({criteria}))"
  "(cons {car-type} {cdr-type}"
  "(list {element-types}...)"
  "(vector {element-types}...)"
  "(choice {alternative-types}...)"
  "("

END DEFINE

DELETE PLACEHOLDER CDR-TYPE -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER CDR-TYPE -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=TERMINAL
  /PLACEHOLDER=simple-type

  "Enter a valid CDR Type i.e. symbol"

END DEFINE


DELETE PLACEHOLDER CAR-TYPE -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER CAR-TYPE -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=TERMINAL

  "Enter a car type i.e. string, integer etc"

END DEFINE


DELETE PLACEHOLDER CRITERIA -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER CRITERIA -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=TERMINAL

  "This should be a list and each element should be one of these possibilities:"
  " "
  "predicate - that is, a function of one argument that has no"
  "  side effects, and returns either `nil' or non-`nil' according"
  "  to the argument.  Using a predicate in the list says that"
  "  objects for which the predicate returns non-`nil' are"
  "  acceptable."
  ""
  "quoted constant--that is, `'OBJECT'.  This sort of element"
  "  in the list says that OBJECT itself is an acceptable value."
  "  For example,"
  ""
  "       (restricted-sexp :match-alternatives"
  "                        (integerp 't 'nil))"
  ""
  "  allows integers, `t' and `nil' as legitimate values."

END DEFINE

DELETE PLACEHOLDER ELEMENT-TYPES -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER ELEMENT-TYPES -
  /LANGUAGE="Emacs-Lisp" -
  /PLACEHOLDER=SIMPLE-TYPE

END DEFINE

DELETE PLACEHOLDER ALTERNATIVE-TYPES -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER ALTERNATIVE-TYPES -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=VERTICAL -
  /SEPARATOR="" -
  /TYPE=MENU

  "alternative"/PLACEHOLDER
  "simple-type"/PLACEHOLDER
  "constant"/PLACEHOLDER

END DEFINE

DELETE PLACEHOLDER ALTERNATIVE -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER ALTERNATIVE -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=NONTERMINAL

  "({simple-type} :tag "[text]")"

END DEFINE

DELETE PLACEHOLDER CONSTANT -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER CONSTANT -
  /STLANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=MENU

  "(const {value})"
  "(const :tag "[text]" {value})"
  "(other :tag "[text]" {value})"
  "(function-item {function})"
  "(variable-item {variable})"
  "(set {elements}...)"
  "(repeat {element-type})"

END DEFINE

DELETE PLACEHOLDER VALUE -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER VALUE -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=TERMINAL

  "Enter a value such as nil or t or 'anything else'"

END DEFINE


DELETE PLACEHOLDER SIMPLE-TYPE -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER SIMPLE-TYPE -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=MENU

  "'(integer)"
  "'(boolean)"
  "'(sexp)"
  "'(number)"
  "'(string)"
  "'(regexp)"
  "'(character)"
  "'(file)"
  "'(file :must-match t)"
  "'(directory)"
  "'(hook)"
  "'(symbol)"
  "'(function)"
  "'(variable)"
  "'(face)"

END DEFINE


DELETE PLACEHOLDER C-TYPE -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER C-TYPE -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=MENU

  "simple-type"/PLACEHOLDER
  "composite-type"/PLACEHOLDER
  "type-keywords"/PLACEHOLDER

END DEFINE


DELETE PLACEHOLDER CUSTOM-TYPE -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER CUSTOM-TYPE -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=VERTICAL -
  /SEPARATOR="" -
  /TYPE=NONTERMINAL

  ":type {c-type}"

END DEFINE


DELETE PLACEHOLDER DEFAULT-VALUE -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER DEFAULT-VALUE -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=TERMINAL

  "Enter a default value i.e. t, nil, "diff""

END DEFINE


DELETE PLACEHOLDER VARIABLE -
  /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER VARIABLE -
  /LANGUAGE="Emacs-Lisp" -
  /NOAUTO_SUBSTITUTE -
  /DESCRIPTION="" -
  /DUPLICATION=CONTEXT_DEPENDENT -
  /SEPARATOR="" -
  /TYPE=TERMINAL

  "Enter a variable name"

END DEFINE


DELETE TOKEN UNLESS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN UNLESS -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="" -

    "(unless {condition}"
    "    {statement}...)"

END DEFINE

DELETE TOKEN WHEN -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN WHEN -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="" -

    "(when {condition}"
    "    {statement}...)"

END DEFINE

DELETE TOKEN DOLIST -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DOLIST -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Iterate over a list" -

    "(dolist ({var} {list} [result])"
    "    {statement}...)"

END DEFINE

DELETE PLACEHOLDER VAR -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER VAR -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter a variable name"

END DEFINE

DELETE PLACEHOLDER LIST -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER LIST -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter the name of a list or an actual list i.e. (2 3)"

END DEFINE

DELETE PLACEHOLDER RESULT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER RESULT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=MENU

    "nil"
    "var"/PLACEHOLDER
    "expression"/PLACEHOLDER

END DEFINE

DELETE TOKEN DOTIMES -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DOTIMES -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Repeat a set of statements a fixed number of times." -

    "(dotimes ({var} {count} [result])"
    "    {statement}...)"

END DEFINE

DELETE PLACEHOLDER COUNT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER COUNT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter the number of times the loop should repeat."

END DEFINE

DELETE TOKEN THROW -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN THROW -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="" -

    "(throw {catch-name} {result})"

END DEFINE

DELETE TOKEN ERROR -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN ERROR -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Error Statement" -

    "(error {format-string} [rest_args])"

END DEFINE

DELETE PLACEHOLDER FORMAT-STRING -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER FORMAT-STRING -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="String format" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    ""{text}""

END DEFINE

DELETE TOKEN SIGNAL -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN SIGNAL -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Signal an error" -

    "(signal {err-symbol} {data})"

END DEFINE

DELETE PLACEHOLDER ERR-SYMBOL -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER ERR-SYMBOL -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Error Symbol i.e. 'wrong-number-of-arguments" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter an error symbol i.e. 'wong-number-of-arguments."

END DEFINE

DELETE PLACEHOLDER DATA -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER DATA -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="List of addition Lisp objects relevant to the error." -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter a list of additional Lisp objects relevant to the error"
    "i.e. '(x y) or '("My unknown error condition")"

END DEFINE

DELETE PLACEHOLDER CONDITION-CASE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER CONDITION-CASE -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Establish error handlers around protected forms" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(condition-case [var]"
    "    {protected-forms}"
    "    {handlers}...)"

END DEFINE

DELETE PLACEHOLDER PROTECTED-FORMS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER PROTECTED-FORMS -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=STATEMENT

END DEFINE

DELETE PLACEHOLDER HANDLERS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER HANDLERS -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="condition-case handlers" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(({error-cond-name}...)"
    "    {statement}...)"

END DEFINE

DELETE PLACEHOLDER ERROR-COND-NAME -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER ERROR-COND-NAME -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Name of the error condition" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter the name of an error condition i.e. arith-error, file-error"

END DEFINE

DELETE PLACEHOLDER REST_ARGS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER REST_ARGS -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter the arguments for the format string."

END DEFINE

DELETE PLACEHOLDER UNWIND-PROTECT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER UNWIND-PROTECT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Return a data structure to a consistant state in the event of an error" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    "(unwind-protect"
    "    {statement}..."
    "    {cleanup-forms})"

END DEFINE

DELETE PLACEHOLDER CLEANUP-FORMS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER CLEANUP-FORMS -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=STATEMENT

END DEFINE

DELETE PLACEHOLDER PROPERTY-LIST-STMT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER PROPERTY-LIST-STMT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Property List Statements" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=MENU

    "(symbol-plist {symbol})"
    "(setplist {symbol} {plist})"
    "(get {symbol} {property})"
    "(put {symbol} {property} {value})"

END DEFINE

DELETE PLACEHOLDER SYMBOL -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER SYMBOL -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Emacs variable" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter the name of a symbol i.e. 'foo"

END DEFINE

DELETE PLACEHOLDER PLIST -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER PLIST -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Property List" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter a property list i.e. '(a 1 b (2 3) c nil)"

END DEFINE

DELETE PLACEHOLDER PROPERTY -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER PROPERTY -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Property" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter the name of a property i.e. the property list is "
    "'(a 1 b (2 3) c nil) then a property of this property list"
    "would be 'a"

END DEFINE

DELETE PLACEHOLDER SYMBOLS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER SYMBOLS -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Statements dealing with Symbols i.e. intern, make-symbol etc" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=MENU

    "(symbol-name {symbol})"
    "(make-symbol {string})"
    "(intern {symbol} [obarray])"
    "(intern-soft {symbol} [obarray])"
    "(mapatoms {function} [obarray])"
    "(unintern {symbol} [obarray])"

END DEFINE

DELETE PLACEHOLDER OBARRAY -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER OBARRAY -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Name of an obarray" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter the name of an obarray (declared using make-vector)"

END DEFINE

DELETE PLACEHOLDER FUNCTION -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER FUNCTION -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter a function name i.e. 'foo"

END DEFINE

DELETE PLACEHOLDER NAME -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER NAME -
    /LANGUAGE="Emacs-Lisp" -
    /PLACEHOLDER=TEXT

END DEFINE

DELETE PLACEHOLDER SEQUENCES -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER SEQUENCES -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Commands that operate on sequences i.e. length, elt" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=MENU

    "length"/TOKEN
    "elt"/TOKEN
    "(copy-sequence {var})"

END DEFINE

DELETE TOKEN LENGTH -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN LENGTH -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Return the length of the sequence" -

    "(length {var})"

END DEFINE

DELETE TOKEN ELT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN ELT -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Return the 'index item from the sequence" -

    "(elt {var} {index})"

END DEFINE

DELETE PLACEHOLDER INDEX -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER INDEX -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Index into the list/sequence - 0 is the first element"

END DEFINE

DELETE PLACEHOLDER ASSOCIATION_LISTS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER ASSOCIATION_LISTS -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Association List commands i.e. assoc, copy-alist" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=MENU

    "assoc"/TOKEN
    "rassoc"/TOKEN
    "assq"/TOKEN
    "rassq"/TOKEN
    "assoc-default"/TOKEN
    "copy-alist"/TOKEN
    "assq-delete-all"/TOKEN

END DEFINE

DELETE TOKEN ASSQ-DELETE-ALL -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN ASSQ-DELETE-ALL -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Delete from alist all elements whose CAR is key, return alist" -

    "(assq-delete-all {key} {alist})"

END DEFINE

DELETE TOKEN COPY-ALIST -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN COPY-ALIST -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Copy the alist" -

    "(copy-alist {alist})"

END DEFINE

DELETE TOKEN ASSOC-DEFAULT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN ASSOC-DEFAULT -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Search alist for key using optional test function" -

    "(assoc-default {key} {alist} [{function} {default-value}])"

END DEFINE

DELETE TOKEN RASSQ -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN RASSQ -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Similar to RASSOC except eq used instead of equal" -

    "(rassq {value} {alist})"

END DEFINE

DELETE TOKEN ASSQ -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN ASSQ -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Similar to ASSOC except eq used" -

    "(assq {key} {alist})"

END DEFINE

DELETE TOKEN RASSOC -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN RASSOC -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="return the first association with a value of value in the alist" -

    "(rassoc {value} {alist})"

END DEFINE

DELETE TOKEN ASSOC -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN ASSOC -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Return the first association for key in the alist using equal" -

    "(assoc {key} {alist})"

END DEFINE

DELETE PLACEHOLDER ALIST -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER ALIST -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Association list of the form ((a . 1) ("b" (2 3)))"

END DEFINE

DELETE PLACEHOLDER KEY -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER KEY -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Key to an alist" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter a key to an alist i.e. 'yellow"

END DEFINE

DELETE PLACEHOLDER STRING -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER STRING -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=NONTERMINAL

    ""{text}""

END DEFINE

DELETE PLACEHOLDER BOOLEAN-VECTORS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER BOOLEAN-VECTORS -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Boolean vector commands" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=MENU

    "make-bool-vector"/TOKEN
    "bool-vector-p"/TOKEN

END DEFINE

DELETE TOKEN MAKE-BOOL-VECTOR -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN MAKE-BOOL-VECTOR -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="" -

    "(make-bool-vector {vect-length} {initial})"

END DEFINE

DELETE PLACEHOLDER INITIAL -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER INITIAL -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter the initial value for each boolean element i.e. t or nil"

END DEFINE


DELETE PLACEHOLDER VECT-LENGTH -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER VECT-LENGTH -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter a length for the vector"

END DEFINE

DELETE PLACEHOLDER ARRAYS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER ARRAYS -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Array commands" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=MENU

    "arrayp"/TOKEN
    "aref"/TOKEN
    "aset"/TOKEN
    "fillarray"/TOKEN

END DEFINE

DELETE TOKEN FILLARRAY -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN FILLARRAY -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Fill array with object" -

    "(fillarray {array} {object})"

END DEFINE

DELETE TOKEN ASET -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN ASET -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="set the indexth element of array to object" -

    "(aset {array} {index} {object})"

END DEFINE

DELETE TOKEN ARRAYP -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN ARRAYP -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Test if an array" -

    "(arrayp {object})"

END DEFINE

DELETE TOKEN AREF -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN AREF -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="return the indexth element of array" -

    "(aref {array} {index})"

END DEFINE

DELETE PLACEHOLDER ARRAY -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER ARRAY -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter an array name"

END DEFINE


DELETE PLACEHOLDER OBJECT -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER OBJECT -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter an object name i.e. foo"

END DEFINE


DELETE PLACEHOLDER LISTS-SETS -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER LISTS-SETS -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="Using lists as sets" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=MENU

    "memq"/TOKEN
    "member"/TOKEN
    "member-ignore-case"/TOKEN
    "delq"/TOKEN
    "delete"/TOKEN
    "remove"/TOKEN
    [menu placeholder body line]...

END DEFINE

DELETE TOKEN REMOVE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN REMOVE -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="non-destructively remove all objects in sequence" -

    "(remove {object} {sequence})"

END DEFINE

DELETE TOKEN DELETE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DELETE -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Destructively delete all object in sequence" -

    "(delete {object} {sequence})"

END DEFINE

DELETE PLACEHOLDER SEQUENCE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE PLACEHOLDER SEQUENCE -
    /LANGUAGE="Emacs-Lisp" -
    /NOAUTO_SUBSTITUTE -
    /DESCRIPTION="" -
    /DUPLICATION=CONTEXT_DEPENDENT -
    /SEPARATOR="" -
    /TYPE=TERMINAL

    "Enter the name of a sequence i.e. 'foo"

END DEFINE


DELETE TOKEN MEMBER -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN MEMBER -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Test for membership using equal" -

    "(member {object} {list})"

END DEFINE

DELETE TOKEN DELQ -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN DELQ -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Delete all object in the set/list using eq" -

    "(delq {object} {list})"

END DEFINE

DELETE TOKEN MEMBER-IGNORE-CASE -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN MEMBER-IGNORE-CASE -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Ignore case when testing for membership (strings)" -

    "(member-ignore-case {object} {list})"

END DEFINE

DELETE TOKEN MEMQ -
    /LANGUAGE="Emacs-Lisp" -
DEFINE TOKEN MEMQ -
    /LANGUAGE="Emacs-Lisp" -
    /DESCRIPTION="Test if object is a member of list" -

    "(memq {object} {list})"

END DEFINE

DELETE LANGUAGE Template - 
   /LANGUAGE=Template

[token_definition]...